// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: evol/proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_evol_2fproto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_evol_2fproto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_evol_2fproto_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17] PROTOBUF_SECTION_VARIABLE(
      protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_evol_2fproto_2fconfig_2eproto;
class AlgorithmConfig;
class AlgorithmConfigDefaultTypeInternal;
extern AlgorithmConfigDefaultTypeInternal _AlgorithmConfig_default_instance_;
class AlgorithmConfig_InstanceConfig;
class AlgorithmConfig_InstanceConfigDefaultTypeInternal;
extern AlgorithmConfig_InstanceConfigDefaultTypeInternal
    _AlgorithmConfig_InstanceConfig_default_instance_;
class AlgorithmConfig_InstanceConfig_SamplingSizeConfig;
class AlgorithmConfig_InstanceConfig_SamplingSizeConfigDefaultTypeInternal;
extern AlgorithmConfig_InstanceConfig_SamplingSizeConfigDefaultTypeInternal
    _AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_;
class ConjLimitConfig;
class ConjLimitConfigDefaultTypeInternal;
extern ConjLimitConfigDefaultTypeInternal _ConjLimitConfig_default_instance_;
class DoerrMutationConfig;
class DoerrMutationConfigDefaultTypeInternal;
extern DoerrMutationConfigDefaultTypeInternal _DoerrMutationConfig_default_instance_;
class EAAlgorithmConfig;
class EAAlgorithmConfigDefaultTypeInternal;
extern EAAlgorithmConfigDefaultTypeInternal _EAAlgorithmConfig_default_instance_;
class FitnessLimitConfig;
class FitnessLimitConfigDefaultTypeInternal;
extern FitnessLimitConfigDefaultTypeInternal _FitnessLimitConfig_default_instance_;
class GAAlgorithmConfig;
class GAAlgorithmConfigDefaultTypeInternal;
extern GAAlgorithmConfigDefaultTypeInternal _GAAlgorithmConfig_default_instance_;
class GlobalConfig;
class GlobalConfigDefaultTypeInternal;
extern GlobalConfigDefaultTypeInternal _GlobalConfig_default_instance_;
class LoggerConfig;
class LoggerConfigDefaultTypeInternal;
extern LoggerConfigDefaultTypeInternal _LoggerConfig_default_instance_;
class LoggerConfig_LoggerEntry;
class LoggerConfig_LoggerEntryDefaultTypeInternal;
extern LoggerConfig_LoggerEntryDefaultTypeInternal _LoggerConfig_LoggerEntry_default_instance_;
class MinisatCliConfig;
class MinisatCliConfigDefaultTypeInternal;
extern MinisatCliConfigDefaultTypeInternal _MinisatCliConfig_default_instance_;
class ParSolverConfig;
class ParSolverConfigDefaultTypeInternal;
extern ParSolverConfigDefaultTypeInternal _ParSolverConfig_default_instance_;
class ResourceLimitConfig;
class ResourceLimitConfigDefaultTypeInternal;
extern ResourceLimitConfigDefaultTypeInternal _ResourceLimitConfig_default_instance_;
class SimpSolverConfig;
class SimpSolverConfigDefaultTypeInternal;
extern SimpSolverConfigDefaultTypeInternal _SimpSolverConfig_default_instance_;
class SolverConfig;
class SolverConfigDefaultTypeInternal;
extern SolverConfigDefaultTypeInternal _SolverConfig_default_instance_;
class UniformMutationConfig;
class UniformMutationConfigDefaultTypeInternal;
extern UniformMutationConfigDefaultTypeInternal _UniformMutationConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::AlgorithmConfig* Arena::CreateMaybeMessage<::AlgorithmConfig>(Arena*);
template <>
::AlgorithmConfig_InstanceConfig* Arena::CreateMaybeMessage<::AlgorithmConfig_InstanceConfig>(
    Arena*);
template <>
::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
Arena::CreateMaybeMessage<::AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(Arena*);
template <>
::ConjLimitConfig* Arena::CreateMaybeMessage<::ConjLimitConfig>(Arena*);
template <>
::DoerrMutationConfig* Arena::CreateMaybeMessage<::DoerrMutationConfig>(Arena*);
template <>
::EAAlgorithmConfig* Arena::CreateMaybeMessage<::EAAlgorithmConfig>(Arena*);
template <>
::FitnessLimitConfig* Arena::CreateMaybeMessage<::FitnessLimitConfig>(Arena*);
template <>
::GAAlgorithmConfig* Arena::CreateMaybeMessage<::GAAlgorithmConfig>(Arena*);
template <>
::GlobalConfig* Arena::CreateMaybeMessage<::GlobalConfig>(Arena*);
template <>
::LoggerConfig* Arena::CreateMaybeMessage<::LoggerConfig>(Arena*);
template <>
::LoggerConfig_LoggerEntry* Arena::CreateMaybeMessage<::LoggerConfig_LoggerEntry>(Arena*);
template <>
::MinisatCliConfig* Arena::CreateMaybeMessage<::MinisatCliConfig>(Arena*);
template <>
::ParSolverConfig* Arena::CreateMaybeMessage<::ParSolverConfig>(Arena*);
template <>
::ResourceLimitConfig* Arena::CreateMaybeMessage<::ResourceLimitConfig>(Arena*);
template <>
::SimpSolverConfig* Arena::CreateMaybeMessage<::SimpSolverConfig>(Arena*);
template <>
::SolverConfig* Arena::CreateMaybeMessage<::SolverConfig>(Arena*);
template <>
::UniformMutationConfig* Arena::CreateMaybeMessage<::UniformMutationConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LogType : int {
  TIME = 0,
  HEURISTIC_VARS = 1,
  BEST_INSTANCE = 2,
  CURR_INSTANCE = 3,
  SOLVER_STATS = 4,
  LogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogType_IsValid(int value);
constexpr LogType LogType_MIN = TIME;
constexpr LogType LogType_MAX = SOLVER_STATS;
constexpr int LogType_ARRAYSIZE = LogType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor();
template <typename T>
inline const std::string& LogType_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, LogType>::value || ::std::is_integral<T>::value,
      "Incorrect type passed to function LogType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(LogType_descriptor(), enum_t_value);
}
inline bool LogType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogType>(
      LogType_descriptor(), name, value);
}
// ===================================================================

class AlgorithmConfig_InstanceConfig_SamplingSizeConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
                   */
{
 public:
  inline AlgorithmConfig_InstanceConfig_SamplingSizeConfig()
      : AlgorithmConfig_InstanceConfig_SamplingSizeConfig(nullptr) {}
  virtual ~AlgorithmConfig_InstanceConfig_SamplingSizeConfig();

  AlgorithmConfig_InstanceConfig_SamplingSizeConfig(
      const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from);
  AlgorithmConfig_InstanceConfig_SamplingSizeConfig(
      AlgorithmConfig_InstanceConfig_SamplingSizeConfig&& from) noexcept
      : AlgorithmConfig_InstanceConfig_SamplingSizeConfig() {
    *this = ::std::move(from);
  }

  inline AlgorithmConfig_InstanceConfig_SamplingSizeConfig& operator=(
      const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmConfig_InstanceConfig_SamplingSizeConfig& operator=(
      AlgorithmConfig_InstanceConfig_SamplingSizeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
  internal_default_instance() {
    return reinterpret_cast<const AlgorithmConfig_InstanceConfig_SamplingSizeConfig*>(
        &_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(
      AlgorithmConfig_InstanceConfig_SamplingSizeConfig& a,
      AlgorithmConfig_InstanceConfig_SamplingSizeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmConfig_InstanceConfig_SamplingSizeConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmConfig_InstanceConfig_SamplingSizeConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmConfig_InstanceConfig_SamplingSizeConfig* New() const final {
    return CreateMaybeMessage<AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(nullptr);
  }

  AlgorithmConfig_InstanceConfig_SamplingSizeConfig* New(
      ::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from);
  void MergeFrom(const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmConfig_InstanceConfig_SamplingSizeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlgorithmConfig.InstanceConfig.SamplingSizeConfig";
  }

 protected:
  explicit AlgorithmConfig_InstanceConfig_SamplingSizeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseCountFieldNumber = 1,
    kScaleFieldNumber = 3,
    kMaxStepsFieldNumber = 2,
  };
  // uint64 base_count = 1;
  void clear_base_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_count() const;
  void set_base_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_base_count() const;
  void _internal_set_base_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // double scale = 3;
  void clear_scale();
  double scale() const;
  void set_scale(double value);

 private:
  double _internal_scale() const;
  void _internal_set_scale(double value);

 public:
  // uint32 max_steps = 2;
  void clear_max_steps();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_steps() const;
  void set_max_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_steps() const;
  void _internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_count_;
  double scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmConfig_InstanceConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:AlgorithmConfig.InstanceConfig) */ {
 public:
  inline AlgorithmConfig_InstanceConfig() : AlgorithmConfig_InstanceConfig(nullptr) {}
  virtual ~AlgorithmConfig_InstanceConfig();

  AlgorithmConfig_InstanceConfig(const AlgorithmConfig_InstanceConfig& from);
  AlgorithmConfig_InstanceConfig(AlgorithmConfig_InstanceConfig&& from) noexcept
      : AlgorithmConfig_InstanceConfig() {
    *this = ::std::move(from);
  }

  inline AlgorithmConfig_InstanceConfig& operator=(const AlgorithmConfig_InstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmConfig_InstanceConfig& operator=(AlgorithmConfig_InstanceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmConfig_InstanceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmConfig_InstanceConfig* internal_default_instance() {
    return reinterpret_cast<const AlgorithmConfig_InstanceConfig*>(
        &_AlgorithmConfig_InstanceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(AlgorithmConfig_InstanceConfig& a, AlgorithmConfig_InstanceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmConfig_InstanceConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmConfig_InstanceConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmConfig_InstanceConfig* New() const final {
    return CreateMaybeMessage<AlgorithmConfig_InstanceConfig>(nullptr);
  }

  AlgorithmConfig_InstanceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmConfig_InstanceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmConfig_InstanceConfig& from);
  void MergeFrom(const AlgorithmConfig_InstanceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmConfig_InstanceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlgorithmConfig.InstanceConfig";
  }

 protected:
  explicit AlgorithmConfig_InstanceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef AlgorithmConfig_InstanceConfig_SamplingSizeConfig SamplingSizeConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingConfigFieldNumber = 4,
    kOmegaXFieldNumber = 1,
    kHeuristicSizeFieldNumber = 2,
    kMaxCacheSizeFieldNumber = 3,
  };
  // .AlgorithmConfig.InstanceConfig.SamplingSizeConfig sampling_config = 4;
  bool has_sampling_config() const;

 private:
  bool _internal_has_sampling_config() const;

 public:
  void clear_sampling_config();
  const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig& sampling_config() const;
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* release_sampling_config();
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* mutable_sampling_config();
  void set_allocated_sampling_config(
      ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* sampling_config);

 private:
  const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig& _internal_sampling_config() const;
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* _internal_mutable_sampling_config();

 public:
  void unsafe_arena_set_allocated_sampling_config(
      ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* sampling_config);
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* unsafe_arena_release_sampling_config();

  // uint32 omega_x = 1;
  void clear_omega_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 omega_x() const;
  void set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_omega_x() const;
  void _internal_set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 heuristic_size = 2;
  void clear_heuristic_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 heuristic_size() const;
  void set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heuristic_size() const;
  void _internal_set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 max_cache_size = 3;
  void clear_max_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cache_size() const;
  void set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cache_size() const;
  void _internal_set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:AlgorithmConfig.InstanceConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* sampling_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 omega_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heuristic_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cache_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:AlgorithmConfig) */ {
 public:
  inline AlgorithmConfig() : AlgorithmConfig(nullptr) {}
  virtual ~AlgorithmConfig();

  AlgorithmConfig(const AlgorithmConfig& from);
  AlgorithmConfig(AlgorithmConfig&& from) noexcept : AlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline AlgorithmConfig& operator=(const AlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmConfig& operator=(AlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const AlgorithmConfig*>(&_AlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(AlgorithmConfig& a, AlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmConfig* New() const final {
    return CreateMaybeMessage<AlgorithmConfig>(nullptr);
  }

  AlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmConfig& from);
  void MergeFrom(const AlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlgorithmConfig";
  }

 protected:
  explicit AlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef AlgorithmConfig_InstanceConfig InstanceConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kLimitTypeFieldNumber = 1,
    kSolverTypeFieldNumber = 2,
    kInstanceConfigFieldNumber = 3,
  };
  // string limit_type = 1;
  void clear_limit_type();
  const std::string& limit_type() const;
  void set_limit_type(const std::string& value);
  void set_limit_type(std::string&& value);
  void set_limit_type(const char* value);
  void set_limit_type(const char* value, size_t size);
  std::string* mutable_limit_type();
  std::string* release_limit_type();
  void set_allocated_limit_type(std::string* limit_type);

 private:
  const std::string& _internal_limit_type() const;
  void _internal_set_limit_type(const std::string& value);
  std::string* _internal_mutable_limit_type();

 public:
  // string solver_type = 2;
  void clear_solver_type();
  const std::string& solver_type() const;
  void set_solver_type(const std::string& value);
  void set_solver_type(std::string&& value);
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  std::string* mutable_solver_type();
  std::string* release_solver_type();
  void set_allocated_solver_type(std::string* solver_type);

 private:
  const std::string& _internal_solver_type() const;
  void _internal_set_solver_type(const std::string& value);
  std::string* _internal_mutable_solver_type();

 public:
  // .AlgorithmConfig.InstanceConfig instance_config = 3;
  bool has_instance_config() const;

 private:
  bool _internal_has_instance_config() const;

 public:
  void clear_instance_config();
  const ::AlgorithmConfig_InstanceConfig& instance_config() const;
  ::AlgorithmConfig_InstanceConfig* release_instance_config();
  ::AlgorithmConfig_InstanceConfig* mutable_instance_config();
  void set_allocated_instance_config(::AlgorithmConfig_InstanceConfig* instance_config);

 private:
  const ::AlgorithmConfig_InstanceConfig& _internal_instance_config() const;
  ::AlgorithmConfig_InstanceConfig* _internal_mutable_instance_config();

 public:
  void unsafe_arena_set_allocated_instance_config(
      ::AlgorithmConfig_InstanceConfig* instance_config);
  ::AlgorithmConfig_InstanceConfig* unsafe_arena_release_instance_config();

  // @@protoc_insertion_point(class_scope:AlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr limit_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_type_;
  ::AlgorithmConfig_InstanceConfig* instance_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ResourceLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ResourceLimitConfig) */ {
 public:
  inline ResourceLimitConfig() : ResourceLimitConfig(nullptr) {}
  virtual ~ResourceLimitConfig();

  ResourceLimitConfig(const ResourceLimitConfig& from);
  ResourceLimitConfig(ResourceLimitConfig&& from) noexcept : ResourceLimitConfig() {
    *this = ::std::move(from);
  }

  inline ResourceLimitConfig& operator=(const ResourceLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLimitConfig& operator=(ResourceLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceLimitConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceLimitConfig*>(&_ResourceLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(ResourceLimitConfig& a, ResourceLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceLimitConfig* New() const final {
    return CreateMaybeMessage<ResourceLimitConfig>(nullptr);
  }

  ResourceLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceLimitConfig& from);
  void MergeFrom(const ResourceLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResourceLimitConfig";
  }

 protected:
  explicit ResourceLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryLimitKbFieldNumber = 1,
    kTimeLimitSecFieldNumber = 2,
  };
  // uint32 memory_limit_kb = 1;
  void clear_memory_limit_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_limit_kb() const;
  void set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memory_limit_kb() const;
  void _internal_set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 time_limit_sec = 2;
  void clear_time_limit_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_limit_sec() const;
  void set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_limit_sec() const;
  void _internal_set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:ResourceLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_limit_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_limit_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class FitnessLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:FitnessLimitConfig) */ {
 public:
  inline FitnessLimitConfig() : FitnessLimitConfig(nullptr) {}
  virtual ~FitnessLimitConfig();

  FitnessLimitConfig(const FitnessLimitConfig& from);
  FitnessLimitConfig(FitnessLimitConfig&& from) noexcept : FitnessLimitConfig() {
    *this = ::std::move(from);
  }

  inline FitnessLimitConfig& operator=(const FitnessLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitnessLimitConfig& operator=(FitnessLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FitnessLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FitnessLimitConfig* internal_default_instance() {
    return reinterpret_cast<const FitnessLimitConfig*>(&_FitnessLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  friend void swap(FitnessLimitConfig& a, FitnessLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FitnessLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitnessLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FitnessLimitConfig* New() const final {
    return CreateMaybeMessage<FitnessLimitConfig>(nullptr);
  }

  FitnessLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FitnessLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FitnessLimitConfig& from);
  void MergeFrom(const FitnessLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitnessLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FitnessLimitConfig";
  }

 protected:
  explicit FitnessLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowestFitnessFieldNumber = 1,
  };
  // double lowest_fitness = 1;
  void clear_lowest_fitness();
  double lowest_fitness() const;
  void set_lowest_fitness(double value);

 private:
  double _internal_lowest_fitness() const;
  void _internal_set_lowest_fitness(double value);

 public:
  // @@protoc_insertion_point(class_scope:FitnessLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lowest_fitness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConjLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ConjLimitConfig) */ {
 public:
  inline ConjLimitConfig() : ConjLimitConfig(nullptr) {}
  virtual ~ConjLimitConfig();

  ConjLimitConfig(const ConjLimitConfig& from);
  ConjLimitConfig(ConjLimitConfig&& from) noexcept : ConjLimitConfig() {
    *this = ::std::move(from);
  }

  inline ConjLimitConfig& operator=(const ConjLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConjLimitConfig& operator=(ConjLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConjLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConjLimitConfig* internal_default_instance() {
    return reinterpret_cast<const ConjLimitConfig*>(&_ConjLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  friend void swap(ConjLimitConfig& a, ConjLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConjLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConjLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConjLimitConfig* New() const final {
    return CreateMaybeMessage<ConjLimitConfig>(nullptr);
  }

  ConjLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConjLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConjLimitConfig& from);
  void MergeFrom(const ConjLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConjLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConjLimitConfig";
  }

 protected:
  explicit ConjLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitTypeFieldNumber = 1,
  };
  // repeated string limit_type = 1;
  int limit_type_size() const;

 private:
  int _internal_limit_type_size() const;

 public:
  void clear_limit_type();
  const std::string& limit_type(int index) const;
  std::string* mutable_limit_type(int index);
  void set_limit_type(int index, const std::string& value);
  void set_limit_type(int index, std::string&& value);
  void set_limit_type(int index, const char* value);
  void set_limit_type(int index, const char* value, size_t size);
  std::string* add_limit_type();
  void add_limit_type(const std::string& value);
  void add_limit_type(std::string&& value);
  void add_limit_type(const char* value);
  void add_limit_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& limit_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_limit_type();

 private:
  const std::string& _internal_limit_type(int index) const;
  std::string* _internal_add_limit_type();

 public:
  // @@protoc_insertion_point(class_scope:ConjLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> limit_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class UniformMutationConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:UniformMutationConfig) */ {
 public:
  inline UniformMutationConfig() : UniformMutationConfig(nullptr) {}
  virtual ~UniformMutationConfig();

  UniformMutationConfig(const UniformMutationConfig& from);
  UniformMutationConfig(UniformMutationConfig&& from) noexcept : UniformMutationConfig() {
    *this = ::std::move(from);
  }

  inline UniformMutationConfig& operator=(const UniformMutationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformMutationConfig& operator=(UniformMutationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformMutationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformMutationConfig* internal_default_instance() {
    return reinterpret_cast<const UniformMutationConfig*>(
        &_UniformMutationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;

  friend void swap(UniformMutationConfig& a, UniformMutationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformMutationConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformMutationConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformMutationConfig* New() const final {
    return CreateMaybeMessage<UniformMutationConfig>(nullptr);
  }

  UniformMutationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformMutationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformMutationConfig& from);
  void MergeFrom(const UniformMutationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformMutationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UniformMutationConfig";
  }

 protected:
  explicit UniformMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
  };
  // double scale = 1;
  void clear_scale();
  double scale() const;
  void set_scale(double value);

 private:
  double _internal_scale() const;
  void _internal_set_scale(double value);

 public:
  // @@protoc_insertion_point(class_scope:UniformMutationConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class DoerrMutationConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:DoerrMutationConfig) */ {
 public:
  inline DoerrMutationConfig() : DoerrMutationConfig(nullptr) {}
  virtual ~DoerrMutationConfig();

  DoerrMutationConfig(const DoerrMutationConfig& from);
  DoerrMutationConfig(DoerrMutationConfig&& from) noexcept : DoerrMutationConfig() {
    *this = ::std::move(from);
  }

  inline DoerrMutationConfig& operator=(const DoerrMutationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoerrMutationConfig& operator=(DoerrMutationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoerrMutationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoerrMutationConfig* internal_default_instance() {
    return reinterpret_cast<const DoerrMutationConfig*>(&_DoerrMutationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;

  friend void swap(DoerrMutationConfig& a, DoerrMutationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DoerrMutationConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoerrMutationConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoerrMutationConfig* New() const final {
    return CreateMaybeMessage<DoerrMutationConfig>(nullptr);
  }

  DoerrMutationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoerrMutationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoerrMutationConfig& from);
  void MergeFrom(const DoerrMutationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoerrMutationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoerrMutationConfig";
  }

 protected:
  explicit DoerrMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetaFieldNumber = 1,
  };
  // double beta = 1;
  void clear_beta();
  double beta() const;
  void set_beta(double value);

 private:
  double _internal_beta() const;
  void _internal_set_beta(double value);

 public:
  // @@protoc_insertion_point(class_scope:DoerrMutationConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class EAAlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:EAAlgorithmConfig) */ {
 public:
  inline EAAlgorithmConfig() : EAAlgorithmConfig(nullptr) {}
  virtual ~EAAlgorithmConfig();

  EAAlgorithmConfig(const EAAlgorithmConfig& from);
  EAAlgorithmConfig(EAAlgorithmConfig&& from) noexcept : EAAlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline EAAlgorithmConfig& operator=(const EAAlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EAAlgorithmConfig& operator=(EAAlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EAAlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EAAlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const EAAlgorithmConfig*>(&_EAAlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;

  friend void swap(EAAlgorithmConfig& a, EAAlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EAAlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EAAlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EAAlgorithmConfig* New() const final {
    return CreateMaybeMessage<EAAlgorithmConfig>(nullptr);
  }

  EAAlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EAAlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EAAlgorithmConfig& from);
  void MergeFrom(const EAAlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EAAlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EAAlgorithmConfig";
  }

 protected:
  explicit EAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationTypeFieldNumber = 1,
    kSelectorTypeFieldNumber = 2,
  };
  // string mutation_type = 1;
  void clear_mutation_type();
  const std::string& mutation_type() const;
  void set_mutation_type(const std::string& value);
  void set_mutation_type(std::string&& value);
  void set_mutation_type(const char* value);
  void set_mutation_type(const char* value, size_t size);
  std::string* mutable_mutation_type();
  std::string* release_mutation_type();
  void set_allocated_mutation_type(std::string* mutation_type);

 private:
  const std::string& _internal_mutation_type() const;
  void _internal_set_mutation_type(const std::string& value);
  std::string* _internal_mutable_mutation_type();

 public:
  // string selector_type = 2;
  void clear_selector_type();
  const std::string& selector_type() const;
  void set_selector_type(const std::string& value);
  void set_selector_type(std::string&& value);
  void set_selector_type(const char* value);
  void set_selector_type(const char* value, size_t size);
  std::string* mutable_selector_type();
  std::string* release_selector_type();
  void set_allocated_selector_type(std::string* selector_type);

 private:
  const std::string& _internal_selector_type() const;
  void _internal_set_selector_type(const std::string& value);
  std::string* _internal_mutable_selector_type();

 public:
  // @@protoc_insertion_point(class_scope:EAAlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mutation_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class GAAlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:GAAlgorithmConfig) */ {
 public:
  inline GAAlgorithmConfig() : GAAlgorithmConfig(nullptr) {}
  virtual ~GAAlgorithmConfig();

  GAAlgorithmConfig(const GAAlgorithmConfig& from);
  GAAlgorithmConfig(GAAlgorithmConfig&& from) noexcept : GAAlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline GAAlgorithmConfig& operator=(const GAAlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GAAlgorithmConfig& operator=(GAAlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GAAlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GAAlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const GAAlgorithmConfig*>(&_GAAlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;

  friend void swap(GAAlgorithmConfig& a, GAAlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GAAlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GAAlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GAAlgorithmConfig* New() const final {
    return CreateMaybeMessage<GAAlgorithmConfig>(nullptr);
  }

  GAAlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GAAlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GAAlgorithmConfig& from);
  void MergeFrom(const GAAlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GAAlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GAAlgorithmConfig";
  }

 protected:
  explicit GAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationTypeFieldNumber = 1,
    kCrossoverTypeFieldNumber = 2,
    kSelectorTypeFieldNumber = 3,
    kQFieldNumber = 4,
    kHFieldNumber = 5,
  };
  // string mutation_type = 1;
  void clear_mutation_type();
  const std::string& mutation_type() const;
  void set_mutation_type(const std::string& value);
  void set_mutation_type(std::string&& value);
  void set_mutation_type(const char* value);
  void set_mutation_type(const char* value, size_t size);
  std::string* mutable_mutation_type();
  std::string* release_mutation_type();
  void set_allocated_mutation_type(std::string* mutation_type);

 private:
  const std::string& _internal_mutation_type() const;
  void _internal_set_mutation_type(const std::string& value);
  std::string* _internal_mutable_mutation_type();

 public:
  // string crossover_type = 2;
  void clear_crossover_type();
  const std::string& crossover_type() const;
  void set_crossover_type(const std::string& value);
  void set_crossover_type(std::string&& value);
  void set_crossover_type(const char* value);
  void set_crossover_type(const char* value, size_t size);
  std::string* mutable_crossover_type();
  std::string* release_crossover_type();
  void set_allocated_crossover_type(std::string* crossover_type);

 private:
  const std::string& _internal_crossover_type() const;
  void _internal_set_crossover_type(const std::string& value);
  std::string* _internal_mutable_crossover_type();

 public:
  // string selector_type = 3;
  void clear_selector_type();
  const std::string& selector_type() const;
  void set_selector_type(const std::string& value);
  void set_selector_type(std::string&& value);
  void set_selector_type(const char* value);
  void set_selector_type(const char* value, size_t size);
  std::string* mutable_selector_type();
  std::string* release_selector_type();
  void set_allocated_selector_type(std::string* selector_type);

 private:
  const std::string& _internal_selector_type() const;
  void _internal_set_selector_type(const std::string& value);
  std::string* _internal_mutable_selector_type();

 public:
  // uint32 q = 4;
  void clear_q();
  ::PROTOBUF_NAMESPACE_ID::uint32 q() const;
  void set_q(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_q() const;
  void _internal_set_q(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 h = 5;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:GAAlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mutation_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossover_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 q_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class MinisatCliConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:MinisatCliConfig) */ {
 public:
  inline MinisatCliConfig() : MinisatCliConfig(nullptr) {}
  virtual ~MinisatCliConfig();

  MinisatCliConfig(const MinisatCliConfig& from);
  MinisatCliConfig(MinisatCliConfig&& from) noexcept : MinisatCliConfig() {
    *this = ::std::move(from);
  }

  inline MinisatCliConfig& operator=(const MinisatCliConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinisatCliConfig& operator=(MinisatCliConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinisatCliConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinisatCliConfig* internal_default_instance() {
    return reinterpret_cast<const MinisatCliConfig*>(&_MinisatCliConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;

  friend void swap(MinisatCliConfig& a, MinisatCliConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MinisatCliConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinisatCliConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinisatCliConfig* New() const final {
    return CreateMaybeMessage<MinisatCliConfig>(nullptr);
  }

  MinisatCliConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinisatCliConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinisatCliConfig& from);
  void MergeFrom(const MinisatCliConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinisatCliConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MinisatCliConfig";
  }

 protected:
  explicit MinisatCliConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerbosityLevelFieldNumber = 1,
    kPreprocessingFieldNumber = 2,
    kCpuLimitFieldNumber = 4,
    kMemLimitFieldNumber = 5,
  };
  // int32 verbosity_level = 1;
  void clear_verbosity_level();
  ::PROTOBUF_NAMESPACE_ID::int32 verbosity_level() const;
  void set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_verbosity_level() const;
  void _internal_set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool preprocessing = 2;
  void clear_preprocessing();
  bool preprocessing() const;
  void set_preprocessing(bool value);

 private:
  bool _internal_preprocessing() const;
  void _internal_set_preprocessing(bool value);

 public:
  // int32 cpu_limit = 4;
  void clear_cpu_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_limit() const;
  void set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_limit() const;
  void _internal_set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 mem_limit = 5;
  void clear_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 mem_limit() const;
  void set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mem_limit() const;
  void _internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:MinisatCliConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 verbosity_level_;
  bool preprocessing_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 mem_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class SolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SolverConfig) */ {
 public:
  inline SolverConfig() : SolverConfig(nullptr) {}
  virtual ~SolverConfig();

  SolverConfig(const SolverConfig& from);
  SolverConfig(SolverConfig&& from) noexcept : SolverConfig() {
    *this = ::std::move(from);
  }

  inline SolverConfig& operator=(const SolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverConfig& operator=(SolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverConfig* internal_default_instance() {
    return reinterpret_cast<const SolverConfig*>(&_SolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;

  friend void swap(SolverConfig& a, SolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverConfig* New() const final {
    return CreateMaybeMessage<SolverConfig>(nullptr);
  }

  SolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverConfig& from);
  void MergeFrom(const SolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolverConfig";
  }

 protected:
  explicit SolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarDecayFieldNumber = 1,
    kClaDecayFieldNumber = 2,
    kRndFreqFieldNumber = 3,
    kRndSeedFieldNumber = 4,
    kCcminModeFieldNumber = 5,
    kPhaseSavingFieldNumber = 6,
    kRndInitFieldNumber = 7,
    kLubyFieldNumber = 8,
    kRfirstFieldNumber = 9,
    kRincFieldNumber = 10,
    kGcFracFieldNumber = 11,
    kMinLearntsFieldNumber = 12,
  };
  // double var_decay = 1;
  void clear_var_decay();
  double var_decay() const;
  void set_var_decay(double value);

 private:
  double _internal_var_decay() const;
  void _internal_set_var_decay(double value);

 public:
  // double cla_decay = 2;
  void clear_cla_decay();
  double cla_decay() const;
  void set_cla_decay(double value);

 private:
  double _internal_cla_decay() const;
  void _internal_set_cla_decay(double value);

 public:
  // double rnd_freq = 3;
  void clear_rnd_freq();
  double rnd_freq() const;
  void set_rnd_freq(double value);

 private:
  double _internal_rnd_freq() const;
  void _internal_set_rnd_freq(double value);

 public:
  // double rnd_seed = 4;
  void clear_rnd_seed();
  double rnd_seed() const;
  void set_rnd_seed(double value);

 private:
  double _internal_rnd_seed() const;
  void _internal_set_rnd_seed(double value);

 public:
  // int32 ccmin_mode = 5;
  void clear_ccmin_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 ccmin_mode() const;
  void set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ccmin_mode() const;
  void _internal_set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 phase_saving = 6;
  void clear_phase_saving();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_saving() const;
  void set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_saving() const;
  void _internal_set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool rnd_init = 7;
  void clear_rnd_init();
  bool rnd_init() const;
  void set_rnd_init(bool value);

 private:
  bool _internal_rnd_init() const;
  void _internal_set_rnd_init(bool value);

 public:
  // bool luby = 8;
  void clear_luby();
  bool luby() const;
  void set_luby(bool value);

 private:
  bool _internal_luby() const;
  void _internal_set_luby(bool value);

 public:
  // int32 rfirst = 9;
  void clear_rfirst();
  ::PROTOBUF_NAMESPACE_ID::int32 rfirst() const;
  void set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rfirst() const;
  void _internal_set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // double rinc = 10;
  void clear_rinc();
  double rinc() const;
  void set_rinc(double value);

 private:
  double _internal_rinc() const;
  void _internal_set_rinc(double value);

 public:
  // double gc_frac = 11;
  void clear_gc_frac();
  double gc_frac() const;
  void set_gc_frac(double value);

 private:
  double _internal_gc_frac() const;
  void _internal_set_gc_frac(double value);

 public:
  // int32 min_learnts = 12;
  void clear_min_learnts();
  ::PROTOBUF_NAMESPACE_ID::int32 min_learnts() const;
  void set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_learnts() const;
  void _internal_set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:SolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double var_decay_;
  double cla_decay_;
  double rnd_freq_;
  double rnd_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 ccmin_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_saving_;
  bool rnd_init_;
  bool luby_;
  ::PROTOBUF_NAMESPACE_ID::int32 rfirst_;
  double rinc_;
  double gc_frac_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_learnts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimpSolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SimpSolverConfig) */ {
 public:
  inline SimpSolverConfig() : SimpSolverConfig(nullptr) {}
  virtual ~SimpSolverConfig();

  SimpSolverConfig(const SimpSolverConfig& from);
  SimpSolverConfig(SimpSolverConfig&& from) noexcept : SimpSolverConfig() {
    *this = ::std::move(from);
  }

  inline SimpSolverConfig& operator=(const SimpSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpSolverConfig& operator=(SimpSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpSolverConfig* internal_default_instance() {
    return reinterpret_cast<const SimpSolverConfig*>(&_SimpSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;

  friend void swap(SimpSolverConfig& a, SimpSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpSolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpSolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpSolverConfig* New() const final {
    return CreateMaybeMessage<SimpSolverConfig>(nullptr);
  }

  SimpSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpSolverConfig& from);
  void MergeFrom(const SimpSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpSolverConfig";
  }

 protected:
  explicit SimpSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverConfigFieldNumber = 8,
    kCliConfigFieldNumber = 9,
    kUseAsymmFieldNumber = 1,
    kUseRcheckFieldNumber = 2,
    kUseElimFieldNumber = 3,
    kGrowFieldNumber = 4,
    kClauseLimFieldNumber = 5,
    kSubsumptionLimFieldNumber = 6,
    kSimpGarbageFracFieldNumber = 7,
  };
  // .SolverConfig solver_config = 8;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // .MinisatCliConfig cli_config = 9;
  bool has_cli_config() const;

 private:
  bool _internal_has_cli_config() const;

 public:
  void clear_cli_config();
  const ::MinisatCliConfig& cli_config() const;
  ::MinisatCliConfig* release_cli_config();
  ::MinisatCliConfig* mutable_cli_config();
  void set_allocated_cli_config(::MinisatCliConfig* cli_config);

 private:
  const ::MinisatCliConfig& _internal_cli_config() const;
  ::MinisatCliConfig* _internal_mutable_cli_config();

 public:
  void unsafe_arena_set_allocated_cli_config(::MinisatCliConfig* cli_config);
  ::MinisatCliConfig* unsafe_arena_release_cli_config();

  // bool use_asymm = 1;
  void clear_use_asymm();
  bool use_asymm() const;
  void set_use_asymm(bool value);

 private:
  bool _internal_use_asymm() const;
  void _internal_set_use_asymm(bool value);

 public:
  // bool use_rcheck = 2;
  void clear_use_rcheck();
  bool use_rcheck() const;
  void set_use_rcheck(bool value);

 private:
  bool _internal_use_rcheck() const;
  void _internal_set_use_rcheck(bool value);

 public:
  // bool use_elim = 3;
  void clear_use_elim();
  bool use_elim() const;
  void set_use_elim(bool value);

 private:
  bool _internal_use_elim() const;
  void _internal_set_use_elim(bool value);

 public:
  // int32 grow = 4;
  void clear_grow();
  ::PROTOBUF_NAMESPACE_ID::int32 grow() const;
  void set_grow(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grow() const;
  void _internal_set_grow(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 clause_lim = 5;
  void clear_clause_lim();
  ::PROTOBUF_NAMESPACE_ID::int32 clause_lim() const;
  void set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clause_lim() const;
  void _internal_set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 subsumption_lim = 6;
  void clear_subsumption_lim();
  ::PROTOBUF_NAMESPACE_ID::int32 subsumption_lim() const;
  void set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subsumption_lim() const;
  void _internal_set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // double simp_garbage_frac = 7;
  void clear_simp_garbage_frac();
  double simp_garbage_frac() const;
  void set_simp_garbage_frac(double value);

 private:
  double _internal_simp_garbage_frac() const;
  void _internal_set_simp_garbage_frac(double value);

 public:
  // @@protoc_insertion_point(class_scope:SimpSolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SolverConfig* solver_config_;
  ::MinisatCliConfig* cli_config_;
  bool use_asymm_;
  bool use_rcheck_;
  bool use_elim_;
  ::PROTOBUF_NAMESPACE_ID::int32 grow_;
  ::PROTOBUF_NAMESPACE_ID::int32 clause_lim_;
  ::PROTOBUF_NAMESPACE_ID::int32 subsumption_lim_;
  double simp_garbage_frac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ParSolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ParSolverConfig) */ {
 public:
  inline ParSolverConfig() : ParSolverConfig(nullptr) {}
  virtual ~ParSolverConfig();

  ParSolverConfig(const ParSolverConfig& from);
  ParSolverConfig(ParSolverConfig&& from) noexcept : ParSolverConfig() {
    *this = ::std::move(from);
  }

  inline ParSolverConfig& operator=(const ParSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParSolverConfig& operator=(ParSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParSolverConfig* internal_default_instance() {
    return reinterpret_cast<const ParSolverConfig*>(&_ParSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;

  friend void swap(ParSolverConfig& a, ParSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ParSolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParSolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParSolverConfig* New() const final {
    return CreateMaybeMessage<ParSolverConfig>(nullptr);
  }

  ParSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParSolverConfig& from);
  void MergeFrom(const ParSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParSolverConfig";
  }

 protected:
  explicit ParSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverTypeFieldNumber = 2,
    kMaxThreadsFieldNumber = 1,
  };
  // string solver_type = 2;
  void clear_solver_type();
  const std::string& solver_type() const;
  void set_solver_type(const std::string& value);
  void set_solver_type(std::string&& value);
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  std::string* mutable_solver_type();
  std::string* release_solver_type();
  void set_allocated_solver_type(std::string* solver_type);

 private:
  const std::string& _internal_solver_type() const;
  void _internal_set_solver_type(const std::string& value);
  std::string* _internal_mutable_solver_type();

 public:
  // uint32 max_threads = 1;
  void clear_max_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_threads() const;
  void set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_threads() const;
  void _internal_set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:ParSolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_threads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class LoggerConfig_LoggerEntry PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:LoggerConfig.LoggerEntry) */ {
 public:
  inline LoggerConfig_LoggerEntry() : LoggerConfig_LoggerEntry(nullptr) {}
  virtual ~LoggerConfig_LoggerEntry();

  LoggerConfig_LoggerEntry(const LoggerConfig_LoggerEntry& from);
  LoggerConfig_LoggerEntry(LoggerConfig_LoggerEntry&& from) noexcept : LoggerConfig_LoggerEntry() {
    *this = ::std::move(from);
  }

  inline LoggerConfig_LoggerEntry& operator=(const LoggerConfig_LoggerEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerConfig_LoggerEntry& operator=(LoggerConfig_LoggerEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerConfig_LoggerEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggerConfig_LoggerEntry* internal_default_instance() {
    return reinterpret_cast<const LoggerConfig_LoggerEntry*>(
        &_LoggerConfig_LoggerEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;

  friend void swap(LoggerConfig_LoggerEntry& a, LoggerConfig_LoggerEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerConfig_LoggerEntry* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerConfig_LoggerEntry* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerConfig_LoggerEntry* New() const final {
    return CreateMaybeMessage<LoggerConfig_LoggerEntry>(nullptr);
  }

  LoggerConfig_LoggerEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerConfig_LoggerEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerConfig_LoggerEntry& from);
  void MergeFrom(const LoggerConfig_LoggerEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerConfig_LoggerEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoggerConfig.LoggerEntry";
  }

 protected:
  explicit LoggerConfig_LoggerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogTypeFieldNumber = 1,
    kMinVerboseLevelFieldNumber = 2,
    kEveryNFieldNumber = 3,
  };
  // .LogType log_type = 1;
  void clear_log_type();
  ::LogType log_type() const;
  void set_log_type(::LogType value);

 private:
  ::LogType _internal_log_type() const;
  void _internal_set_log_type(::LogType value);

 public:
  // uint32 min_verbose_level = 2;
  void clear_min_verbose_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_verbose_level() const;
  void set_min_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_verbose_level() const;
  void _internal_set_min_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 every_n = 3;
  void clear_every_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 every_n() const;
  void set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_every_n() const;
  void _internal_set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:LoggerConfig.LoggerEntry)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_verbose_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 every_n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class LoggerConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:LoggerConfig) */ {
 public:
  inline LoggerConfig() : LoggerConfig(nullptr) {}
  virtual ~LoggerConfig();

  LoggerConfig(const LoggerConfig& from);
  LoggerConfig(LoggerConfig&& from) noexcept : LoggerConfig() {
    *this = ::std::move(from);
  }

  inline LoggerConfig& operator=(const LoggerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggerConfig& operator=(LoggerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggerConfig* internal_default_instance() {
    return reinterpret_cast<const LoggerConfig*>(&_LoggerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;

  friend void swap(LoggerConfig& a, LoggerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggerConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggerConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggerConfig* New() const final {
    return CreateMaybeMessage<LoggerConfig>(nullptr);
  }

  LoggerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggerConfig& from);
  void MergeFrom(const LoggerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoggerConfig";
  }

 protected:
  explicit LoggerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef LoggerConfig_LoggerEntry LoggerEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .LoggerConfig.LoggerEntry entries = 1;
  int entries_size() const;

 private:
  int _internal_entries_size() const;

 public:
  void clear_entries();
  ::LoggerConfig_LoggerEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggerConfig_LoggerEntry>* mutable_entries();

 private:
  const ::LoggerConfig_LoggerEntry& _internal_entries(int index) const;
  ::LoggerConfig_LoggerEntry* _internal_add_entries();

 public:
  const ::LoggerConfig_LoggerEntry& entries(int index) const;
  ::LoggerConfig_LoggerEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggerConfig_LoggerEntry>& entries() const;

  // @@protoc_insertion_point(class_scope:LoggerConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggerConfig_LoggerEntry> entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class GlobalConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:GlobalConfig) */ {
 public:
  inline GlobalConfig() : GlobalConfig(nullptr) {}
  virtual ~GlobalConfig();

  GlobalConfig(const GlobalConfig& from);
  GlobalConfig(GlobalConfig&& from) noexcept : GlobalConfig() {
    *this = ::std::move(from);
  }

  inline GlobalConfig& operator=(const GlobalConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalConfig& operator=(GlobalConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobalConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalConfig* internal_default_instance() {
    return reinterpret_cast<const GlobalConfig*>(&_GlobalConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;

  friend void swap(GlobalConfig& a, GlobalConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalConfig* New() const final {
    return CreateMaybeMessage<GlobalConfig>(nullptr);
  }

  GlobalConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobalConfig& from);
  void MergeFrom(const GlobalConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GlobalConfig";
  }

 protected:
  explicit GlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_evol_2fproto_2fconfig_2eproto);
    return ::descriptor_table_evol_2fproto_2fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmTypeFieldNumber = 20,
    kSolverTypeFieldNumber = 21,
    kAlgorithmConfigFieldNumber = 1,
    kResourceLimitConfigFieldNumber = 2,
    kFitnessLimitConfigFieldNumber = 3,
    kConjLimitConfigFieldNumber = 5,
    kSimpSolverConfigFieldNumber = 7,
    kUniformMutationConfigFieldNumber = 11,
    kEaAlgorithmConfigFieldNumber = 12,
    kDoerrMutationConfigFieldNumber = 13,
    kGaAlgorithmConfigFieldNumber = 14,
    kParSolverConfigFieldNumber = 22,
    kLoggerConfigFieldNumber = 24,
    kRndSeedFieldNumber = 23,
  };
  // string algorithm_type = 20;
  void clear_algorithm_type();
  const std::string& algorithm_type() const;
  void set_algorithm_type(const std::string& value);
  void set_algorithm_type(std::string&& value);
  void set_algorithm_type(const char* value);
  void set_algorithm_type(const char* value, size_t size);
  std::string* mutable_algorithm_type();
  std::string* release_algorithm_type();
  void set_allocated_algorithm_type(std::string* algorithm_type);

 private:
  const std::string& _internal_algorithm_type() const;
  void _internal_set_algorithm_type(const std::string& value);
  std::string* _internal_mutable_algorithm_type();

 public:
  // string solver_type = 21;
  void clear_solver_type();
  const std::string& solver_type() const;
  void set_solver_type(const std::string& value);
  void set_solver_type(std::string&& value);
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  std::string* mutable_solver_type();
  std::string* release_solver_type();
  void set_allocated_solver_type(std::string* solver_type);

 private:
  const std::string& _internal_solver_type() const;
  void _internal_set_solver_type(const std::string& value);
  std::string* _internal_mutable_solver_type();

 public:
  // .AlgorithmConfig algorithm_config = 1;
  bool has_algorithm_config() const;

 private:
  bool _internal_has_algorithm_config() const;

 public:
  void clear_algorithm_config();
  const ::AlgorithmConfig& algorithm_config() const;
  ::AlgorithmConfig* release_algorithm_config();
  ::AlgorithmConfig* mutable_algorithm_config();
  void set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config);

 private:
  const ::AlgorithmConfig& _internal_algorithm_config() const;
  ::AlgorithmConfig* _internal_mutable_algorithm_config();

 public:
  void unsafe_arena_set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config);
  ::AlgorithmConfig* unsafe_arena_release_algorithm_config();

  // .ResourceLimitConfig resource_limit_config = 2;
  bool has_resource_limit_config() const;

 private:
  bool _internal_has_resource_limit_config() const;

 public:
  void clear_resource_limit_config();
  const ::ResourceLimitConfig& resource_limit_config() const;
  ::ResourceLimitConfig* release_resource_limit_config();
  ::ResourceLimitConfig* mutable_resource_limit_config();
  void set_allocated_resource_limit_config(::ResourceLimitConfig* resource_limit_config);

 private:
  const ::ResourceLimitConfig& _internal_resource_limit_config() const;
  ::ResourceLimitConfig* _internal_mutable_resource_limit_config();

 public:
  void unsafe_arena_set_allocated_resource_limit_config(
      ::ResourceLimitConfig* resource_limit_config);
  ::ResourceLimitConfig* unsafe_arena_release_resource_limit_config();

  // .FitnessLimitConfig fitness_limit_config = 3;
  bool has_fitness_limit_config() const;

 private:
  bool _internal_has_fitness_limit_config() const;

 public:
  void clear_fitness_limit_config();
  const ::FitnessLimitConfig& fitness_limit_config() const;
  ::FitnessLimitConfig* release_fitness_limit_config();
  ::FitnessLimitConfig* mutable_fitness_limit_config();
  void set_allocated_fitness_limit_config(::FitnessLimitConfig* fitness_limit_config);

 private:
  const ::FitnessLimitConfig& _internal_fitness_limit_config() const;
  ::FitnessLimitConfig* _internal_mutable_fitness_limit_config();

 public:
  void unsafe_arena_set_allocated_fitness_limit_config(::FitnessLimitConfig* fitness_limit_config);
  ::FitnessLimitConfig* unsafe_arena_release_fitness_limit_config();

  // .ConjLimitConfig conj_limit_config = 5;
  bool has_conj_limit_config() const;

 private:
  bool _internal_has_conj_limit_config() const;

 public:
  void clear_conj_limit_config();
  const ::ConjLimitConfig& conj_limit_config() const;
  ::ConjLimitConfig* release_conj_limit_config();
  ::ConjLimitConfig* mutable_conj_limit_config();
  void set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config);

 private:
  const ::ConjLimitConfig& _internal_conj_limit_config() const;
  ::ConjLimitConfig* _internal_mutable_conj_limit_config();

 public:
  void unsafe_arena_set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config);
  ::ConjLimitConfig* unsafe_arena_release_conj_limit_config();

  // .SimpSolverConfig simp_solver_config = 7;
  bool has_simp_solver_config() const;

 private:
  bool _internal_has_simp_solver_config() const;

 public:
  void clear_simp_solver_config();
  const ::SimpSolverConfig& simp_solver_config() const;
  ::SimpSolverConfig* release_simp_solver_config();
  ::SimpSolverConfig* mutable_simp_solver_config();
  void set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config);

 private:
  const ::SimpSolverConfig& _internal_simp_solver_config() const;
  ::SimpSolverConfig* _internal_mutable_simp_solver_config();

 public:
  void unsafe_arena_set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config);
  ::SimpSolverConfig* unsafe_arena_release_simp_solver_config();

  // .UniformMutationConfig uniform_mutation_config = 11;
  bool has_uniform_mutation_config() const;

 private:
  bool _internal_has_uniform_mutation_config() const;

 public:
  void clear_uniform_mutation_config();
  const ::UniformMutationConfig& uniform_mutation_config() const;
  ::UniformMutationConfig* release_uniform_mutation_config();
  ::UniformMutationConfig* mutable_uniform_mutation_config();
  void set_allocated_uniform_mutation_config(::UniformMutationConfig* uniform_mutation_config);

 private:
  const ::UniformMutationConfig& _internal_uniform_mutation_config() const;
  ::UniformMutationConfig* _internal_mutable_uniform_mutation_config();

 public:
  void unsafe_arena_set_allocated_uniform_mutation_config(
      ::UniformMutationConfig* uniform_mutation_config);
  ::UniformMutationConfig* unsafe_arena_release_uniform_mutation_config();

  // .EAAlgorithmConfig ea_algorithm_config = 12;
  bool has_ea_algorithm_config() const;

 private:
  bool _internal_has_ea_algorithm_config() const;

 public:
  void clear_ea_algorithm_config();
  const ::EAAlgorithmConfig& ea_algorithm_config() const;
  ::EAAlgorithmConfig* release_ea_algorithm_config();
  ::EAAlgorithmConfig* mutable_ea_algorithm_config();
  void set_allocated_ea_algorithm_config(::EAAlgorithmConfig* ea_algorithm_config);

 private:
  const ::EAAlgorithmConfig& _internal_ea_algorithm_config() const;
  ::EAAlgorithmConfig* _internal_mutable_ea_algorithm_config();

 public:
  void unsafe_arena_set_allocated_ea_algorithm_config(::EAAlgorithmConfig* ea_algorithm_config);
  ::EAAlgorithmConfig* unsafe_arena_release_ea_algorithm_config();

  // .DoerrMutationConfig doerr_mutation_config = 13;
  bool has_doerr_mutation_config() const;

 private:
  bool _internal_has_doerr_mutation_config() const;

 public:
  void clear_doerr_mutation_config();
  const ::DoerrMutationConfig& doerr_mutation_config() const;
  ::DoerrMutationConfig* release_doerr_mutation_config();
  ::DoerrMutationConfig* mutable_doerr_mutation_config();
  void set_allocated_doerr_mutation_config(::DoerrMutationConfig* doerr_mutation_config);

 private:
  const ::DoerrMutationConfig& _internal_doerr_mutation_config() const;
  ::DoerrMutationConfig* _internal_mutable_doerr_mutation_config();

 public:
  void unsafe_arena_set_allocated_doerr_mutation_config(
      ::DoerrMutationConfig* doerr_mutation_config);
  ::DoerrMutationConfig* unsafe_arena_release_doerr_mutation_config();

  // .GAAlgorithmConfig ga_algorithm_config = 14;
  bool has_ga_algorithm_config() const;

 private:
  bool _internal_has_ga_algorithm_config() const;

 public:
  void clear_ga_algorithm_config();
  const ::GAAlgorithmConfig& ga_algorithm_config() const;
  ::GAAlgorithmConfig* release_ga_algorithm_config();
  ::GAAlgorithmConfig* mutable_ga_algorithm_config();
  void set_allocated_ga_algorithm_config(::GAAlgorithmConfig* ga_algorithm_config);

 private:
  const ::GAAlgorithmConfig& _internal_ga_algorithm_config() const;
  ::GAAlgorithmConfig* _internal_mutable_ga_algorithm_config();

 public:
  void unsafe_arena_set_allocated_ga_algorithm_config(::GAAlgorithmConfig* ga_algorithm_config);
  ::GAAlgorithmConfig* unsafe_arena_release_ga_algorithm_config();

  // .ParSolverConfig par_solver_config = 22;
  bool has_par_solver_config() const;

 private:
  bool _internal_has_par_solver_config() const;

 public:
  void clear_par_solver_config();
  const ::ParSolverConfig& par_solver_config() const;
  ::ParSolverConfig* release_par_solver_config();
  ::ParSolverConfig* mutable_par_solver_config();
  void set_allocated_par_solver_config(::ParSolverConfig* par_solver_config);

 private:
  const ::ParSolverConfig& _internal_par_solver_config() const;
  ::ParSolverConfig* _internal_mutable_par_solver_config();

 public:
  void unsafe_arena_set_allocated_par_solver_config(::ParSolverConfig* par_solver_config);
  ::ParSolverConfig* unsafe_arena_release_par_solver_config();

  // .LoggerConfig logger_config = 24;
  bool has_logger_config() const;

 private:
  bool _internal_has_logger_config() const;

 public:
  void clear_logger_config();
  const ::LoggerConfig& logger_config() const;
  ::LoggerConfig* release_logger_config();
  ::LoggerConfig* mutable_logger_config();
  void set_allocated_logger_config(::LoggerConfig* logger_config);

 private:
  const ::LoggerConfig& _internal_logger_config() const;
  ::LoggerConfig* _internal_mutable_logger_config();

 public:
  void unsafe_arena_set_allocated_logger_config(::LoggerConfig* logger_config);
  ::LoggerConfig* unsafe_arena_release_logger_config();

  // int64 rnd_seed = 23;
  void clear_rnd_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 rnd_seed() const;
  void set_rnd_seed(::PROTOBUF_NAMESPACE_ID::int64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rnd_seed() const;
  void _internal_set_rnd_seed(::PROTOBUF_NAMESPACE_ID::int64 value);

 public:
  // @@protoc_insertion_point(class_scope:GlobalConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_type_;
  ::AlgorithmConfig* algorithm_config_;
  ::ResourceLimitConfig* resource_limit_config_;
  ::FitnessLimitConfig* fitness_limit_config_;
  ::ConjLimitConfig* conj_limit_config_;
  ::SimpSolverConfig* simp_solver_config_;
  ::UniformMutationConfig* uniform_mutation_config_;
  ::EAAlgorithmConfig* ea_algorithm_config_;
  ::DoerrMutationConfig* doerr_mutation_config_;
  ::GAAlgorithmConfig* ga_algorithm_config_;
  ::ParSolverConfig* par_solver_config_;
  ::LoggerConfig* logger_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 rnd_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_evol_2fproto_2fconfig_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlgorithmConfig_InstanceConfig_SamplingSizeConfig

// uint64 base_count = 1;
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::clear_base_count() {
  base_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_base_count() const {
  return base_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::base_count() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.base_count)
  return _internal_base_count();
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_set_base_count(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  base_count_ = value;
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::set_base_count(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_base_count(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.base_count)
}

// uint32 max_steps = 2;
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::clear_max_steps() {
  max_steps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_max_steps() const {
  return max_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::max_steps() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.max_steps)
  return _internal_max_steps();
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_set_max_steps(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_steps_ = value;
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::set_max_steps(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_steps(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.max_steps)
}

// double scale = 3;
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::clear_scale() {
  scale_ = 0;
}
inline double AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_scale() const {
  return scale_;
}
inline double AlgorithmConfig_InstanceConfig_SamplingSizeConfig::scale() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.scale)
  return _internal_scale();
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_internal_set_scale(double value) {
  scale_ = value;
}
inline void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.SamplingSizeConfig.scale)
}

// -------------------------------------------------------------------

// AlgorithmConfig_InstanceConfig

// uint32 omega_x = 1;
inline void AlgorithmConfig_InstanceConfig::clear_omega_x() {
  omega_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::_internal_omega_x() const {
  return omega_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::omega_x() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.omega_x)
  return _internal_omega_x();
}
inline void AlgorithmConfig_InstanceConfig::_internal_set_omega_x(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  omega_x_ = value;
}
inline void AlgorithmConfig_InstanceConfig::set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_omega_x(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.omega_x)
}

// uint32 heuristic_size = 2;
inline void AlgorithmConfig_InstanceConfig::clear_heuristic_size() {
  heuristic_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::_internal_heuristic_size()
    const {
  return heuristic_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::heuristic_size() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.heuristic_size)
  return _internal_heuristic_size();
}
inline void AlgorithmConfig_InstanceConfig::_internal_set_heuristic_size(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heuristic_size_ = value;
}
inline void AlgorithmConfig_InstanceConfig::set_heuristic_size(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heuristic_size(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.heuristic_size)
}

// uint32 max_cache_size = 3;
inline void AlgorithmConfig_InstanceConfig::clear_max_cache_size() {
  max_cache_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::_internal_max_cache_size()
    const {
  return max_cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlgorithmConfig_InstanceConfig::max_cache_size() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.max_cache_size)
  return _internal_max_cache_size();
}
inline void AlgorithmConfig_InstanceConfig::_internal_set_max_cache_size(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_cache_size_ = value;
}
inline void AlgorithmConfig_InstanceConfig::set_max_cache_size(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cache_size(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.InstanceConfig.max_cache_size)
}

// .AlgorithmConfig.InstanceConfig.SamplingSizeConfig sampling_config = 4;
inline bool AlgorithmConfig_InstanceConfig::_internal_has_sampling_config() const {
  return this != internal_default_instance() && sampling_config_ != nullptr;
}
inline bool AlgorithmConfig_InstanceConfig::has_sampling_config() const {
  return _internal_has_sampling_config();
}
inline void AlgorithmConfig_InstanceConfig::clear_sampling_config() {
  if (GetArena() == nullptr && sampling_config_ != nullptr) {
    delete sampling_config_;
  }
  sampling_config_ = nullptr;
}
inline const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig&
AlgorithmConfig_InstanceConfig::_internal_sampling_config() const {
  const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* p = sampling_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*>(
                   &::_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_);
}
inline const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig&
AlgorithmConfig_InstanceConfig::sampling_config() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.InstanceConfig.sampling_config)
  return _internal_sampling_config();
}
inline void AlgorithmConfig_InstanceConfig::unsafe_arena_set_allocated_sampling_config(
    ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* sampling_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config_);
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AlgorithmConfig.InstanceConfig.sampling_config)
}
inline ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
AlgorithmConfig_InstanceConfig::release_sampling_config() {
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* temp = sampling_config_;
  sampling_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
AlgorithmConfig_InstanceConfig::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.InstanceConfig.sampling_config)

  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* temp = sampling_config_;
  sampling_config_ = nullptr;
  return temp;
}
inline ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
AlgorithmConfig_InstanceConfig::_internal_mutable_sampling_config() {
  if (sampling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(GetArena());
    sampling_config_ = p;
  }
  return sampling_config_;
}
inline ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
AlgorithmConfig_InstanceConfig::mutable_sampling_config() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.InstanceConfig.sampling_config)
  return _internal_mutable_sampling_config();
}
inline void AlgorithmConfig_InstanceConfig::set_allocated_sampling_config(
    ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig* sampling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sampling_config_;
  }
  if (sampling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sampling_config);
    if (message_arena != submessage_arena) {
      sampling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_config, submessage_arena);
    }

  } else {
  }
  sampling_config_ = sampling_config;
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.InstanceConfig.sampling_config)
}

// -------------------------------------------------------------------

// AlgorithmConfig

// string limit_type = 1;
inline void AlgorithmConfig::clear_limit_type() {
  limit_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlgorithmConfig::limit_type() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.limit_type)
  return _internal_limit_type();
}
inline void AlgorithmConfig::set_limit_type(const std::string& value) {
  _internal_set_limit_type(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.limit_type)
}
inline std::string* AlgorithmConfig::mutable_limit_type() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.limit_type)
  return _internal_mutable_limit_type();
}
inline const std::string& AlgorithmConfig::_internal_limit_type() const {
  return limit_type_.Get();
}
inline void AlgorithmConfig::_internal_set_limit_type(const std::string& value) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlgorithmConfig::set_limit_type(std::string&& value) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AlgorithmConfig.limit_type)
}
inline void AlgorithmConfig::set_limit_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:AlgorithmConfig.limit_type)
}
inline void AlgorithmConfig::set_limit_type(const char* value, size_t size) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AlgorithmConfig.limit_type)
}
inline std::string* AlgorithmConfig::_internal_mutable_limit_type() {
  return limit_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlgorithmConfig::release_limit_type() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.limit_type)
  return limit_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmConfig::set_allocated_limit_type(std::string* limit_type) {
  if (limit_type != nullptr) {
  } else {
  }
  limit_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), limit_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.limit_type)
}

// string solver_type = 2;
inline void AlgorithmConfig::clear_solver_type() {
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlgorithmConfig::solver_type() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.solver_type)
  return _internal_solver_type();
}
inline void AlgorithmConfig::set_solver_type(const std::string& value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.solver_type)
}
inline std::string* AlgorithmConfig::mutable_solver_type() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.solver_type)
  return _internal_mutable_solver_type();
}
inline const std::string& AlgorithmConfig::_internal_solver_type() const {
  return solver_type_.Get();
}
inline void AlgorithmConfig::_internal_set_solver_type(const std::string& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlgorithmConfig::set_solver_type(std::string&& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AlgorithmConfig.solver_type)
}
inline void AlgorithmConfig::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:AlgorithmConfig.solver_type)
}
inline void AlgorithmConfig::set_solver_type(const char* value, size_t size) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AlgorithmConfig.solver_type)
}
inline std::string* AlgorithmConfig::_internal_mutable_solver_type() {
  return solver_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlgorithmConfig::release_solver_type() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.solver_type)
  return solver_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmConfig::set_allocated_solver_type(std::string* solver_type) {
  if (solver_type != nullptr) {
  } else {
  }
  solver_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.solver_type)
}

// .AlgorithmConfig.InstanceConfig instance_config = 3;
inline bool AlgorithmConfig::_internal_has_instance_config() const {
  return this != internal_default_instance() && instance_config_ != nullptr;
}
inline bool AlgorithmConfig::has_instance_config() const {
  return _internal_has_instance_config();
}
inline void AlgorithmConfig::clear_instance_config() {
  if (GetArena() == nullptr && instance_config_ != nullptr) {
    delete instance_config_;
  }
  instance_config_ = nullptr;
}
inline const ::AlgorithmConfig_InstanceConfig& AlgorithmConfig::_internal_instance_config() const {
  const ::AlgorithmConfig_InstanceConfig* p = instance_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::AlgorithmConfig_InstanceConfig*>(
                            &::_AlgorithmConfig_InstanceConfig_default_instance_);
}
inline const ::AlgorithmConfig_InstanceConfig& AlgorithmConfig::instance_config() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.instance_config)
  return _internal_instance_config();
}
inline void AlgorithmConfig::unsafe_arena_set_allocated_instance_config(
    ::AlgorithmConfig_InstanceConfig* instance_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_config_);
  }
  instance_config_ = instance_config;
  if (instance_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AlgorithmConfig.instance_config)
}
inline ::AlgorithmConfig_InstanceConfig* AlgorithmConfig::release_instance_config() {
  ::AlgorithmConfig_InstanceConfig* temp = instance_config_;
  instance_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AlgorithmConfig_InstanceConfig* AlgorithmConfig::unsafe_arena_release_instance_config() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.instance_config)

  ::AlgorithmConfig_InstanceConfig* temp = instance_config_;
  instance_config_ = nullptr;
  return temp;
}
inline ::AlgorithmConfig_InstanceConfig* AlgorithmConfig::_internal_mutable_instance_config() {
  if (instance_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::AlgorithmConfig_InstanceConfig>(GetArena());
    instance_config_ = p;
  }
  return instance_config_;
}
inline ::AlgorithmConfig_InstanceConfig* AlgorithmConfig::mutable_instance_config() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.instance_config)
  return _internal_mutable_instance_config();
}
inline void AlgorithmConfig::set_allocated_instance_config(
    ::AlgorithmConfig_InstanceConfig* instance_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete instance_config_;
  }
  if (instance_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(instance_config);
    if (message_arena != submessage_arena) {
      instance_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_config, submessage_arena);
    }

  } else {
  }
  instance_config_ = instance_config;
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.instance_config)
}

// -------------------------------------------------------------------

// ResourceLimitConfig

// uint32 memory_limit_kb = 1;
inline void ResourceLimitConfig::clear_memory_limit_kb() {
  memory_limit_kb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::_internal_memory_limit_kb() const {
  return memory_limit_kb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::memory_limit_kb() const {
  // @@protoc_insertion_point(field_get:ResourceLimitConfig.memory_limit_kb)
  return _internal_memory_limit_kb();
}
inline void ResourceLimitConfig::_internal_set_memory_limit_kb(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  memory_limit_kb_ = value;
}
inline void ResourceLimitConfig::set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memory_limit_kb(value);
  // @@protoc_insertion_point(field_set:ResourceLimitConfig.memory_limit_kb)
}

// uint32 time_limit_sec = 2;
inline void ResourceLimitConfig::clear_time_limit_sec() {
  time_limit_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::_internal_time_limit_sec() const {
  return time_limit_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::time_limit_sec() const {
  // @@protoc_insertion_point(field_get:ResourceLimitConfig.time_limit_sec)
  return _internal_time_limit_sec();
}
inline void ResourceLimitConfig::_internal_set_time_limit_sec(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  time_limit_sec_ = value;
}
inline void ResourceLimitConfig::set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_limit_sec(value);
  // @@protoc_insertion_point(field_set:ResourceLimitConfig.time_limit_sec)
}

// -------------------------------------------------------------------

// FitnessLimitConfig

// double lowest_fitness = 1;
inline void FitnessLimitConfig::clear_lowest_fitness() {
  lowest_fitness_ = 0;
}
inline double FitnessLimitConfig::_internal_lowest_fitness() const {
  return lowest_fitness_;
}
inline double FitnessLimitConfig::lowest_fitness() const {
  // @@protoc_insertion_point(field_get:FitnessLimitConfig.lowest_fitness)
  return _internal_lowest_fitness();
}
inline void FitnessLimitConfig::_internal_set_lowest_fitness(double value) {
  lowest_fitness_ = value;
}
inline void FitnessLimitConfig::set_lowest_fitness(double value) {
  _internal_set_lowest_fitness(value);
  // @@protoc_insertion_point(field_set:FitnessLimitConfig.lowest_fitness)
}

// -------------------------------------------------------------------

// ConjLimitConfig

// repeated string limit_type = 1;
inline int ConjLimitConfig::_internal_limit_type_size() const {
  return limit_type_.size();
}
inline int ConjLimitConfig::limit_type_size() const {
  return _internal_limit_type_size();
}
inline void ConjLimitConfig::clear_limit_type() {
  limit_type_.Clear();
}
inline std::string* ConjLimitConfig::add_limit_type() {
  // @@protoc_insertion_point(field_add_mutable:ConjLimitConfig.limit_type)
  return _internal_add_limit_type();
}
inline const std::string& ConjLimitConfig::_internal_limit_type(int index) const {
  return limit_type_.Get(index);
}
inline const std::string& ConjLimitConfig::limit_type(int index) const {
  // @@protoc_insertion_point(field_get:ConjLimitConfig.limit_type)
  return _internal_limit_type(index);
}
inline std::string* ConjLimitConfig::mutable_limit_type(int index) {
  // @@protoc_insertion_point(field_mutable:ConjLimitConfig.limit_type)
  return limit_type_.Mutable(index);
}
inline void ConjLimitConfig::set_limit_type(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ConjLimitConfig.limit_type)
  limit_type_.Mutable(index)->assign(value);
}
inline void ConjLimitConfig::set_limit_type(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ConjLimitConfig.limit_type)
  limit_type_.Mutable(index)->assign(std::move(value));
}
inline void ConjLimitConfig::set_limit_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  limit_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ConjLimitConfig.limit_type)
}
inline void ConjLimitConfig::set_limit_type(int index, const char* value, size_t size) {
  limit_type_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ConjLimitConfig.limit_type)
}
inline std::string* ConjLimitConfig::_internal_add_limit_type() {
  return limit_type_.Add();
}
inline void ConjLimitConfig::add_limit_type(const std::string& value) {
  limit_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ConjLimitConfig.limit_type)
}
inline void ConjLimitConfig::add_limit_type(std::string&& value) {
  limit_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ConjLimitConfig.limit_type)
}
inline void ConjLimitConfig::add_limit_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  limit_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ConjLimitConfig.limit_type)
}
inline void ConjLimitConfig::add_limit_type(const char* value, size_t size) {
  limit_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ConjLimitConfig.limit_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ConjLimitConfig::limit_type()
    const {
  // @@protoc_insertion_point(field_list:ConjLimitConfig.limit_type)
  return limit_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConjLimitConfig::mutable_limit_type() {
  // @@protoc_insertion_point(field_mutable_list:ConjLimitConfig.limit_type)
  return &limit_type_;
}

// -------------------------------------------------------------------

// UniformMutationConfig

// double scale = 1;
inline void UniformMutationConfig::clear_scale() {
  scale_ = 0;
}
inline double UniformMutationConfig::_internal_scale() const {
  return scale_;
}
inline double UniformMutationConfig::scale() const {
  // @@protoc_insertion_point(field_get:UniformMutationConfig.scale)
  return _internal_scale();
}
inline void UniformMutationConfig::_internal_set_scale(double value) {
  scale_ = value;
}
inline void UniformMutationConfig::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:UniformMutationConfig.scale)
}

// -------------------------------------------------------------------

// DoerrMutationConfig

// double beta = 1;
inline void DoerrMutationConfig::clear_beta() {
  beta_ = 0;
}
inline double DoerrMutationConfig::_internal_beta() const {
  return beta_;
}
inline double DoerrMutationConfig::beta() const {
  // @@protoc_insertion_point(field_get:DoerrMutationConfig.beta)
  return _internal_beta();
}
inline void DoerrMutationConfig::_internal_set_beta(double value) {
  beta_ = value;
}
inline void DoerrMutationConfig::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:DoerrMutationConfig.beta)
}

// -------------------------------------------------------------------

// EAAlgorithmConfig

// string mutation_type = 1;
inline void EAAlgorithmConfig::clear_mutation_type() {
  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EAAlgorithmConfig::mutation_type() const {
  // @@protoc_insertion_point(field_get:EAAlgorithmConfig.mutation_type)
  return _internal_mutation_type();
}
inline void EAAlgorithmConfig::set_mutation_type(const std::string& value) {
  _internal_set_mutation_type(value);
  // @@protoc_insertion_point(field_set:EAAlgorithmConfig.mutation_type)
}
inline std::string* EAAlgorithmConfig::mutable_mutation_type() {
  // @@protoc_insertion_point(field_mutable:EAAlgorithmConfig.mutation_type)
  return _internal_mutable_mutation_type();
}
inline const std::string& EAAlgorithmConfig::_internal_mutation_type() const {
  return mutation_type_.Get();
}
inline void EAAlgorithmConfig::_internal_set_mutation_type(const std::string& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EAAlgorithmConfig::set_mutation_type(std::string&& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EAAlgorithmConfig.mutation_type)
}
inline void EAAlgorithmConfig::set_mutation_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:EAAlgorithmConfig.mutation_type)
}
inline void EAAlgorithmConfig::set_mutation_type(const char* value, size_t size) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EAAlgorithmConfig.mutation_type)
}
inline std::string* EAAlgorithmConfig::_internal_mutable_mutation_type() {
  return mutation_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EAAlgorithmConfig::release_mutation_type() {
  // @@protoc_insertion_point(field_release:EAAlgorithmConfig.mutation_type)
  return mutation_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EAAlgorithmConfig::set_allocated_mutation_type(std::string* mutation_type) {
  if (mutation_type != nullptr) {
  } else {
  }
  mutation_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mutation_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:EAAlgorithmConfig.mutation_type)
}

// string selector_type = 2;
inline void EAAlgorithmConfig::clear_selector_type() {
  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EAAlgorithmConfig::selector_type() const {
  // @@protoc_insertion_point(field_get:EAAlgorithmConfig.selector_type)
  return _internal_selector_type();
}
inline void EAAlgorithmConfig::set_selector_type(const std::string& value) {
  _internal_set_selector_type(value);
  // @@protoc_insertion_point(field_set:EAAlgorithmConfig.selector_type)
}
inline std::string* EAAlgorithmConfig::mutable_selector_type() {
  // @@protoc_insertion_point(field_mutable:EAAlgorithmConfig.selector_type)
  return _internal_mutable_selector_type();
}
inline const std::string& EAAlgorithmConfig::_internal_selector_type() const {
  return selector_type_.Get();
}
inline void EAAlgorithmConfig::_internal_set_selector_type(const std::string& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EAAlgorithmConfig::set_selector_type(std::string&& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:EAAlgorithmConfig.selector_type)
}
inline void EAAlgorithmConfig::set_selector_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:EAAlgorithmConfig.selector_type)
}
inline void EAAlgorithmConfig::set_selector_type(const char* value, size_t size) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:EAAlgorithmConfig.selector_type)
}
inline std::string* EAAlgorithmConfig::_internal_mutable_selector_type() {
  return selector_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EAAlgorithmConfig::release_selector_type() {
  // @@protoc_insertion_point(field_release:EAAlgorithmConfig.selector_type)
  return selector_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EAAlgorithmConfig::set_allocated_selector_type(std::string* selector_type) {
  if (selector_type != nullptr) {
  } else {
  }
  selector_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:EAAlgorithmConfig.selector_type)
}

// -------------------------------------------------------------------

// GAAlgorithmConfig

// string mutation_type = 1;
inline void GAAlgorithmConfig::clear_mutation_type() {
  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GAAlgorithmConfig::mutation_type() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.mutation_type)
  return _internal_mutation_type();
}
inline void GAAlgorithmConfig::set_mutation_type(const std::string& value) {
  _internal_set_mutation_type(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.mutation_type)
}
inline std::string* GAAlgorithmConfig::mutable_mutation_type() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.mutation_type)
  return _internal_mutable_mutation_type();
}
inline const std::string& GAAlgorithmConfig::_internal_mutation_type() const {
  return mutation_type_.Get();
}
inline void GAAlgorithmConfig::_internal_set_mutation_type(const std::string& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GAAlgorithmConfig::set_mutation_type(std::string&& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GAAlgorithmConfig.mutation_type)
}
inline void GAAlgorithmConfig::set_mutation_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:GAAlgorithmConfig.mutation_type)
}
inline void GAAlgorithmConfig::set_mutation_type(const char* value, size_t size) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GAAlgorithmConfig.mutation_type)
}
inline std::string* GAAlgorithmConfig::_internal_mutable_mutation_type() {
  return mutation_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GAAlgorithmConfig::release_mutation_type() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.mutation_type)
  return mutation_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GAAlgorithmConfig::set_allocated_mutation_type(std::string* mutation_type) {
  if (mutation_type != nullptr) {
  } else {
  }
  mutation_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mutation_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.mutation_type)
}

// string crossover_type = 2;
inline void GAAlgorithmConfig::clear_crossover_type() {
  crossover_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GAAlgorithmConfig::crossover_type() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.crossover_type)
  return _internal_crossover_type();
}
inline void GAAlgorithmConfig::set_crossover_type(const std::string& value) {
  _internal_set_crossover_type(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.crossover_type)
}
inline std::string* GAAlgorithmConfig::mutable_crossover_type() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.crossover_type)
  return _internal_mutable_crossover_type();
}
inline const std::string& GAAlgorithmConfig::_internal_crossover_type() const {
  return crossover_type_.Get();
}
inline void GAAlgorithmConfig::_internal_set_crossover_type(const std::string& value) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GAAlgorithmConfig::set_crossover_type(std::string&& value) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GAAlgorithmConfig.crossover_type)
}
inline void GAAlgorithmConfig::set_crossover_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:GAAlgorithmConfig.crossover_type)
}
inline void GAAlgorithmConfig::set_crossover_type(const char* value, size_t size) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GAAlgorithmConfig.crossover_type)
}
inline std::string* GAAlgorithmConfig::_internal_mutable_crossover_type() {
  return crossover_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GAAlgorithmConfig::release_crossover_type() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.crossover_type)
  return crossover_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GAAlgorithmConfig::set_allocated_crossover_type(std::string* crossover_type) {
  if (crossover_type != nullptr) {
  } else {
  }
  crossover_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossover_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.crossover_type)
}

// string selector_type = 3;
inline void GAAlgorithmConfig::clear_selector_type() {
  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GAAlgorithmConfig::selector_type() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.selector_type)
  return _internal_selector_type();
}
inline void GAAlgorithmConfig::set_selector_type(const std::string& value) {
  _internal_set_selector_type(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.selector_type)
}
inline std::string* GAAlgorithmConfig::mutable_selector_type() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.selector_type)
  return _internal_mutable_selector_type();
}
inline const std::string& GAAlgorithmConfig::_internal_selector_type() const {
  return selector_type_.Get();
}
inline void GAAlgorithmConfig::_internal_set_selector_type(const std::string& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GAAlgorithmConfig::set_selector_type(std::string&& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GAAlgorithmConfig.selector_type)
}
inline void GAAlgorithmConfig::set_selector_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:GAAlgorithmConfig.selector_type)
}
inline void GAAlgorithmConfig::set_selector_type(const char* value, size_t size) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GAAlgorithmConfig.selector_type)
}
inline std::string* GAAlgorithmConfig::_internal_mutable_selector_type() {
  return selector_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GAAlgorithmConfig::release_selector_type() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.selector_type)
  return selector_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GAAlgorithmConfig::set_allocated_selector_type(std::string* selector_type) {
  if (selector_type != nullptr) {
  } else {
  }
  selector_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.selector_type)
}

// uint32 q = 4;
inline void GAAlgorithmConfig::clear_q() {
  q_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::_internal_q() const {
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::q() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.q)
  return _internal_q();
}
inline void GAAlgorithmConfig::_internal_set_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  q_ = value;
}
inline void GAAlgorithmConfig::set_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.q)
}

// uint32 h = 5;
inline void GAAlgorithmConfig::clear_h() {
  h_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::h() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.h)
  return _internal_h();
}
inline void GAAlgorithmConfig::_internal_set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  h_ = value;
}
inline void GAAlgorithmConfig::set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.h)
}

// -------------------------------------------------------------------

// MinisatCliConfig

// int32 verbosity_level = 1;
inline void MinisatCliConfig::clear_verbosity_level() {
  verbosity_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_verbosity_level() const {
  return verbosity_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::verbosity_level() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.verbosity_level)
  return _internal_verbosity_level();
}
inline void MinisatCliConfig::_internal_set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  verbosity_level_ = value;
}
inline void MinisatCliConfig::set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_verbosity_level(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.verbosity_level)
}

// bool preprocessing = 2;
inline void MinisatCliConfig::clear_preprocessing() {
  preprocessing_ = false;
}
inline bool MinisatCliConfig::_internal_preprocessing() const {
  return preprocessing_;
}
inline bool MinisatCliConfig::preprocessing() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.preprocessing)
  return _internal_preprocessing();
}
inline void MinisatCliConfig::_internal_set_preprocessing(bool value) {
  preprocessing_ = value;
}
inline void MinisatCliConfig::set_preprocessing(bool value) {
  _internal_set_preprocessing(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.preprocessing)
}

// int32 cpu_limit = 4;
inline void MinisatCliConfig::clear_cpu_limit() {
  cpu_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_cpu_limit() const {
  return cpu_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::cpu_limit() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.cpu_limit)
  return _internal_cpu_limit();
}
inline void MinisatCliConfig::_internal_set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_limit_ = value;
}
inline void MinisatCliConfig::set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_limit(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.cpu_limit)
}

// int32 mem_limit = 5;
inline void MinisatCliConfig::clear_mem_limit() {
  mem_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_mem_limit() const {
  return mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::mem_limit() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.mem_limit)
  return _internal_mem_limit();
}
inline void MinisatCliConfig::_internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mem_limit_ = value;
}
inline void MinisatCliConfig::set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mem_limit(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.mem_limit)
}

// -------------------------------------------------------------------

// SolverConfig

// double var_decay = 1;
inline void SolverConfig::clear_var_decay() {
  var_decay_ = 0;
}
inline double SolverConfig::_internal_var_decay() const {
  return var_decay_;
}
inline double SolverConfig::var_decay() const {
  // @@protoc_insertion_point(field_get:SolverConfig.var_decay)
  return _internal_var_decay();
}
inline void SolverConfig::_internal_set_var_decay(double value) {
  var_decay_ = value;
}
inline void SolverConfig::set_var_decay(double value) {
  _internal_set_var_decay(value);
  // @@protoc_insertion_point(field_set:SolverConfig.var_decay)
}

// double cla_decay = 2;
inline void SolverConfig::clear_cla_decay() {
  cla_decay_ = 0;
}
inline double SolverConfig::_internal_cla_decay() const {
  return cla_decay_;
}
inline double SolverConfig::cla_decay() const {
  // @@protoc_insertion_point(field_get:SolverConfig.cla_decay)
  return _internal_cla_decay();
}
inline void SolverConfig::_internal_set_cla_decay(double value) {
  cla_decay_ = value;
}
inline void SolverConfig::set_cla_decay(double value) {
  _internal_set_cla_decay(value);
  // @@protoc_insertion_point(field_set:SolverConfig.cla_decay)
}

// double rnd_freq = 3;
inline void SolverConfig::clear_rnd_freq() {
  rnd_freq_ = 0;
}
inline double SolverConfig::_internal_rnd_freq() const {
  return rnd_freq_;
}
inline double SolverConfig::rnd_freq() const {
  // @@protoc_insertion_point(field_get:SolverConfig.rnd_freq)
  return _internal_rnd_freq();
}
inline void SolverConfig::_internal_set_rnd_freq(double value) {
  rnd_freq_ = value;
}
inline void SolverConfig::set_rnd_freq(double value) {
  _internal_set_rnd_freq(value);
  // @@protoc_insertion_point(field_set:SolverConfig.rnd_freq)
}

// double rnd_seed = 4;
inline void SolverConfig::clear_rnd_seed() {
  rnd_seed_ = 0;
}
inline double SolverConfig::_internal_rnd_seed() const {
  return rnd_seed_;
}
inline double SolverConfig::rnd_seed() const {
  // @@protoc_insertion_point(field_get:SolverConfig.rnd_seed)
  return _internal_rnd_seed();
}
inline void SolverConfig::_internal_set_rnd_seed(double value) {
  rnd_seed_ = value;
}
inline void SolverConfig::set_rnd_seed(double value) {
  _internal_set_rnd_seed(value);
  // @@protoc_insertion_point(field_set:SolverConfig.rnd_seed)
}

// int32 ccmin_mode = 5;
inline void SolverConfig::clear_ccmin_mode() {
  ccmin_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::_internal_ccmin_mode() const {
  return ccmin_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::ccmin_mode() const {
  // @@protoc_insertion_point(field_get:SolverConfig.ccmin_mode)
  return _internal_ccmin_mode();
}
inline void SolverConfig::_internal_set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ccmin_mode_ = value;
}
inline void SolverConfig::set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ccmin_mode(value);
  // @@protoc_insertion_point(field_set:SolverConfig.ccmin_mode)
}

// int32 phase_saving = 6;
inline void SolverConfig::clear_phase_saving() {
  phase_saving_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::_internal_phase_saving() const {
  return phase_saving_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::phase_saving() const {
  // @@protoc_insertion_point(field_get:SolverConfig.phase_saving)
  return _internal_phase_saving();
}
inline void SolverConfig::_internal_set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value) {
  phase_saving_ = value;
}
inline void SolverConfig::set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_saving(value);
  // @@protoc_insertion_point(field_set:SolverConfig.phase_saving)
}

// bool rnd_init = 7;
inline void SolverConfig::clear_rnd_init() {
  rnd_init_ = false;
}
inline bool SolverConfig::_internal_rnd_init() const {
  return rnd_init_;
}
inline bool SolverConfig::rnd_init() const {
  // @@protoc_insertion_point(field_get:SolverConfig.rnd_init)
  return _internal_rnd_init();
}
inline void SolverConfig::_internal_set_rnd_init(bool value) {
  rnd_init_ = value;
}
inline void SolverConfig::set_rnd_init(bool value) {
  _internal_set_rnd_init(value);
  // @@protoc_insertion_point(field_set:SolverConfig.rnd_init)
}

// bool luby = 8;
inline void SolverConfig::clear_luby() {
  luby_ = false;
}
inline bool SolverConfig::_internal_luby() const {
  return luby_;
}
inline bool SolverConfig::luby() const {
  // @@protoc_insertion_point(field_get:SolverConfig.luby)
  return _internal_luby();
}
inline void SolverConfig::_internal_set_luby(bool value) {
  luby_ = value;
}
inline void SolverConfig::set_luby(bool value) {
  _internal_set_luby(value);
  // @@protoc_insertion_point(field_set:SolverConfig.luby)
}

// int32 rfirst = 9;
inline void SolverConfig::clear_rfirst() {
  rfirst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::_internal_rfirst() const {
  return rfirst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::rfirst() const {
  // @@protoc_insertion_point(field_get:SolverConfig.rfirst)
  return _internal_rfirst();
}
inline void SolverConfig::_internal_set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rfirst_ = value;
}
inline void SolverConfig::set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rfirst(value);
  // @@protoc_insertion_point(field_set:SolverConfig.rfirst)
}

// double rinc = 10;
inline void SolverConfig::clear_rinc() {
  rinc_ = 0;
}
inline double SolverConfig::_internal_rinc() const {
  return rinc_;
}
inline double SolverConfig::rinc() const {
  // @@protoc_insertion_point(field_get:SolverConfig.rinc)
  return _internal_rinc();
}
inline void SolverConfig::_internal_set_rinc(double value) {
  rinc_ = value;
}
inline void SolverConfig::set_rinc(double value) {
  _internal_set_rinc(value);
  // @@protoc_insertion_point(field_set:SolverConfig.rinc)
}

// double gc_frac = 11;
inline void SolverConfig::clear_gc_frac() {
  gc_frac_ = 0;
}
inline double SolverConfig::_internal_gc_frac() const {
  return gc_frac_;
}
inline double SolverConfig::gc_frac() const {
  // @@protoc_insertion_point(field_get:SolverConfig.gc_frac)
  return _internal_gc_frac();
}
inline void SolverConfig::_internal_set_gc_frac(double value) {
  gc_frac_ = value;
}
inline void SolverConfig::set_gc_frac(double value) {
  _internal_set_gc_frac(value);
  // @@protoc_insertion_point(field_set:SolverConfig.gc_frac)
}

// int32 min_learnts = 12;
inline void SolverConfig::clear_min_learnts() {
  min_learnts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::_internal_min_learnts() const {
  return min_learnts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SolverConfig::min_learnts() const {
  // @@protoc_insertion_point(field_get:SolverConfig.min_learnts)
  return _internal_min_learnts();
}
inline void SolverConfig::_internal_set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  min_learnts_ = value;
}
inline void SolverConfig::set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_learnts(value);
  // @@protoc_insertion_point(field_set:SolverConfig.min_learnts)
}

// -------------------------------------------------------------------

// SimpSolverConfig

// bool use_asymm = 1;
inline void SimpSolverConfig::clear_use_asymm() {
  use_asymm_ = false;
}
inline bool SimpSolverConfig::_internal_use_asymm() const {
  return use_asymm_;
}
inline bool SimpSolverConfig::use_asymm() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_asymm)
  return _internal_use_asymm();
}
inline void SimpSolverConfig::_internal_set_use_asymm(bool value) {
  use_asymm_ = value;
}
inline void SimpSolverConfig::set_use_asymm(bool value) {
  _internal_set_use_asymm(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_asymm)
}

// bool use_rcheck = 2;
inline void SimpSolverConfig::clear_use_rcheck() {
  use_rcheck_ = false;
}
inline bool SimpSolverConfig::_internal_use_rcheck() const {
  return use_rcheck_;
}
inline bool SimpSolverConfig::use_rcheck() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_rcheck)
  return _internal_use_rcheck();
}
inline void SimpSolverConfig::_internal_set_use_rcheck(bool value) {
  use_rcheck_ = value;
}
inline void SimpSolverConfig::set_use_rcheck(bool value) {
  _internal_set_use_rcheck(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_rcheck)
}

// bool use_elim = 3;
inline void SimpSolverConfig::clear_use_elim() {
  use_elim_ = false;
}
inline bool SimpSolverConfig::_internal_use_elim() const {
  return use_elim_;
}
inline bool SimpSolverConfig::use_elim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_elim)
  return _internal_use_elim();
}
inline void SimpSolverConfig::_internal_set_use_elim(bool value) {
  use_elim_ = value;
}
inline void SimpSolverConfig::set_use_elim(bool value) {
  _internal_set_use_elim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_elim)
}

// int32 grow = 4;
inline void SimpSolverConfig::clear_grow() {
  grow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_grow() const {
  return grow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::grow() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.grow)
  return _internal_grow();
}
inline void SimpSolverConfig::_internal_set_grow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  grow_ = value;
}
inline void SimpSolverConfig::set_grow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grow(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.grow)
}

// int32 clause_lim = 5;
inline void SimpSolverConfig::clear_clause_lim() {
  clause_lim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_clause_lim() const {
  return clause_lim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::clause_lim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.clause_lim)
  return _internal_clause_lim();
}
inline void SimpSolverConfig::_internal_set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clause_lim_ = value;
}
inline void SimpSolverConfig::set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clause_lim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.clause_lim)
}

// int32 subsumption_lim = 6;
inline void SimpSolverConfig::clear_subsumption_lim() {
  subsumption_lim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_subsumption_lim() const {
  return subsumption_lim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::subsumption_lim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.subsumption_lim)
  return _internal_subsumption_lim();
}
inline void SimpSolverConfig::_internal_set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  subsumption_lim_ = value;
}
inline void SimpSolverConfig::set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subsumption_lim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.subsumption_lim)
}

// double simp_garbage_frac = 7;
inline void SimpSolverConfig::clear_simp_garbage_frac() {
  simp_garbage_frac_ = 0;
}
inline double SimpSolverConfig::_internal_simp_garbage_frac() const {
  return simp_garbage_frac_;
}
inline double SimpSolverConfig::simp_garbage_frac() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.simp_garbage_frac)
  return _internal_simp_garbage_frac();
}
inline void SimpSolverConfig::_internal_set_simp_garbage_frac(double value) {
  simp_garbage_frac_ = value;
}
inline void SimpSolverConfig::set_simp_garbage_frac(double value) {
  _internal_set_simp_garbage_frac(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.simp_garbage_frac)
}

// .SolverConfig solver_config = 8;
inline bool SimpSolverConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool SimpSolverConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void SimpSolverConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& SimpSolverConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& SimpSolverConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.solver_config)
  return _internal_solver_config();
}
inline void SimpSolverConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimpSolverConfig.solver_config)
}
inline ::SolverConfig* SimpSolverConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* SimpSolverConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:SimpSolverConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* SimpSolverConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* SimpSolverConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:SimpSolverConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void SimpSolverConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:SimpSolverConfig.solver_config)
}

// .MinisatCliConfig cli_config = 9;
inline bool SimpSolverConfig::_internal_has_cli_config() const {
  return this != internal_default_instance() && cli_config_ != nullptr;
}
inline bool SimpSolverConfig::has_cli_config() const {
  return _internal_has_cli_config();
}
inline void SimpSolverConfig::clear_cli_config() {
  if (GetArena() == nullptr && cli_config_ != nullptr) {
    delete cli_config_;
  }
  cli_config_ = nullptr;
}
inline const ::MinisatCliConfig& SimpSolverConfig::_internal_cli_config() const {
  const ::MinisatCliConfig* p = cli_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::MinisatCliConfig*>(&::_MinisatCliConfig_default_instance_);
}
inline const ::MinisatCliConfig& SimpSolverConfig::cli_config() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.cli_config)
  return _internal_cli_config();
}
inline void SimpSolverConfig::unsafe_arena_set_allocated_cli_config(
    ::MinisatCliConfig* cli_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cli_config_);
  }
  cli_config_ = cli_config;
  if (cli_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimpSolverConfig.cli_config)
}
inline ::MinisatCliConfig* SimpSolverConfig::release_cli_config() {
  ::MinisatCliConfig* temp = cli_config_;
  cli_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MinisatCliConfig* SimpSolverConfig::unsafe_arena_release_cli_config() {
  // @@protoc_insertion_point(field_release:SimpSolverConfig.cli_config)

  ::MinisatCliConfig* temp = cli_config_;
  cli_config_ = nullptr;
  return temp;
}
inline ::MinisatCliConfig* SimpSolverConfig::_internal_mutable_cli_config() {
  if (cli_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::MinisatCliConfig>(GetArena());
    cli_config_ = p;
  }
  return cli_config_;
}
inline ::MinisatCliConfig* SimpSolverConfig::mutable_cli_config() {
  // @@protoc_insertion_point(field_mutable:SimpSolverConfig.cli_config)
  return _internal_mutable_cli_config();
}
inline void SimpSolverConfig::set_allocated_cli_config(::MinisatCliConfig* cli_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cli_config_;
  }
  if (cli_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cli_config);
    if (message_arena != submessage_arena) {
      cli_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cli_config, submessage_arena);
    }

  } else {
  }
  cli_config_ = cli_config;
  // @@protoc_insertion_point(field_set_allocated:SimpSolverConfig.cli_config)
}

// -------------------------------------------------------------------

// ParSolverConfig

// uint32 max_threads = 1;
inline void ParSolverConfig::clear_max_threads() {
  max_threads_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParSolverConfig::_internal_max_threads() const {
  return max_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParSolverConfig::max_threads() const {
  // @@protoc_insertion_point(field_get:ParSolverConfig.max_threads)
  return _internal_max_threads();
}
inline void ParSolverConfig::_internal_set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_threads_ = value;
}
inline void ParSolverConfig::set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_threads(value);
  // @@protoc_insertion_point(field_set:ParSolverConfig.max_threads)
}

// string solver_type = 2;
inline void ParSolverConfig::clear_solver_type() {
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParSolverConfig::solver_type() const {
  // @@protoc_insertion_point(field_get:ParSolverConfig.solver_type)
  return _internal_solver_type();
}
inline void ParSolverConfig::set_solver_type(const std::string& value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:ParSolverConfig.solver_type)
}
inline std::string* ParSolverConfig::mutable_solver_type() {
  // @@protoc_insertion_point(field_mutable:ParSolverConfig.solver_type)
  return _internal_mutable_solver_type();
}
inline const std::string& ParSolverConfig::_internal_solver_type() const {
  return solver_type_.Get();
}
inline void ParSolverConfig::_internal_set_solver_type(const std::string& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParSolverConfig::set_solver_type(std::string&& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ParSolverConfig.solver_type)
}
inline void ParSolverConfig::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:ParSolverConfig.solver_type)
}
inline void ParSolverConfig::set_solver_type(const char* value, size_t size) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ParSolverConfig.solver_type)
}
inline std::string* ParSolverConfig::_internal_mutable_solver_type() {
  return solver_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParSolverConfig::release_solver_type() {
  // @@protoc_insertion_point(field_release:ParSolverConfig.solver_type)
  return solver_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParSolverConfig::set_allocated_solver_type(std::string* solver_type) {
  if (solver_type != nullptr) {
  } else {
  }
  solver_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:ParSolverConfig.solver_type)
}

// -------------------------------------------------------------------

// LoggerConfig_LoggerEntry

// .LogType log_type = 1;
inline void LoggerConfig_LoggerEntry::clear_log_type() {
  log_type_ = 0;
}
inline ::LogType LoggerConfig_LoggerEntry::_internal_log_type() const {
  return static_cast<::LogType>(log_type_);
}
inline ::LogType LoggerConfig_LoggerEntry::log_type() const {
  // @@protoc_insertion_point(field_get:LoggerConfig.LoggerEntry.log_type)
  return _internal_log_type();
}
inline void LoggerConfig_LoggerEntry::_internal_set_log_type(::LogType value) {
  log_type_ = value;
}
inline void LoggerConfig_LoggerEntry::set_log_type(::LogType value) {
  _internal_set_log_type(value);
  // @@protoc_insertion_point(field_set:LoggerConfig.LoggerEntry.log_type)
}

// uint32 min_verbose_level = 2;
inline void LoggerConfig_LoggerEntry::clear_min_verbose_level() {
  min_verbose_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggerConfig_LoggerEntry::_internal_min_verbose_level()
    const {
  return min_verbose_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggerConfig_LoggerEntry::min_verbose_level() const {
  // @@protoc_insertion_point(field_get:LoggerConfig.LoggerEntry.min_verbose_level)
  return _internal_min_verbose_level();
}
inline void LoggerConfig_LoggerEntry::_internal_set_min_verbose_level(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  min_verbose_level_ = value;
}
inline void LoggerConfig_LoggerEntry::set_min_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_verbose_level(value);
  // @@protoc_insertion_point(field_set:LoggerConfig.LoggerEntry.min_verbose_level)
}

// uint32 every_n = 3;
inline void LoggerConfig_LoggerEntry::clear_every_n() {
  every_n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggerConfig_LoggerEntry::_internal_every_n() const {
  return every_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggerConfig_LoggerEntry::every_n() const {
  // @@protoc_insertion_point(field_get:LoggerConfig.LoggerEntry.every_n)
  return _internal_every_n();
}
inline void LoggerConfig_LoggerEntry::_internal_set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  every_n_ = value;
}
inline void LoggerConfig_LoggerEntry::set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_every_n(value);
  // @@protoc_insertion_point(field_set:LoggerConfig.LoggerEntry.every_n)
}

// -------------------------------------------------------------------

// LoggerConfig

// repeated .LoggerConfig.LoggerEntry entries = 1;
inline int LoggerConfig::_internal_entries_size() const {
  return entries_.size();
}
inline int LoggerConfig::entries_size() const {
  return _internal_entries_size();
}
inline void LoggerConfig::clear_entries() {
  entries_.Clear();
}
inline ::LoggerConfig_LoggerEntry* LoggerConfig::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:LoggerConfig.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggerConfig_LoggerEntry>*
LoggerConfig::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:LoggerConfig.entries)
  return &entries_;
}
inline const ::LoggerConfig_LoggerEntry& LoggerConfig::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::LoggerConfig_LoggerEntry& LoggerConfig::entries(int index) const {
  // @@protoc_insertion_point(field_get:LoggerConfig.entries)
  return _internal_entries(index);
}
inline ::LoggerConfig_LoggerEntry* LoggerConfig::_internal_add_entries() {
  return entries_.Add();
}
inline ::LoggerConfig_LoggerEntry* LoggerConfig::add_entries() {
  // @@protoc_insertion_point(field_add:LoggerConfig.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggerConfig_LoggerEntry>&
LoggerConfig::entries() const {
  // @@protoc_insertion_point(field_list:LoggerConfig.entries)
  return entries_;
}

// -------------------------------------------------------------------

// GlobalConfig

// string algorithm_type = 20;
inline void GlobalConfig::clear_algorithm_type() {
  algorithm_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GlobalConfig::algorithm_type() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.algorithm_type)
  return _internal_algorithm_type();
}
inline void GlobalConfig::set_algorithm_type(const std::string& value) {
  _internal_set_algorithm_type(value);
  // @@protoc_insertion_point(field_set:GlobalConfig.algorithm_type)
}
inline std::string* GlobalConfig::mutable_algorithm_type() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.algorithm_type)
  return _internal_mutable_algorithm_type();
}
inline const std::string& GlobalConfig::_internal_algorithm_type() const {
  return algorithm_type_.Get();
}
inline void GlobalConfig::_internal_set_algorithm_type(const std::string& value) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalConfig::set_algorithm_type(std::string&& value) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GlobalConfig.algorithm_type)
}
inline void GlobalConfig::set_algorithm_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:GlobalConfig.algorithm_type)
}
inline void GlobalConfig::set_algorithm_type(const char* value, size_t size) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GlobalConfig.algorithm_type)
}
inline std::string* GlobalConfig::_internal_mutable_algorithm_type() {
  return algorithm_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalConfig::release_algorithm_type() {
  // @@protoc_insertion_point(field_release:GlobalConfig.algorithm_type)
  return algorithm_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalConfig::set_allocated_algorithm_type(std::string* algorithm_type) {
  if (algorithm_type != nullptr) {
  } else {
  }
  algorithm_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.algorithm_type)
}

// .AlgorithmConfig algorithm_config = 1;
inline bool GlobalConfig::_internal_has_algorithm_config() const {
  return this != internal_default_instance() && algorithm_config_ != nullptr;
}
inline bool GlobalConfig::has_algorithm_config() const {
  return _internal_has_algorithm_config();
}
inline void GlobalConfig::clear_algorithm_config() {
  if (GetArena() == nullptr && algorithm_config_ != nullptr) {
    delete algorithm_config_;
  }
  algorithm_config_ = nullptr;
}
inline const ::AlgorithmConfig& GlobalConfig::_internal_algorithm_config() const {
  const ::AlgorithmConfig* p = algorithm_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::AlgorithmConfig*>(&::_AlgorithmConfig_default_instance_);
}
inline const ::AlgorithmConfig& GlobalConfig::algorithm_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.algorithm_config)
  return _internal_algorithm_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_algorithm_config(
    ::AlgorithmConfig* algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm_config_);
  }
  algorithm_config_ = algorithm_config;
  if (algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.algorithm_config)
}
inline ::AlgorithmConfig* GlobalConfig::release_algorithm_config() {
  ::AlgorithmConfig* temp = algorithm_config_;
  algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AlgorithmConfig* GlobalConfig::unsafe_arena_release_algorithm_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.algorithm_config)

  ::AlgorithmConfig* temp = algorithm_config_;
  algorithm_config_ = nullptr;
  return temp;
}
inline ::AlgorithmConfig* GlobalConfig::_internal_mutable_algorithm_config() {
  if (algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::AlgorithmConfig>(GetArena());
    algorithm_config_ = p;
  }
  return algorithm_config_;
}
inline ::AlgorithmConfig* GlobalConfig::mutable_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.algorithm_config)
  return _internal_mutable_algorithm_config();
}
inline void GlobalConfig::set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithm_config_;
  }
  if (algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithm_config);
    if (message_arena != submessage_arena) {
      algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm_config, submessage_arena);
    }

  } else {
  }
  algorithm_config_ = algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.algorithm_config)
}

// .EAAlgorithmConfig ea_algorithm_config = 12;
inline bool GlobalConfig::_internal_has_ea_algorithm_config() const {
  return this != internal_default_instance() && ea_algorithm_config_ != nullptr;
}
inline bool GlobalConfig::has_ea_algorithm_config() const {
  return _internal_has_ea_algorithm_config();
}
inline void GlobalConfig::clear_ea_algorithm_config() {
  if (GetArena() == nullptr && ea_algorithm_config_ != nullptr) {
    delete ea_algorithm_config_;
  }
  ea_algorithm_config_ = nullptr;
}
inline const ::EAAlgorithmConfig& GlobalConfig::_internal_ea_algorithm_config() const {
  const ::EAAlgorithmConfig* p = ea_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::EAAlgorithmConfig*>(
                            &::_EAAlgorithmConfig_default_instance_);
}
inline const ::EAAlgorithmConfig& GlobalConfig::ea_algorithm_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.ea_algorithm_config)
  return _internal_ea_algorithm_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_ea_algorithm_config(
    ::EAAlgorithmConfig* ea_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ea_algorithm_config_);
  }
  ea_algorithm_config_ = ea_algorithm_config;
  if (ea_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.ea_algorithm_config)
}
inline ::EAAlgorithmConfig* GlobalConfig::release_ea_algorithm_config() {
  ::EAAlgorithmConfig* temp = ea_algorithm_config_;
  ea_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EAAlgorithmConfig* GlobalConfig::unsafe_arena_release_ea_algorithm_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.ea_algorithm_config)

  ::EAAlgorithmConfig* temp = ea_algorithm_config_;
  ea_algorithm_config_ = nullptr;
  return temp;
}
inline ::EAAlgorithmConfig* GlobalConfig::_internal_mutable_ea_algorithm_config() {
  if (ea_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::EAAlgorithmConfig>(GetArena());
    ea_algorithm_config_ = p;
  }
  return ea_algorithm_config_;
}
inline ::EAAlgorithmConfig* GlobalConfig::mutable_ea_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.ea_algorithm_config)
  return _internal_mutable_ea_algorithm_config();
}
inline void GlobalConfig::set_allocated_ea_algorithm_config(
    ::EAAlgorithmConfig* ea_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ea_algorithm_config_;
  }
  if (ea_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ea_algorithm_config);
    if (message_arena != submessage_arena) {
      ea_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ea_algorithm_config, submessage_arena);
    }

  } else {
  }
  ea_algorithm_config_ = ea_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.ea_algorithm_config)
}

// .GAAlgorithmConfig ga_algorithm_config = 14;
inline bool GlobalConfig::_internal_has_ga_algorithm_config() const {
  return this != internal_default_instance() && ga_algorithm_config_ != nullptr;
}
inline bool GlobalConfig::has_ga_algorithm_config() const {
  return _internal_has_ga_algorithm_config();
}
inline void GlobalConfig::clear_ga_algorithm_config() {
  if (GetArena() == nullptr && ga_algorithm_config_ != nullptr) {
    delete ga_algorithm_config_;
  }
  ga_algorithm_config_ = nullptr;
}
inline const ::GAAlgorithmConfig& GlobalConfig::_internal_ga_algorithm_config() const {
  const ::GAAlgorithmConfig* p = ga_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::GAAlgorithmConfig*>(
                            &::_GAAlgorithmConfig_default_instance_);
}
inline const ::GAAlgorithmConfig& GlobalConfig::ga_algorithm_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.ga_algorithm_config)
  return _internal_ga_algorithm_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_ga_algorithm_config(
    ::GAAlgorithmConfig* ga_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ga_algorithm_config_);
  }
  ga_algorithm_config_ = ga_algorithm_config;
  if (ga_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.ga_algorithm_config)
}
inline ::GAAlgorithmConfig* GlobalConfig::release_ga_algorithm_config() {
  ::GAAlgorithmConfig* temp = ga_algorithm_config_;
  ga_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GAAlgorithmConfig* GlobalConfig::unsafe_arena_release_ga_algorithm_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.ga_algorithm_config)

  ::GAAlgorithmConfig* temp = ga_algorithm_config_;
  ga_algorithm_config_ = nullptr;
  return temp;
}
inline ::GAAlgorithmConfig* GlobalConfig::_internal_mutable_ga_algorithm_config() {
  if (ga_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::GAAlgorithmConfig>(GetArena());
    ga_algorithm_config_ = p;
  }
  return ga_algorithm_config_;
}
inline ::GAAlgorithmConfig* GlobalConfig::mutable_ga_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.ga_algorithm_config)
  return _internal_mutable_ga_algorithm_config();
}
inline void GlobalConfig::set_allocated_ga_algorithm_config(
    ::GAAlgorithmConfig* ga_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ga_algorithm_config_;
  }
  if (ga_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ga_algorithm_config);
    if (message_arena != submessage_arena) {
      ga_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ga_algorithm_config, submessage_arena);
    }

  } else {
  }
  ga_algorithm_config_ = ga_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.ga_algorithm_config)
}

// .ResourceLimitConfig resource_limit_config = 2;
inline bool GlobalConfig::_internal_has_resource_limit_config() const {
  return this != internal_default_instance() && resource_limit_config_ != nullptr;
}
inline bool GlobalConfig::has_resource_limit_config() const {
  return _internal_has_resource_limit_config();
}
inline void GlobalConfig::clear_resource_limit_config() {
  if (GetArena() == nullptr && resource_limit_config_ != nullptr) {
    delete resource_limit_config_;
  }
  resource_limit_config_ = nullptr;
}
inline const ::ResourceLimitConfig& GlobalConfig::_internal_resource_limit_config() const {
  const ::ResourceLimitConfig* p = resource_limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::ResourceLimitConfig*>(
                            &::_ResourceLimitConfig_default_instance_);
}
inline const ::ResourceLimitConfig& GlobalConfig::resource_limit_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.resource_limit_config)
  return _internal_resource_limit_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_resource_limit_config(
    ::ResourceLimitConfig* resource_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_limit_config_);
  }
  resource_limit_config_ = resource_limit_config;
  if (resource_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.resource_limit_config)
}
inline ::ResourceLimitConfig* GlobalConfig::release_resource_limit_config() {
  ::ResourceLimitConfig* temp = resource_limit_config_;
  resource_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResourceLimitConfig* GlobalConfig::unsafe_arena_release_resource_limit_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.resource_limit_config)

  ::ResourceLimitConfig* temp = resource_limit_config_;
  resource_limit_config_ = nullptr;
  return temp;
}
inline ::ResourceLimitConfig* GlobalConfig::_internal_mutable_resource_limit_config() {
  if (resource_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResourceLimitConfig>(GetArena());
    resource_limit_config_ = p;
  }
  return resource_limit_config_;
}
inline ::ResourceLimitConfig* GlobalConfig::mutable_resource_limit_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.resource_limit_config)
  return _internal_mutable_resource_limit_config();
}
inline void GlobalConfig::set_allocated_resource_limit_config(
    ::ResourceLimitConfig* resource_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_limit_config_;
  }
  if (resource_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_limit_config);
    if (message_arena != submessage_arena) {
      resource_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_limit_config, submessage_arena);
    }

  } else {
  }
  resource_limit_config_ = resource_limit_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.resource_limit_config)
}

// .FitnessLimitConfig fitness_limit_config = 3;
inline bool GlobalConfig::_internal_has_fitness_limit_config() const {
  return this != internal_default_instance() && fitness_limit_config_ != nullptr;
}
inline bool GlobalConfig::has_fitness_limit_config() const {
  return _internal_has_fitness_limit_config();
}
inline void GlobalConfig::clear_fitness_limit_config() {
  if (GetArena() == nullptr && fitness_limit_config_ != nullptr) {
    delete fitness_limit_config_;
  }
  fitness_limit_config_ = nullptr;
}
inline const ::FitnessLimitConfig& GlobalConfig::_internal_fitness_limit_config() const {
  const ::FitnessLimitConfig* p = fitness_limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::FitnessLimitConfig*>(
                            &::_FitnessLimitConfig_default_instance_);
}
inline const ::FitnessLimitConfig& GlobalConfig::fitness_limit_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.fitness_limit_config)
  return _internal_fitness_limit_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_fitness_limit_config(
    ::FitnessLimitConfig* fitness_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fitness_limit_config_);
  }
  fitness_limit_config_ = fitness_limit_config;
  if (fitness_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.fitness_limit_config)
}
inline ::FitnessLimitConfig* GlobalConfig::release_fitness_limit_config() {
  ::FitnessLimitConfig* temp = fitness_limit_config_;
  fitness_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FitnessLimitConfig* GlobalConfig::unsafe_arena_release_fitness_limit_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.fitness_limit_config)

  ::FitnessLimitConfig* temp = fitness_limit_config_;
  fitness_limit_config_ = nullptr;
  return temp;
}
inline ::FitnessLimitConfig* GlobalConfig::_internal_mutable_fitness_limit_config() {
  if (fitness_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::FitnessLimitConfig>(GetArena());
    fitness_limit_config_ = p;
  }
  return fitness_limit_config_;
}
inline ::FitnessLimitConfig* GlobalConfig::mutable_fitness_limit_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.fitness_limit_config)
  return _internal_mutable_fitness_limit_config();
}
inline void GlobalConfig::set_allocated_fitness_limit_config(
    ::FitnessLimitConfig* fitness_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fitness_limit_config_;
  }
  if (fitness_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fitness_limit_config);
    if (message_arena != submessage_arena) {
      fitness_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fitness_limit_config, submessage_arena);
    }

  } else {
  }
  fitness_limit_config_ = fitness_limit_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.fitness_limit_config)
}

// .ConjLimitConfig conj_limit_config = 5;
inline bool GlobalConfig::_internal_has_conj_limit_config() const {
  return this != internal_default_instance() && conj_limit_config_ != nullptr;
}
inline bool GlobalConfig::has_conj_limit_config() const {
  return _internal_has_conj_limit_config();
}
inline void GlobalConfig::clear_conj_limit_config() {
  if (GetArena() == nullptr && conj_limit_config_ != nullptr) {
    delete conj_limit_config_;
  }
  conj_limit_config_ = nullptr;
}
inline const ::ConjLimitConfig& GlobalConfig::_internal_conj_limit_config() const {
  const ::ConjLimitConfig* p = conj_limit_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::ConjLimitConfig*>(&::_ConjLimitConfig_default_instance_);
}
inline const ::ConjLimitConfig& GlobalConfig::conj_limit_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.conj_limit_config)
  return _internal_conj_limit_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_conj_limit_config(
    ::ConjLimitConfig* conj_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conj_limit_config_);
  }
  conj_limit_config_ = conj_limit_config;
  if (conj_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.conj_limit_config)
}
inline ::ConjLimitConfig* GlobalConfig::release_conj_limit_config() {
  ::ConjLimitConfig* temp = conj_limit_config_;
  conj_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConjLimitConfig* GlobalConfig::unsafe_arena_release_conj_limit_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.conj_limit_config)

  ::ConjLimitConfig* temp = conj_limit_config_;
  conj_limit_config_ = nullptr;
  return temp;
}
inline ::ConjLimitConfig* GlobalConfig::_internal_mutable_conj_limit_config() {
  if (conj_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConjLimitConfig>(GetArena());
    conj_limit_config_ = p;
  }
  return conj_limit_config_;
}
inline ::ConjLimitConfig* GlobalConfig::mutable_conj_limit_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.conj_limit_config)
  return _internal_mutable_conj_limit_config();
}
inline void GlobalConfig::set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conj_limit_config_;
  }
  if (conj_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conj_limit_config);
    if (message_arena != submessage_arena) {
      conj_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conj_limit_config, submessage_arena);
    }

  } else {
  }
  conj_limit_config_ = conj_limit_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.conj_limit_config)
}

// .UniformMutationConfig uniform_mutation_config = 11;
inline bool GlobalConfig::_internal_has_uniform_mutation_config() const {
  return this != internal_default_instance() && uniform_mutation_config_ != nullptr;
}
inline bool GlobalConfig::has_uniform_mutation_config() const {
  return _internal_has_uniform_mutation_config();
}
inline void GlobalConfig::clear_uniform_mutation_config() {
  if (GetArena() == nullptr && uniform_mutation_config_ != nullptr) {
    delete uniform_mutation_config_;
  }
  uniform_mutation_config_ = nullptr;
}
inline const ::UniformMutationConfig& GlobalConfig::_internal_uniform_mutation_config() const {
  const ::UniformMutationConfig* p = uniform_mutation_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::UniformMutationConfig*>(
                            &::_UniformMutationConfig_default_instance_);
}
inline const ::UniformMutationConfig& GlobalConfig::uniform_mutation_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.uniform_mutation_config)
  return _internal_uniform_mutation_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_uniform_mutation_config(
    ::UniformMutationConfig* uniform_mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_mutation_config_);
  }
  uniform_mutation_config_ = uniform_mutation_config;
  if (uniform_mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.uniform_mutation_config)
}
inline ::UniformMutationConfig* GlobalConfig::release_uniform_mutation_config() {
  ::UniformMutationConfig* temp = uniform_mutation_config_;
  uniform_mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::UniformMutationConfig* GlobalConfig::unsafe_arena_release_uniform_mutation_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.uniform_mutation_config)

  ::UniformMutationConfig* temp = uniform_mutation_config_;
  uniform_mutation_config_ = nullptr;
  return temp;
}
inline ::UniformMutationConfig* GlobalConfig::_internal_mutable_uniform_mutation_config() {
  if (uniform_mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniformMutationConfig>(GetArena());
    uniform_mutation_config_ = p;
  }
  return uniform_mutation_config_;
}
inline ::UniformMutationConfig* GlobalConfig::mutable_uniform_mutation_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.uniform_mutation_config)
  return _internal_mutable_uniform_mutation_config();
}
inline void GlobalConfig::set_allocated_uniform_mutation_config(
    ::UniformMutationConfig* uniform_mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uniform_mutation_config_;
  }
  if (uniform_mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uniform_mutation_config);
    if (message_arena != submessage_arena) {
      uniform_mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_mutation_config, submessage_arena);
    }

  } else {
  }
  uniform_mutation_config_ = uniform_mutation_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.uniform_mutation_config)
}

// .DoerrMutationConfig doerr_mutation_config = 13;
inline bool GlobalConfig::_internal_has_doerr_mutation_config() const {
  return this != internal_default_instance() && doerr_mutation_config_ != nullptr;
}
inline bool GlobalConfig::has_doerr_mutation_config() const {
  return _internal_has_doerr_mutation_config();
}
inline void GlobalConfig::clear_doerr_mutation_config() {
  if (GetArena() == nullptr && doerr_mutation_config_ != nullptr) {
    delete doerr_mutation_config_;
  }
  doerr_mutation_config_ = nullptr;
}
inline const ::DoerrMutationConfig& GlobalConfig::_internal_doerr_mutation_config() const {
  const ::DoerrMutationConfig* p = doerr_mutation_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::DoerrMutationConfig*>(
                            &::_DoerrMutationConfig_default_instance_);
}
inline const ::DoerrMutationConfig& GlobalConfig::doerr_mutation_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.doerr_mutation_config)
  return _internal_doerr_mutation_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_doerr_mutation_config(
    ::DoerrMutationConfig* doerr_mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doerr_mutation_config_);
  }
  doerr_mutation_config_ = doerr_mutation_config;
  if (doerr_mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.doerr_mutation_config)
}
inline ::DoerrMutationConfig* GlobalConfig::release_doerr_mutation_config() {
  ::DoerrMutationConfig* temp = doerr_mutation_config_;
  doerr_mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DoerrMutationConfig* GlobalConfig::unsafe_arena_release_doerr_mutation_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.doerr_mutation_config)

  ::DoerrMutationConfig* temp = doerr_mutation_config_;
  doerr_mutation_config_ = nullptr;
  return temp;
}
inline ::DoerrMutationConfig* GlobalConfig::_internal_mutable_doerr_mutation_config() {
  if (doerr_mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::DoerrMutationConfig>(GetArena());
    doerr_mutation_config_ = p;
  }
  return doerr_mutation_config_;
}
inline ::DoerrMutationConfig* GlobalConfig::mutable_doerr_mutation_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.doerr_mutation_config)
  return _internal_mutable_doerr_mutation_config();
}
inline void GlobalConfig::set_allocated_doerr_mutation_config(
    ::DoerrMutationConfig* doerr_mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete doerr_mutation_config_;
  }
  if (doerr_mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(doerr_mutation_config);
    if (message_arena != submessage_arena) {
      doerr_mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doerr_mutation_config, submessage_arena);
    }

  } else {
  }
  doerr_mutation_config_ = doerr_mutation_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.doerr_mutation_config)
}

// string solver_type = 21;
inline void GlobalConfig::clear_solver_type() {
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GlobalConfig::solver_type() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.solver_type)
  return _internal_solver_type();
}
inline void GlobalConfig::set_solver_type(const std::string& value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:GlobalConfig.solver_type)
}
inline std::string* GlobalConfig::mutable_solver_type() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.solver_type)
  return _internal_mutable_solver_type();
}
inline const std::string& GlobalConfig::_internal_solver_type() const {
  return solver_type_.Get();
}
inline void GlobalConfig::_internal_set_solver_type(const std::string& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GlobalConfig::set_solver_type(std::string&& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GlobalConfig.solver_type)
}
inline void GlobalConfig::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:GlobalConfig.solver_type)
}
inline void GlobalConfig::set_solver_type(const char* value, size_t size) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GlobalConfig.solver_type)
}
inline std::string* GlobalConfig::_internal_mutable_solver_type() {
  return solver_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GlobalConfig::release_solver_type() {
  // @@protoc_insertion_point(field_release:GlobalConfig.solver_type)
  return solver_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GlobalConfig::set_allocated_solver_type(std::string* solver_type) {
  if (solver_type != nullptr) {
  } else {
  }
  solver_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.solver_type)
}

// .SimpSolverConfig simp_solver_config = 7;
inline bool GlobalConfig::_internal_has_simp_solver_config() const {
  return this != internal_default_instance() && simp_solver_config_ != nullptr;
}
inline bool GlobalConfig::has_simp_solver_config() const {
  return _internal_has_simp_solver_config();
}
inline void GlobalConfig::clear_simp_solver_config() {
  if (GetArena() == nullptr && simp_solver_config_ != nullptr) {
    delete simp_solver_config_;
  }
  simp_solver_config_ = nullptr;
}
inline const ::SimpSolverConfig& GlobalConfig::_internal_simp_solver_config() const {
  const ::SimpSolverConfig* p = simp_solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SimpSolverConfig*>(&::_SimpSolverConfig_default_instance_);
}
inline const ::SimpSolverConfig& GlobalConfig::simp_solver_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.simp_solver_config)
  return _internal_simp_solver_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_simp_solver_config(
    ::SimpSolverConfig* simp_solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simp_solver_config_);
  }
  simp_solver_config_ = simp_solver_config;
  if (simp_solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.simp_solver_config)
}
inline ::SimpSolverConfig* GlobalConfig::release_simp_solver_config() {
  ::SimpSolverConfig* temp = simp_solver_config_;
  simp_solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SimpSolverConfig* GlobalConfig::unsafe_arena_release_simp_solver_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.simp_solver_config)

  ::SimpSolverConfig* temp = simp_solver_config_;
  simp_solver_config_ = nullptr;
  return temp;
}
inline ::SimpSolverConfig* GlobalConfig::_internal_mutable_simp_solver_config() {
  if (simp_solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimpSolverConfig>(GetArena());
    simp_solver_config_ = p;
  }
  return simp_solver_config_;
}
inline ::SimpSolverConfig* GlobalConfig::mutable_simp_solver_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.simp_solver_config)
  return _internal_mutable_simp_solver_config();
}
inline void GlobalConfig::set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete simp_solver_config_;
  }
  if (simp_solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simp_solver_config);
    if (message_arena != submessage_arena) {
      simp_solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simp_solver_config, submessage_arena);
    }

  } else {
  }
  simp_solver_config_ = simp_solver_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.simp_solver_config)
}

// .ParSolverConfig par_solver_config = 22;
inline bool GlobalConfig::_internal_has_par_solver_config() const {
  return this != internal_default_instance() && par_solver_config_ != nullptr;
}
inline bool GlobalConfig::has_par_solver_config() const {
  return _internal_has_par_solver_config();
}
inline void GlobalConfig::clear_par_solver_config() {
  if (GetArena() == nullptr && par_solver_config_ != nullptr) {
    delete par_solver_config_;
  }
  par_solver_config_ = nullptr;
}
inline const ::ParSolverConfig& GlobalConfig::_internal_par_solver_config() const {
  const ::ParSolverConfig* p = par_solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::ParSolverConfig*>(&::_ParSolverConfig_default_instance_);
}
inline const ::ParSolverConfig& GlobalConfig::par_solver_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.par_solver_config)
  return _internal_par_solver_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_par_solver_config(
    ::ParSolverConfig* par_solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_solver_config_);
  }
  par_solver_config_ = par_solver_config;
  if (par_solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.par_solver_config)
}
inline ::ParSolverConfig* GlobalConfig::release_par_solver_config() {
  ::ParSolverConfig* temp = par_solver_config_;
  par_solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ParSolverConfig* GlobalConfig::unsafe_arena_release_par_solver_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.par_solver_config)

  ::ParSolverConfig* temp = par_solver_config_;
  par_solver_config_ = nullptr;
  return temp;
}
inline ::ParSolverConfig* GlobalConfig::_internal_mutable_par_solver_config() {
  if (par_solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParSolverConfig>(GetArena());
    par_solver_config_ = p;
  }
  return par_solver_config_;
}
inline ::ParSolverConfig* GlobalConfig::mutable_par_solver_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.par_solver_config)
  return _internal_mutable_par_solver_config();
}
inline void GlobalConfig::set_allocated_par_solver_config(::ParSolverConfig* par_solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete par_solver_config_;
  }
  if (par_solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(par_solver_config);
    if (message_arena != submessage_arena) {
      par_solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, par_solver_config, submessage_arena);
    }

  } else {
  }
  par_solver_config_ = par_solver_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.par_solver_config)
}

// int64 rnd_seed = 23;
inline void GlobalConfig::clear_rnd_seed() {
  rnd_seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalConfig::_internal_rnd_seed() const {
  return rnd_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalConfig::rnd_seed() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.rnd_seed)
  return _internal_rnd_seed();
}
inline void GlobalConfig::_internal_set_rnd_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  rnd_seed_ = value;
}
inline void GlobalConfig::set_rnd_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rnd_seed(value);
  // @@protoc_insertion_point(field_set:GlobalConfig.rnd_seed)
}

// .LoggerConfig logger_config = 24;
inline bool GlobalConfig::_internal_has_logger_config() const {
  return this != internal_default_instance() && logger_config_ != nullptr;
}
inline bool GlobalConfig::has_logger_config() const {
  return _internal_has_logger_config();
}
inline void GlobalConfig::clear_logger_config() {
  if (GetArena() == nullptr && logger_config_ != nullptr) {
    delete logger_config_;
  }
  logger_config_ = nullptr;
}
inline const ::LoggerConfig& GlobalConfig::_internal_logger_config() const {
  const ::LoggerConfig* p = logger_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::LoggerConfig*>(&::_LoggerConfig_default_instance_);
}
inline const ::LoggerConfig& GlobalConfig::logger_config() const {
  // @@protoc_insertion_point(field_get:GlobalConfig.logger_config)
  return _internal_logger_config();
}
inline void GlobalConfig::unsafe_arena_set_allocated_logger_config(::LoggerConfig* logger_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logger_config_);
  }
  logger_config_ = logger_config;
  if (logger_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GlobalConfig.logger_config)
}
inline ::LoggerConfig* GlobalConfig::release_logger_config() {
  ::LoggerConfig* temp = logger_config_;
  logger_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LoggerConfig* GlobalConfig::unsafe_arena_release_logger_config() {
  // @@protoc_insertion_point(field_release:GlobalConfig.logger_config)

  ::LoggerConfig* temp = logger_config_;
  logger_config_ = nullptr;
  return temp;
}
inline ::LoggerConfig* GlobalConfig::_internal_mutable_logger_config() {
  if (logger_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::LoggerConfig>(GetArena());
    logger_config_ = p;
  }
  return logger_config_;
}
inline ::LoggerConfig* GlobalConfig::mutable_logger_config() {
  // @@protoc_insertion_point(field_mutable:GlobalConfig.logger_config)
  return _internal_mutable_logger_config();
}
inline void GlobalConfig::set_allocated_logger_config(::LoggerConfig* logger_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logger_config_;
  }
  if (logger_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logger_config);
    if (message_arena != submessage_arena) {
      logger_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logger_config, submessage_arena);
    }

  } else {
  }
  logger_config_ = logger_config;
  // @@protoc_insertion_point(field_set_allocated:GlobalConfig.logger_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::LogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::LogType>() {
  return ::LogType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_evol_2fproto_2fconfig_2eproto
