// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: evol/proto/config.proto

#include "evol/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<2>
        scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_SolverConfig_evol_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_evol_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto;
class AlgorithmConfig_InstanceConfig_SamplingSizeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      AlgorithmConfig_InstanceConfig_SamplingSizeConfig>
      _instance;
} _AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_;
class AlgorithmConfig_InstanceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmConfig_InstanceConfig>
      _instance;
} _AlgorithmConfig_InstanceConfig_default_instance_;
class AlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmConfig> _instance;
} _AlgorithmConfig_default_instance_;
class ResourceLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceLimitConfig> _instance;
} _ResourceLimitConfig_default_instance_;
class FitnessLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FitnessLimitConfig> _instance;
} _FitnessLimitConfig_default_instance_;
class ConjLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConjLimitConfig> _instance;
} _ConjLimitConfig_default_instance_;
class UniformMutationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniformMutationConfig> _instance;
} _UniformMutationConfig_default_instance_;
class DoerrMutationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoerrMutationConfig> _instance;
} _DoerrMutationConfig_default_instance_;
class EAAlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EAAlgorithmConfig> _instance;
} _EAAlgorithmConfig_default_instance_;
class GAAlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GAAlgorithmConfig> _instance;
} _GAAlgorithmConfig_default_instance_;
class MinisatCliConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinisatCliConfig> _instance;
} _MinisatCliConfig_default_instance_;
class SolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverConfig> _instance;
} _SolverConfig_default_instance_;
class SimpSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpSolverConfig> _instance;
} _SimpSolverConfig_default_instance_;
class ParSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParSolverConfig> _instance;
} _ParSolverConfig_default_instance_;
class LoggerConfig_LoggerEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggerConfig_LoggerEntry> _instance;
} _LoggerConfig_LoggerEntry_default_instance_;
class LoggerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggerConfig> _instance;
} _LoggerConfig_default_instance_;
class GlobalConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalConfig> _instance;
} _GlobalConfig_default_instance_;
static void InitDefaultsscc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AlgorithmConfig_default_instance_;
    new (ptr)::AlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto},
        {
            &scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AlgorithmConfig_InstanceConfig_default_instance_;
    new (ptr)::AlgorithmConfig_InstanceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AlgorithmConfig_InstanceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto},
        {
            &scc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_;
    new (ptr)::AlgorithmConfig_InstanceConfig_SamplingSizeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConjLimitConfig_default_instance_;
    new (ptr)::ConjLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConjLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DoerrMutationConfig_default_instance_;
    new (ptr)::DoerrMutationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DoerrMutationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EAAlgorithmConfig_default_instance_;
    new (ptr)::EAAlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EAAlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FitnessLimitConfig_default_instance_;
    new (ptr)::FitnessLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FitnessLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GAAlgorithmConfig_default_instance_;
    new (ptr)::GAAlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GAAlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GlobalConfig_default_instance_;
    new (ptr)::GlobalConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GlobalConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0,
      InitDefaultsscc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto},
     {
         &scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto.base,
         &scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto.base,
     }};

static void InitDefaultsscc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoggerConfig_default_instance_;
    new (ptr)::LoggerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoggerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
      InitDefaultsscc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto},
     {
         &scc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto.base,
     }};

static void InitDefaultsscc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoggerConfig_LoggerEntry_default_instance_;
    new (ptr)::LoggerConfig_LoggerEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoggerConfig_LoggerEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MinisatCliConfig_default_instance_;
    new (ptr)::MinisatCliConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MinisatCliConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ParSolverConfig_default_instance_;
    new (ptr)::ParSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ParSolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResourceLimitConfig_default_instance_;
    new (ptr)::ResourceLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResourceLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimpSolverConfig_default_instance_;
    new (ptr)::SimpSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimpSolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto},
        {
            &scc_info_SolverConfig_evol_2fproto_2fconfig_2eproto.base,
            &scc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_SolverConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SolverConfig_default_instance_;
    new (ptr)::SolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SolverConfig_evol_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
      InitDefaultsscc_info_SolverConfig_evol_2fproto_2fconfig_2eproto},
     {}};

static void InitDefaultsscc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UniformMutationConfig_default_instance_;
    new (ptr)::UniformMutationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UniformMutationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_evol_2fproto_2fconfig_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
    file_level_enum_descriptors_evol_2fproto_2fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_evol_2fproto_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_evol_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(
            ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig_SamplingSizeConfig, base_count_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig_SamplingSizeConfig, max_steps_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig_SamplingSizeConfig, scale_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig, omega_x_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig, heuristic_size_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig, max_cache_size_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig_InstanceConfig, sampling_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, limit_type_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, solver_type_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, instance_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, memory_limit_kb_),
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, time_limit_sec_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::FitnessLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::FitnessLimitConfig, lowest_fitness_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ConjLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ConjLimitConfig, limit_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::UniformMutationConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::UniformMutationConfig, scale_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::DoerrMutationConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::DoerrMutationConfig, beta_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, mutation_type_),
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, selector_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, mutation_type_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, crossover_type_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, selector_type_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, q_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, h_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, verbosity_level_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, preprocessing_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, cpu_limit_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, mem_limit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SolverConfig, var_decay_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, cla_decay_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, rnd_freq_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, rnd_seed_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, ccmin_mode_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, phase_saving_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, rnd_init_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, luby_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, rfirst_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, rinc_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, gc_frac_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, min_learnts_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_asymm_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_rcheck_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_elim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, grow_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, clause_lim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, subsumption_lim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, simp_garbage_frac_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, solver_config_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, cli_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, max_threads_),
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, solver_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LoggerConfig_LoggerEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::LoggerConfig_LoggerEntry, log_type_),
        PROTOBUF_FIELD_OFFSET(::LoggerConfig_LoggerEntry, min_verbose_level_),
        PROTOBUF_FIELD_OFFSET(::LoggerConfig_LoggerEntry, every_n_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LoggerConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::LoggerConfig, entries_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, algorithm_type_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, algorithm_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, ea_algorithm_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, ga_algorithm_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, resource_limit_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, fitness_limit_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, conj_limit_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, uniform_mutation_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, doerr_mutation_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, solver_type_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, simp_solver_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, par_solver_config_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, rnd_seed_),
        PROTOBUF_FIELD_OFFSET(::GlobalConfig, logger_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, sizeof(::AlgorithmConfig_InstanceConfig_SamplingSizeConfig)},
    {8, -1, sizeof(::AlgorithmConfig_InstanceConfig)},
    {17, -1, sizeof(::AlgorithmConfig)},
    {25, -1, sizeof(::ResourceLimitConfig)},
    {32, -1, sizeof(::FitnessLimitConfig)},
    {38, -1, sizeof(::ConjLimitConfig)},
    {44, -1, sizeof(::UniformMutationConfig)},
    {50, -1, sizeof(::DoerrMutationConfig)},
    {56, -1, sizeof(::EAAlgorithmConfig)},
    {63, -1, sizeof(::GAAlgorithmConfig)},
    {73, -1, sizeof(::MinisatCliConfig)},
    {82, -1, sizeof(::SolverConfig)},
    {99, -1, sizeof(::SimpSolverConfig)},
    {113, -1, sizeof(::ParSolverConfig)},
    {120, -1, sizeof(::LoggerConfig_LoggerEntry)},
    {128, -1, sizeof(::LoggerConfig)},
    {134, -1, sizeof(::GlobalConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_AlgorithmConfig_InstanceConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_AlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ResourceLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_FitnessLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ConjLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_UniformMutationConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_DoerrMutationConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_EAAlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_GAAlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_MinisatCliConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_SimpSolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ParSolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_LoggerConfig_LoggerEntry_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoggerConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GlobalConfig_default_instance_),
};

const char descriptor_table_protodef_evol_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) =
    "\n\027evol/proto/config.proto\"\341\002\n\017AlgorithmC"
    "onfig\022\022\n\nlimit_type\030\001 \001(\t\022\023\n\013solver_type"
    "\030\002 \001(\t\0228\n\017instance_config\030\003 \001(\0132\037.Algori"
    "thmConfig.InstanceConfig\032\352\001\n\016InstanceCon"
    "fig\022\017\n\007omega_x\030\001 \001(\r\022\026\n\016heuristic_size\030\002"
    " \001(\r\022\026\n\016max_cache_size\030\003 \001(\r\022K\n\017sampling"
    "_config\030\004 \001(\01322.AlgorithmConfig.Instance"
    "Config.SamplingSizeConfig\032J\n\022SamplingSiz"
    "eConfig\022\022\n\nbase_count\030\001 \001(\004\022\021\n\tmax_steps"
    "\030\002 \001(\r\022\r\n\005scale\030\003 \001(\001\"F\n\023ResourceLimitCo"
    "nfig\022\027\n\017memory_limit_kb\030\001 \001(\r\022\026\n\016time_li"
    "mit_sec\030\002 \001(\r\",\n\022FitnessLimitConfig\022\026\n\016l"
    "owest_fitness\030\001 \001(\001\"%\n\017ConjLimitConfig\022\022"
    "\n\nlimit_type\030\001 \003(\t\"&\n\025UniformMutationCon"
    "fig\022\r\n\005scale\030\001 \001(\001\"#\n\023DoerrMutationConfi"
    "g\022\014\n\004beta\030\001 \001(\001\"A\n\021EAAlgorithmConfig\022\025\n\r"
    "mutation_type\030\001 \001(\t\022\025\n\rselector_type\030\002 \001"
    "(\t\"o\n\021GAAlgorithmConfig\022\025\n\rmutation_type"
    "\030\001 \001(\t\022\026\n\016crossover_type\030\002 \001(\t\022\025\n\rselect"
    "or_type\030\003 \001(\t\022\t\n\001q\030\004 \001(\r\022\t\n\001h\030\005 \001(\r\"h\n\020M"
    "inisatCliConfig\022\027\n\017verbosity_level\030\001 \001(\005"
    "\022\025\n\rpreprocessing\030\002 \001(\010\022\021\n\tcpu_limit\030\004 \001"
    "(\005\022\021\n\tmem_limit\030\005 \001(\005\"\346\001\n\014SolverConfig\022\021"
    "\n\tvar_decay\030\001 \001(\001\022\021\n\tcla_decay\030\002 \001(\001\022\020\n\010"
    "rnd_freq\030\003 \001(\001\022\020\n\010rnd_seed\030\004 \001(\001\022\022\n\nccmi"
    "n_mode\030\005 \001(\005\022\024\n\014phase_saving\030\006 \001(\005\022\020\n\010rn"
    "d_init\030\007 \001(\010\022\014\n\004luby\030\010 \001(\010\022\016\n\006rfirst\030\t \001"
    "(\005\022\014\n\004rinc\030\n \001(\001\022\017\n\007gc_frac\030\013 "
    "\001(\001\022\023\n\013min"
    "_learnts\030\014 \001(\005\"\356\001\n\020SimpSolverConfig\022\021\n\tu"
    "se_asymm\030\001 \001(\010\022\022\n\nuse_rcheck\030\002 \001(\010\022\020\n\010us"
    "e_elim\030\003 \001(\010\022\014\n\004grow\030\004 \001(\005\022\022\n\nclause_lim"
    "\030\005 \001(\005\022\027\n\017subsumption_lim\030\006 \001(\005\022\031\n\021simp_"
    "garbage_frac\030\007 \001(\001\022$\n\rsolver_config\030\010 \001("
    "\0132\r.SolverConfig\022%\n\ncli_config\030\t \001(\0132\021.M"
    "inisatCliConfig\";\n\017ParSolverConfig\022\023\n\013ma"
    "x_threads\030\001 \001(\r\022\023\n\013solver_type\030\002 \001(\t\"\221\001\n"
    "\014LoggerConfig\022*\n\007entries\030\001 \003(\0132\031.LoggerC"
    "onfig.LoggerEntry\032U\n\013LoggerEntry\022\032\n\010log_"
    "type\030\001 \001(\0162\010.LogType\022\031\n\021min_verbose_leve"
    "l\030\002 \001(\r\022\017\n\007every_n\030\003 \001(\r\"\340\004\n\014GlobalConfi"
    "g\022\026\n\016algorithm_type\030\024 \001(\t\022*\n\020algorithm_c"
    "onfig\030\001 \001(\0132\020.AlgorithmConfig\022/\n\023ea_algo"
    "rithm_config\030\014 \001(\0132\022.EAAlgorithmConfig\022/"
    "\n\023ga_algorithm_config\030\016 \001(\0132\022.GAAlgorith"
    "mConfig\0223\n\025resource_limit_config\030\002 \001(\0132\024"
    ".ResourceLimitConfig\0221\n\024fitness_limit_co"
    "nfig\030\003 \001(\0132\023.FitnessLimitConfig\022+\n\021conj_"
    "limit_config\030\005 \001(\0132\020.ConjLimitConfig\0227\n\027"
    "uniform_mutation_config\030\013 \001(\0132\026.UniformM"
    "utationConfig\0223\n\025doerr_mutation_config\030\r"
    " \001(\0132\024.DoerrMutationConfig\022\023\n\013solver_typ"
    "e\030\025 \001(\t\022-\n\022simp_solver_config\030\007 \001(\0132\021.Si"
    "mpSolverConfig\022+\n\021par_solver_config\030\026 \001("
    "\0132\020.ParSolverConfig\022\020\n\010rnd_seed\030\027 \001(\003\022$\n"
    "\rlogger_config\030\030 \001(\0132\r.LoggerConfig*_\n\007L"
    "ogType\022\010\n\004TIME\020\000\022\022\n\016HEURISTIC_VARS\020\001\022\021\n\r"
    "BEST_INSTANCE\020\002\022\021\n\rCURR_INSTANCE\020\003\022\020\n\014SO"
    "LVER_STATS\020\004b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_evol_2fproto_2fconfig_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_evol_2fproto_2fconfig_2eproto_sccs[17] = {
        &scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto
             .base,
        &scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_SolverConfig_evol_2fproto_2fconfig_2eproto.base,
        &scc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_evol_2fproto_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_evol_2fproto_2fconfig_2eproto = {
        false,
        false,
        descriptor_table_protodef_evol_2fproto_2fconfig_2eproto,
        "evol/proto/config.proto",
        2300,
        &descriptor_table_evol_2fproto_2fconfig_2eproto_once,
        descriptor_table_evol_2fproto_2fconfig_2eproto_sccs,
        descriptor_table_evol_2fproto_2fconfig_2eproto_deps,
        17,
        0,
        schemas,
        file_default_instances,
        TableStruct_evol_2fproto_2fconfig_2eproto::offsets,
        file_level_metadata_evol_2fproto_2fconfig_2eproto,
        17,
        file_level_enum_descriptors_evol_2fproto_2fconfig_2eproto,
        file_level_service_descriptors_evol_2fproto_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_evol_2fproto_2fconfig_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_evol_2fproto_2fconfig_2eproto)),
     true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_evol_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_evol_2fproto_2fconfig_2eproto[0];
}
bool LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

// ===================================================================

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::InitAsDefaultInstance() {}
class AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_Internal {
 public:
};

AlgorithmConfig_InstanceConfig_SamplingSizeConfig::
    AlgorithmConfig_InstanceConfig_SamplingSizeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
}
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::
    AlgorithmConfig_InstanceConfig_SamplingSizeConfig(
        const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &base_count_, &from.base_count_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
  // @@protoc_insertion_point(copy_constructor:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::SharedCtor() {
  ::memset(
      &base_count_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
}

AlgorithmConfig_InstanceConfig_SamplingSizeConfig::
    ~AlgorithmConfig_InstanceConfig_SamplingSizeConfig() {
  // @@protoc_insertion_point(destructor:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::ArenaDtor(void* object) {
  AlgorithmConfig_InstanceConfig_SamplingSizeConfig* _this =
      reinterpret_cast<AlgorithmConfig_InstanceConfig_SamplingSizeConfig*>(object);
  (void) _this;
}
void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::RegisterArenaDtor(
    ::PROTOBUF_NAMESPACE_ID::Arena*) {}
void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmConfig_InstanceConfig_SamplingSizeConfig&
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AlgorithmConfig_InstanceConfig_SamplingSizeConfig_evol_2fproto_2fconfig_2eproto
           .base);
  return *internal_default_instance();
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &base_count_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 base_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8*
AlgorithmConfig_InstanceConfig_SamplingSizeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 base_count = 1;
  if (this->base_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_base_count(), target);
  }

  // uint32 max_steps = 2;
  if (this->max_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_steps(), target);
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  return target;
}

size_t AlgorithmConfig_InstanceConfig_SamplingSizeConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 base_count = 1;
  if (this->base_count() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                          this->_internal_base_count());
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_steps = 2;
  if (this->max_steps() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_steps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmConfig_InstanceConfig_SamplingSizeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
    MergeFrom(*source);
  }
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::MergeFrom(
    const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_count() != 0) {
    _internal_set_base_count(from._internal_base_count());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.max_steps() != 0) {
    _internal_set_max_steps(from._internal_max_steps());
  }
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::CopyFrom(
    const AlgorithmConfig_InstanceConfig_SamplingSizeConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmConfig.InstanceConfig.SamplingSizeConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfig_InstanceConfig_SamplingSizeConfig::IsInitialized() const {
  return true;
}

void AlgorithmConfig_InstanceConfig_SamplingSizeConfig::InternalSwap(
    AlgorithmConfig_InstanceConfig_SamplingSizeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig_InstanceConfig_SamplingSizeConfig, max_steps_) +
      sizeof(AlgorithmConfig_InstanceConfig_SamplingSizeConfig::max_steps_) -
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig_InstanceConfig_SamplingSizeConfig, base_count_)>(
      reinterpret_cast<char*>(&base_count_), reinterpret_cast<char*>(&other->base_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmConfig_InstanceConfig_SamplingSizeConfig::GetMetadata()
    const {
  return GetMetadataStatic();
}

// ===================================================================

void AlgorithmConfig_InstanceConfig::InitAsDefaultInstance() {
  ::_AlgorithmConfig_InstanceConfig_default_instance_._instance.get_mutable()->sampling_config_ =
      const_cast<::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*>(
          ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig::internal_default_instance());
}
class AlgorithmConfig_InstanceConfig::_Internal {
 public:
  static const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig& sampling_config(
      const AlgorithmConfig_InstanceConfig* msg);
};

const ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig&
AlgorithmConfig_InstanceConfig::_Internal::sampling_config(
    const AlgorithmConfig_InstanceConfig* msg) {
  return *msg->sampling_config_;
}
AlgorithmConfig_InstanceConfig::AlgorithmConfig_InstanceConfig(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AlgorithmConfig.InstanceConfig)
}
AlgorithmConfig_InstanceConfig::AlgorithmConfig_InstanceConfig(
    const AlgorithmConfig_InstanceConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sampling_config()) {
    sampling_config_ =
        new ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig(*from.sampling_config_);
  } else {
    sampling_config_ = nullptr;
  }
  ::memcpy(
      &omega_x_, &from.omega_x_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&omega_x_)) +
          sizeof(max_cache_size_));
  // @@protoc_insertion_point(copy_constructor:AlgorithmConfig.InstanceConfig)
}

void AlgorithmConfig_InstanceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto.base);
  ::memset(
      &sampling_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&sampling_config_)) +
          sizeof(max_cache_size_));
}

AlgorithmConfig_InstanceConfig::~AlgorithmConfig_InstanceConfig() {
  // @@protoc_insertion_point(destructor:AlgorithmConfig.InstanceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmConfig_InstanceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete sampling_config_;
}

void AlgorithmConfig_InstanceConfig::ArenaDtor(void* object) {
  AlgorithmConfig_InstanceConfig* _this = reinterpret_cast<AlgorithmConfig_InstanceConfig*>(object);
  (void) _this;
}
void AlgorithmConfig_InstanceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void AlgorithmConfig_InstanceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmConfig_InstanceConfig& AlgorithmConfig_InstanceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AlgorithmConfig_InstanceConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void AlgorithmConfig_InstanceConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:AlgorithmConfig.InstanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sampling_config_ != nullptr) {
    delete sampling_config_;
  }
  sampling_config_ = nullptr;
  ::memset(
      &omega_x_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&omega_x_)) +
          sizeof(max_cache_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmConfig_InstanceConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 omega_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          omega_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heuristic_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          heuristic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cache_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AlgorithmConfig.InstanceConfig.SamplingSizeConfig sampling_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmConfig_InstanceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmConfig.InstanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 omega_x = 1;
  if (this->omega_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_omega_x(), target);
  }

  // uint32 heuristic_size = 2;
  if (this->heuristic_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_heuristic_size(), target);
  }

  // uint32 max_cache_size = 3;
  if (this->max_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_max_cache_size(), target);
  }

  // .AlgorithmConfig.InstanceConfig.SamplingSizeConfig sampling_config = 4;
  if (this->has_sampling_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::sampling_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmConfig.InstanceConfig)
  return target;
}

size_t AlgorithmConfig_InstanceConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:AlgorithmConfig.InstanceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AlgorithmConfig.InstanceConfig.SamplingSizeConfig sampling_config = 4;
  if (this->has_sampling_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*sampling_config_);
  }

  // uint32 omega_x = 1;
  if (this->omega_x() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_omega_x());
  }

  // uint32 heuristic_size = 2;
  if (this->heuristic_size() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_heuristic_size());
  }

  // uint32 max_cache_size = 3;
  if (this->max_cache_size() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_cache_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmConfig_InstanceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:AlgorithmConfig.InstanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmConfig_InstanceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmConfig_InstanceConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:AlgorithmConfig.InstanceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:AlgorithmConfig.InstanceConfig)
    MergeFrom(*source);
  }
}

void AlgorithmConfig_InstanceConfig::MergeFrom(const AlgorithmConfig_InstanceConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmConfig.InstanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sampling_config()) {
    _internal_mutable_sampling_config()
        ->::AlgorithmConfig_InstanceConfig_SamplingSizeConfig::MergeFrom(
            from._internal_sampling_config());
  }
  if (from.omega_x() != 0) {
    _internal_set_omega_x(from._internal_omega_x());
  }
  if (from.heuristic_size() != 0) {
    _internal_set_heuristic_size(from._internal_heuristic_size());
  }
  if (from.max_cache_size() != 0) {
    _internal_set_max_cache_size(from._internal_max_cache_size());
  }
}

void AlgorithmConfig_InstanceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:AlgorithmConfig.InstanceConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void AlgorithmConfig_InstanceConfig::CopyFrom(const AlgorithmConfig_InstanceConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmConfig.InstanceConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfig_InstanceConfig::IsInitialized() const {
  return true;
}

void AlgorithmConfig_InstanceConfig::InternalSwap(AlgorithmConfig_InstanceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig_InstanceConfig, max_cache_size_) +
      sizeof(AlgorithmConfig_InstanceConfig::max_cache_size_) -
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig_InstanceConfig, sampling_config_)>(
      reinterpret_cast<char*>(&sampling_config_),
      reinterpret_cast<char*>(&other->sampling_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmConfig_InstanceConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AlgorithmConfig::InitAsDefaultInstance() {
  ::_AlgorithmConfig_default_instance_._instance.get_mutable()->instance_config_ =
      const_cast<::AlgorithmConfig_InstanceConfig*>(
          ::AlgorithmConfig_InstanceConfig::internal_default_instance());
}
class AlgorithmConfig::_Internal {
 public:
  static const ::AlgorithmConfig_InstanceConfig& instance_config(const AlgorithmConfig* msg);
};

const ::AlgorithmConfig_InstanceConfig& AlgorithmConfig::_Internal::instance_config(
    const AlgorithmConfig* msg) {
  return *msg->instance_config_;
}
AlgorithmConfig::AlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AlgorithmConfig)
}
AlgorithmConfig::AlgorithmConfig(const AlgorithmConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_limit_type().empty()) {
    limit_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_limit_type(), GetArena());
  }
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solver_type().empty()) {
    solver_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_solver_type(), GetArena());
  }
  if (from._internal_has_instance_config()) {
    instance_config_ = new ::AlgorithmConfig_InstanceConfig(*from.instance_config_);
  } else {
    instance_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AlgorithmConfig)
}

void AlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_config_ = nullptr;
}

AlgorithmConfig::~AlgorithmConfig() {
  // @@protoc_insertion_point(destructor:AlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  limit_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solver_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete instance_config_;
}

void AlgorithmConfig::ArenaDtor(void* object) {
  AlgorithmConfig* _this = reinterpret_cast<AlgorithmConfig*>(object);
  (void) _this;
}
void AlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void AlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmConfig& AlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void AlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:AlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && instance_config_ != nullptr) {
    delete instance_config_;
  }
  instance_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string limit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_limit_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlgorithmConfig.limit_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string solver_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_solver_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlgorithmConfig.solver_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AlgorithmConfig.InstanceConfig instance_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string limit_type = 1;
  if (this->limit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_limit_type().data(),
        static_cast<int>(this->_internal_limit_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "AlgorithmConfig.limit_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_limit_type(), target);
  }

  // string solver_type = 2;
  if (this->solver_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_solver_type().data(),
        static_cast<int>(this->_internal_solver_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgorithmConfig.solver_type");
    target = stream->WriteStringMaybeAliased(2, this->_internal_solver_type(), target);
  }

  // .AlgorithmConfig.InstanceConfig instance_config = 3;
  if (this->has_instance_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::instance_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmConfig)
  return target;
}

size_t AlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:AlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string limit_type = 1;
  if (this->limit_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_limit_type());
  }

  // string solver_type = 2;
  if (this->solver_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_solver_type());
  }

  // .AlgorithmConfig.InstanceConfig instance_config = 3;
  if (this->has_instance_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*instance_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:AlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:AlgorithmConfig)
    MergeFrom(*source);
  }
}

void AlgorithmConfig::MergeFrom(const AlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit_type().size() > 0) {
    _internal_set_limit_type(from._internal_limit_type());
  }
  if (from.solver_type().size() > 0) {
    _internal_set_solver_type(from._internal_solver_type());
  }
  if (from.has_instance_config()) {
    _internal_mutable_instance_config()->::AlgorithmConfig_InstanceConfig::MergeFrom(
        from._internal_instance_config());
  }
}

void AlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:AlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void AlgorithmConfig::CopyFrom(const AlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfig::IsInitialized() const {
  return true;
}

void AlgorithmConfig::InternalSwap(AlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  limit_type_.Swap(
      &other->limit_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  solver_type_.Swap(
      &other->solver_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  swap(instance_config_, other->instance_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ResourceLimitConfig::InitAsDefaultInstance() {}
class ResourceLimitConfig::_Internal {
 public:
};

ResourceLimitConfig::ResourceLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResourceLimitConfig)
}
ResourceLimitConfig::ResourceLimitConfig(const ResourceLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &memory_limit_kb_, &from.memory_limit_kb_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
  // @@protoc_insertion_point(copy_constructor:ResourceLimitConfig)
}

void ResourceLimitConfig::SharedCtor() {
  ::memset(
      &memory_limit_kb_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
}

ResourceLimitConfig::~ResourceLimitConfig() {
  // @@protoc_insertion_point(destructor:ResourceLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceLimitConfig::ArenaDtor(void* object) {
  ResourceLimitConfig* _this = reinterpret_cast<ResourceLimitConfig*>(object);
  (void) _this;
}
void ResourceLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ResourceLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLimitConfig& ResourceLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ResourceLimitConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void ResourceLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ResourceLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &memory_limit_kb_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 memory_limit_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memory_limit_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time_limit_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_limit_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 memory_limit_kb = 1;
  if (this->memory_limit_kb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_memory_limit_kb(), target);
  }

  // uint32 time_limit_sec = 2;
  if (this->time_limit_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_time_limit_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceLimitConfig)
  return target;
}

size_t ResourceLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ResourceLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 memory_limit_kb = 1;
  if (this->memory_limit_kb() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_memory_limit_kb());
  }

  // uint32 time_limit_sec = 2;
  if (this->time_limit_sec() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_time_limit_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ResourceLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResourceLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ResourceLimitConfig)
    MergeFrom(*source);
  }
}

void ResourceLimitConfig::MergeFrom(const ResourceLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ResourceLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memory_limit_kb() != 0) {
    _internal_set_memory_limit_kb(from._internal_memory_limit_kb());
  }
  if (from.time_limit_sec() != 0) {
    _internal_set_time_limit_sec(from._internal_time_limit_sec());
  }
}

void ResourceLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ResourceLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ResourceLimitConfig::CopyFrom(const ResourceLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ResourceLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimitConfig::IsInitialized() const {
  return true;
}

void ResourceLimitConfig::InternalSwap(ResourceLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceLimitConfig, time_limit_sec_) +
      sizeof(ResourceLimitConfig::time_limit_sec_) -
      PROTOBUF_FIELD_OFFSET(ResourceLimitConfig, memory_limit_kb_)>(
      reinterpret_cast<char*>(&memory_limit_kb_),
      reinterpret_cast<char*>(&other->memory_limit_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void FitnessLimitConfig::InitAsDefaultInstance() {}
class FitnessLimitConfig::_Internal {
 public:
};

FitnessLimitConfig::FitnessLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FitnessLimitConfig)
}
FitnessLimitConfig::FitnessLimitConfig(const FitnessLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lowest_fitness_ = from.lowest_fitness_;
  // @@protoc_insertion_point(copy_constructor:FitnessLimitConfig)
}

void FitnessLimitConfig::SharedCtor() {
  lowest_fitness_ = 0;
}

FitnessLimitConfig::~FitnessLimitConfig() {
  // @@protoc_insertion_point(destructor:FitnessLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FitnessLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FitnessLimitConfig::ArenaDtor(void* object) {
  FitnessLimitConfig* _this = reinterpret_cast<FitnessLimitConfig*>(object);
  (void) _this;
}
void FitnessLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void FitnessLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FitnessLimitConfig& FitnessLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FitnessLimitConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void FitnessLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:FitnessLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lowest_fitness_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitnessLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lowest_fitness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lowest_fitness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FitnessLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FitnessLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lowest_fitness = 1;
  if (!(this->lowest_fitness() <= 0 && this->lowest_fitness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_lowest_fitness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FitnessLimitConfig)
  return target;
}

size_t FitnessLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:FitnessLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lowest_fitness = 1;
  if (!(this->lowest_fitness() <= 0 && this->lowest_fitness() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FitnessLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:FitnessLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FitnessLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FitnessLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:FitnessLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:FitnessLimitConfig)
    MergeFrom(*source);
  }
}

void FitnessLimitConfig::MergeFrom(const FitnessLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:FitnessLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lowest_fitness() <= 0 && from.lowest_fitness() >= 0)) {
    _internal_set_lowest_fitness(from._internal_lowest_fitness());
  }
}

void FitnessLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:FitnessLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FitnessLimitConfig::CopyFrom(const FitnessLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:FitnessLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FitnessLimitConfig::IsInitialized() const {
  return true;
}

void FitnessLimitConfig::InternalSwap(FitnessLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lowest_fitness_, other->lowest_fitness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitnessLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ConjLimitConfig::InitAsDefaultInstance() {}
class ConjLimitConfig::_Internal {
 public:
};

ConjLimitConfig::ConjLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), limit_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConjLimitConfig)
}
ConjLimitConfig::ConjLimitConfig(const ConjLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), limit_type_(from.limit_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConjLimitConfig)
}

void ConjLimitConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto.base);
}

ConjLimitConfig::~ConjLimitConfig() {
  // @@protoc_insertion_point(destructor:ConjLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConjLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConjLimitConfig::ArenaDtor(void* object) {
  ConjLimitConfig* _this = reinterpret_cast<ConjLimitConfig*>(object);
  (void) _this;
}
void ConjLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ConjLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConjLimitConfig& ConjLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ConjLimitConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void ConjLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ConjLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_type_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConjLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string limit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_limit_type();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConjLimitConfig.limit_type"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConjLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConjLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string limit_type = 1;
  for (int i = 0, n = this->_internal_limit_type_size(); i < n; i++) {
    const auto& s = this->_internal_limit_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ConjLimitConfig.limit_type");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConjLimitConfig)
  return target;
}

size_t ConjLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ConjLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string limit_type = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(limit_type_.size());
  for (int i = 0, n = limit_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(limit_type_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConjLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ConjLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConjLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConjLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConjLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ConjLimitConfig)
    MergeFrom(*source);
  }
}

void ConjLimitConfig::MergeFrom(const ConjLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ConjLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limit_type_.MergeFrom(from.limit_type_);
}

void ConjLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ConjLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ConjLimitConfig::CopyFrom(const ConjLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ConjLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ConjLimitConfig::IsInitialized() const {
  return true;
}

void ConjLimitConfig::InternalSwap(ConjLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  limit_type_.InternalSwap(&other->limit_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConjLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void UniformMutationConfig::InitAsDefaultInstance() {}
class UniformMutationConfig::_Internal {
 public:
};

UniformMutationConfig::UniformMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UniformMutationConfig)
}
UniformMutationConfig::UniformMutationConfig(const UniformMutationConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:UniformMutationConfig)
}

void UniformMutationConfig::SharedCtor() {
  scale_ = 0;
}

UniformMutationConfig::~UniformMutationConfig() {
  // @@protoc_insertion_point(destructor:UniformMutationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniformMutationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniformMutationConfig::ArenaDtor(void* object) {
  UniformMutationConfig* _this = reinterpret_cast<UniformMutationConfig*>(object);
  (void) _this;
}
void UniformMutationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void UniformMutationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniformMutationConfig& UniformMutationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UniformMutationConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void UniformMutationConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:UniformMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniformMutationConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniformMutationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UniformMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UniformMutationConfig)
  return target;
}

size_t UniformMutationConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:UniformMutationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniformMutationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:UniformMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UniformMutationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniformMutationConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:UniformMutationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:UniformMutationConfig)
    MergeFrom(*source);
  }
}

void UniformMutationConfig::MergeFrom(const UniformMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:UniformMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void UniformMutationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:UniformMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UniformMutationConfig::CopyFrom(const UniformMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:UniformMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UniformMutationConfig::IsInitialized() const {
  return true;
}

void UniformMutationConfig::InternalSwap(UniformMutationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniformMutationConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void DoerrMutationConfig::InitAsDefaultInstance() {}
class DoerrMutationConfig::_Internal {
 public:
};

DoerrMutationConfig::DoerrMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DoerrMutationConfig)
}
DoerrMutationConfig::DoerrMutationConfig(const DoerrMutationConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beta_ = from.beta_;
  // @@protoc_insertion_point(copy_constructor:DoerrMutationConfig)
}

void DoerrMutationConfig::SharedCtor() {
  beta_ = 0;
}

DoerrMutationConfig::~DoerrMutationConfig() {
  // @@protoc_insertion_point(destructor:DoerrMutationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoerrMutationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoerrMutationConfig::ArenaDtor(void* object) {
  DoerrMutationConfig* _this = reinterpret_cast<DoerrMutationConfig*>(object);
  (void) _this;
}
void DoerrMutationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void DoerrMutationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoerrMutationConfig& DoerrMutationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DoerrMutationConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void DoerrMutationConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:DoerrMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoerrMutationConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double beta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoerrMutationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoerrMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoerrMutationConfig)
  return target;
}

size_t DoerrMutationConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:DoerrMutationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoerrMutationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:DoerrMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DoerrMutationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoerrMutationConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:DoerrMutationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:DoerrMutationConfig)
    MergeFrom(*source);
  }
}

void DoerrMutationConfig::MergeFrom(const DoerrMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:DoerrMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void DoerrMutationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:DoerrMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DoerrMutationConfig::CopyFrom(const DoerrMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:DoerrMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DoerrMutationConfig::IsInitialized() const {
  return true;
}

void DoerrMutationConfig::InternalSwap(DoerrMutationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(beta_, other->beta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoerrMutationConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void EAAlgorithmConfig::InitAsDefaultInstance() {}
class EAAlgorithmConfig::_Internal {
 public:
};

EAAlgorithmConfig::EAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EAAlgorithmConfig)
}
EAAlgorithmConfig::EAAlgorithmConfig(const EAAlgorithmConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mutation_type().empty()) {
    mutation_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_mutation_type(), GetArena());
  }
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selector_type().empty()) {
    selector_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_selector_type(), GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:EAAlgorithmConfig)
}

void EAAlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EAAlgorithmConfig::~EAAlgorithmConfig() {
  // @@protoc_insertion_point(destructor:EAAlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EAAlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mutation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selector_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EAAlgorithmConfig::ArenaDtor(void* object) {
  EAAlgorithmConfig* _this = reinterpret_cast<EAAlgorithmConfig*>(object);
  (void) _this;
}
void EAAlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void EAAlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EAAlgorithmConfig& EAAlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_EAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void EAAlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:EAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EAAlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mutation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mutation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "EAAlgorithmConfig.mutation_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string selector_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_selector_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "EAAlgorithmConfig.selector_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EAAlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_mutation_type().data(),
        static_cast<int>(this->_internal_mutation_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "EAAlgorithmConfig.mutation_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_mutation_type(), target);
  }

  // string selector_type = 2;
  if (this->selector_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_selector_type().data(),
        static_cast<int>(this->_internal_selector_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "EAAlgorithmConfig.selector_type");
    target = stream->WriteStringMaybeAliased(2, this->_internal_selector_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EAAlgorithmConfig)
  return target;
}

size_t EAAlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:EAAlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_mutation_type());
  }

  // string selector_type = 2;
  if (this->selector_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_selector_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EAAlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:EAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EAAlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EAAlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:EAAlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:EAAlgorithmConfig)
    MergeFrom(*source);
  }
}

void EAAlgorithmConfig::MergeFrom(const EAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:EAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mutation_type().size() > 0) {
    _internal_set_mutation_type(from._internal_mutation_type());
  }
  if (from.selector_type().size() > 0) {
    _internal_set_selector_type(from._internal_selector_type());
  }
}

void EAAlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:EAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void EAAlgorithmConfig::CopyFrom(const EAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:EAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool EAAlgorithmConfig::IsInitialized() const {
  return true;
}

void EAAlgorithmConfig::InternalSwap(EAAlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mutation_type_.Swap(
      &other->mutation_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  selector_type_.Swap(
      &other->selector_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EAAlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GAAlgorithmConfig::InitAsDefaultInstance() {}
class GAAlgorithmConfig::_Internal {
 public:
};

GAAlgorithmConfig::GAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GAAlgorithmConfig)
}
GAAlgorithmConfig::GAAlgorithmConfig(const GAAlgorithmConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mutation_type().empty()) {
    mutation_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_mutation_type(), GetArena());
  }
  crossover_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_crossover_type().empty()) {
    crossover_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_crossover_type(), GetArena());
  }
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selector_type().empty()) {
    selector_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_selector_type(), GetArena());
  }
  ::memcpy(
      &q_, &from.q_,
      static_cast<size_t>(reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&q_)) +
          sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:GAAlgorithmConfig)
}

void GAAlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossover_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &q_, 0,
      static_cast<size_t>(reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&q_)) +
          sizeof(h_));
}

GAAlgorithmConfig::~GAAlgorithmConfig() {
  // @@protoc_insertion_point(destructor:GAAlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GAAlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mutation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  crossover_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selector_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GAAlgorithmConfig::ArenaDtor(void* object) {
  GAAlgorithmConfig* _this = reinterpret_cast<GAAlgorithmConfig*>(object);
  (void) _this;
}
void GAAlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void GAAlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GAAlgorithmConfig& GAAlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GAAlgorithmConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void GAAlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:GAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  crossover_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(
      &q_, 0,
      static_cast<size_t>(reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&q_)) +
          sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GAAlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mutation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mutation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "GAAlgorithmConfig.mutation_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string crossover_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_crossover_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "GAAlgorithmConfig.crossover_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string selector_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_selector_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "GAAlgorithmConfig.selector_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 q = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GAAlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_mutation_type().data(),
        static_cast<int>(this->_internal_mutation_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GAAlgorithmConfig.mutation_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_mutation_type(), target);
  }

  // string crossover_type = 2;
  if (this->crossover_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_crossover_type().data(),
        static_cast<int>(this->_internal_crossover_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GAAlgorithmConfig.crossover_type");
    target = stream->WriteStringMaybeAliased(2, this->_internal_crossover_type(), target);
  }

  // string selector_type = 3;
  if (this->selector_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_selector_type().data(),
        static_cast<int>(this->_internal_selector_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GAAlgorithmConfig.selector_type");
    target = stream->WriteStringMaybeAliased(3, this->_internal_selector_type(), target);
  }

  // uint32 q = 4;
  if (this->q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_q(), target);
  }

  // uint32 h = 5;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GAAlgorithmConfig)
  return target;
}

size_t GAAlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:GAAlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_mutation_type());
  }

  // string crossover_type = 2;
  if (this->crossover_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_crossover_type());
  }

  // string selector_type = 3;
  if (this->selector_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_selector_type());
  }

  // uint32 q = 4;
  if (this->q() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->_internal_q());
  }

  // uint32 h = 5;
  if (this->h() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->_internal_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GAAlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:GAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GAAlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GAAlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAAlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:GAAlgorithmConfig)
    MergeFrom(*source);
  }
}

void GAAlgorithmConfig::MergeFrom(const GAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:GAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mutation_type().size() > 0) {
    _internal_set_mutation_type(from._internal_mutation_type());
  }
  if (from.crossover_type().size() > 0) {
    _internal_set_crossover_type(from._internal_crossover_type());
  }
  if (from.selector_type().size() > 0) {
    _internal_set_selector_type(from._internal_selector_type());
  }
  if (from.q() != 0) {
    _internal_set_q(from._internal_q());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
}

void GAAlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:GAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void GAAlgorithmConfig::CopyFrom(const GAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:GAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool GAAlgorithmConfig::IsInitialized() const {
  return true;
}

void GAAlgorithmConfig::InternalSwap(GAAlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mutation_type_.Swap(
      &other->mutation_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  crossover_type_.Swap(
      &other->crossover_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  selector_type_.Swap(
      &other->selector_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GAAlgorithmConfig, h_) + sizeof(GAAlgorithmConfig::h_) -
      PROTOBUF_FIELD_OFFSET(GAAlgorithmConfig, q_)>(
      reinterpret_cast<char*>(&q_), reinterpret_cast<char*>(&other->q_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GAAlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MinisatCliConfig::InitAsDefaultInstance() {}
class MinisatCliConfig::_Internal {
 public:
};

MinisatCliConfig::MinisatCliConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MinisatCliConfig)
}
MinisatCliConfig::MinisatCliConfig(const MinisatCliConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &verbosity_level_, &from.verbosity_level_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
  // @@protoc_insertion_point(copy_constructor:MinisatCliConfig)
}

void MinisatCliConfig::SharedCtor() {
  ::memset(
      &verbosity_level_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
}

MinisatCliConfig::~MinisatCliConfig() {
  // @@protoc_insertion_point(destructor:MinisatCliConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinisatCliConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MinisatCliConfig::ArenaDtor(void* object) {
  MinisatCliConfig* _this = reinterpret_cast<MinisatCliConfig*>(object);
  (void) _this;
}
void MinisatCliConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void MinisatCliConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinisatCliConfig& MinisatCliConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MinisatCliConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void MinisatCliConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:MinisatCliConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &verbosity_level_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinisatCliConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 verbosity_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          verbosity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool preprocessing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cpu_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cpu_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mem_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinisatCliConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MinisatCliConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 verbosity_level = 1;
  if (this->verbosity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_verbosity_level(), target);
  }

  // bool preprocessing = 2;
  if (this->preprocessing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        2, this->_internal_preprocessing(), target);
  }

  // int32 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_cpu_limit(), target);
  }

  // int32 mem_limit = 5;
  if (this->mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_mem_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MinisatCliConfig)
  return target;
}

size_t MinisatCliConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:MinisatCliConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 verbosity_level = 1;
  if (this->verbosity_level() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_verbosity_level());
  }

  // bool preprocessing = 2;
  if (this->preprocessing() != 0) {
    total_size += 1 + 1;
  }

  // int32 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_cpu_limit());
  }

  // int32 mem_limit = 5;
  if (this->mem_limit() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_mem_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinisatCliConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:MinisatCliConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MinisatCliConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinisatCliConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:MinisatCliConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:MinisatCliConfig)
    MergeFrom(*source);
  }
}

void MinisatCliConfig::MergeFrom(const MinisatCliConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:MinisatCliConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.verbosity_level() != 0) {
    _internal_set_verbosity_level(from._internal_verbosity_level());
  }
  if (from.preprocessing() != 0) {
    _internal_set_preprocessing(from._internal_preprocessing());
  }
  if (from.cpu_limit() != 0) {
    _internal_set_cpu_limit(from._internal_cpu_limit());
  }
  if (from.mem_limit() != 0) {
    _internal_set_mem_limit(from._internal_mem_limit());
  }
}

void MinisatCliConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:MinisatCliConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MinisatCliConfig::CopyFrom(const MinisatCliConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:MinisatCliConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MinisatCliConfig::IsInitialized() const {
  return true;
}

void MinisatCliConfig::InternalSwap(MinisatCliConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinisatCliConfig, mem_limit_) + sizeof(MinisatCliConfig::mem_limit_) -
      PROTOBUF_FIELD_OFFSET(MinisatCliConfig, verbosity_level_)>(
      reinterpret_cast<char*>(&verbosity_level_),
      reinterpret_cast<char*>(&other->verbosity_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinisatCliConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SolverConfig::InitAsDefaultInstance() {}
class SolverConfig::_Internal {
 public:
};

SolverConfig::SolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SolverConfig)
}
SolverConfig::SolverConfig(const SolverConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &var_decay_, &from.var_decay_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
  // @@protoc_insertion_point(copy_constructor:SolverConfig)
}

void SolverConfig::SharedCtor() {
  ::memset(
      &var_decay_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
}

SolverConfig::~SolverConfig() {
  // @@protoc_insertion_point(destructor:SolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SolverConfig::ArenaDtor(void* object) {
  SolverConfig* _this = reinterpret_cast<SolverConfig*>(object);
  (void) _this;
}
void SolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverConfig& SolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SolverConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void SolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &var_decay_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double var_decay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          var_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cla_decay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cla_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rnd_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rnd_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rnd_seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rnd_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ccmin_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ccmin_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 phase_saving = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          phase_saving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rnd_init = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rnd_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool luby = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          luby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rfirst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rinc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          rinc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gc_frac = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          gc_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 min_learnts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          min_learnts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double var_decay = 1;
  if (!(this->var_decay() <= 0 && this->var_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_var_decay(), target);
  }

  // double cla_decay = 2;
  if (!(this->cla_decay() <= 0 && this->cla_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cla_decay(), target);
  }

  // double rnd_freq = 3;
  if (!(this->rnd_freq() <= 0 && this->rnd_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_rnd_freq(), target);
  }

  // double rnd_seed = 4;
  if (!(this->rnd_seed() <= 0 && this->rnd_seed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_rnd_seed(), target);
  }

  // int32 ccmin_mode = 5;
  if (this->ccmin_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_ccmin_mode(), target);
  }

  // int32 phase_saving = 6;
  if (this->phase_saving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_phase_saving(), target);
  }

  // bool rnd_init = 7;
  if (this->rnd_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        7, this->_internal_rnd_init(), target);
  }

  // bool luby = 8;
  if (this->luby() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        8, this->_internal_luby(), target);
  }

  // int32 rfirst = 9;
  if (this->rfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_rfirst(), target);
  }

  // double rinc = 10;
  if (!(this->rinc() <= 0 && this->rinc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_rinc(), target);
  }

  // double gc_frac = 11;
  if (!(this->gc_frac() <= 0 && this->gc_frac() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_gc_frac(), target);
  }

  // int32 min_learnts = 12;
  if (this->min_learnts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_min_learnts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolverConfig)
  return target;
}

size_t SolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double var_decay = 1;
  if (!(this->var_decay() <= 0 && this->var_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double cla_decay = 2;
  if (!(this->cla_decay() <= 0 && this->cla_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double rnd_freq = 3;
  if (!(this->rnd_freq() <= 0 && this->rnd_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double rnd_seed = 4;
  if (!(this->rnd_seed() <= 0 && this->rnd_seed() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ccmin_mode = 5;
  if (this->ccmin_mode() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_ccmin_mode());
  }

  // int32 phase_saving = 6;
  if (this->phase_saving() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_phase_saving());
  }

  // bool rnd_init = 7;
  if (this->rnd_init() != 0) {
    total_size += 1 + 1;
  }

  // bool luby = 8;
  if (this->luby() != 0) {
    total_size += 1 + 1;
  }

  // int32 rfirst = 9;
  if (this->rfirst() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_rfirst());
  }

  // double rinc = 10;
  if (!(this->rinc() <= 0 && this->rinc() >= 0)) {
    total_size += 1 + 8;
  }

  // double gc_frac = 11;
  if (!(this->gc_frac() <= 0 && this->gc_frac() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 min_learnts = 12;
  if (this->min_learnts() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_min_learnts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SolverConfig)
    MergeFrom(*source);
  }
}

void SolverConfig::MergeFrom(const SolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.var_decay() <= 0 && from.var_decay() >= 0)) {
    _internal_set_var_decay(from._internal_var_decay());
  }
  if (!(from.cla_decay() <= 0 && from.cla_decay() >= 0)) {
    _internal_set_cla_decay(from._internal_cla_decay());
  }
  if (!(from.rnd_freq() <= 0 && from.rnd_freq() >= 0)) {
    _internal_set_rnd_freq(from._internal_rnd_freq());
  }
  if (!(from.rnd_seed() <= 0 && from.rnd_seed() >= 0)) {
    _internal_set_rnd_seed(from._internal_rnd_seed());
  }
  if (from.ccmin_mode() != 0) {
    _internal_set_ccmin_mode(from._internal_ccmin_mode());
  }
  if (from.phase_saving() != 0) {
    _internal_set_phase_saving(from._internal_phase_saving());
  }
  if (from.rnd_init() != 0) {
    _internal_set_rnd_init(from._internal_rnd_init());
  }
  if (from.luby() != 0) {
    _internal_set_luby(from._internal_luby());
  }
  if (from.rfirst() != 0) {
    _internal_set_rfirst(from._internal_rfirst());
  }
  if (!(from.rinc() <= 0 && from.rinc() >= 0)) {
    _internal_set_rinc(from._internal_rinc());
  }
  if (!(from.gc_frac() <= 0 && from.gc_frac() >= 0)) {
    _internal_set_gc_frac(from._internal_gc_frac());
  }
  if (from.min_learnts() != 0) {
    _internal_set_min_learnts(from._internal_min_learnts());
  }
}

void SolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SolverConfig::CopyFrom(const SolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SolverConfig::IsInitialized() const {
  return true;
}

void SolverConfig::InternalSwap(SolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolverConfig, min_learnts_) + sizeof(SolverConfig::min_learnts_) -
      PROTOBUF_FIELD_OFFSET(SolverConfig, var_decay_)>(
      reinterpret_cast<char*>(&var_decay_), reinterpret_cast<char*>(&other->var_decay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SimpSolverConfig::InitAsDefaultInstance() {
  ::_SimpSolverConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
  ::_SimpSolverConfig_default_instance_._instance.get_mutable()->cli_config_ =
      const_cast<::MinisatCliConfig*>(::MinisatCliConfig::internal_default_instance());
}
class SimpSolverConfig::_Internal {
 public:
  static const ::SolverConfig& solver_config(const SimpSolverConfig* msg);
  static const ::MinisatCliConfig& cli_config(const SimpSolverConfig* msg);
};

const ::SolverConfig& SimpSolverConfig::_Internal::solver_config(const SimpSolverConfig* msg) {
  return *msg->solver_config_;
}
const ::MinisatCliConfig& SimpSolverConfig::_Internal::cli_config(const SimpSolverConfig* msg) {
  return *msg->cli_config_;
}
SimpSolverConfig::SimpSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimpSolverConfig)
}
SimpSolverConfig::SimpSolverConfig(const SimpSolverConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  if (from._internal_has_cli_config()) {
    cli_config_ = new ::MinisatCliConfig(*from.cli_config_);
  } else {
    cli_config_ = nullptr;
  }
  ::memcpy(
      &use_asymm_, &from.use_asymm_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) - reinterpret_cast<char*>(&use_asymm_)) +
          sizeof(simp_garbage_frac_));
  // @@protoc_insertion_point(copy_constructor:SimpSolverConfig)
}

void SimpSolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto.base);
  ::memset(
      &solver_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) - reinterpret_cast<char*>(&solver_config_)) +
          sizeof(simp_garbage_frac_));
}

SimpSolverConfig::~SimpSolverConfig() {
  // @@protoc_insertion_point(destructor:SimpSolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete solver_config_;
  if (this != internal_default_instance())
    delete cli_config_;
}

void SimpSolverConfig::ArenaDtor(void* object) {
  SimpSolverConfig* _this = reinterpret_cast<SimpSolverConfig*>(object);
  (void) _this;
}
void SimpSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SimpSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpSolverConfig& SimpSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SimpSolverConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void SimpSolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SimpSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  if (GetArena() == nullptr && cli_config_ != nullptr) {
    delete cli_config_;
  }
  cli_config_ = nullptr;
  ::memset(
      &use_asymm_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) - reinterpret_cast<char*>(&use_asymm_)) +
          sizeof(simp_garbage_frac_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpSolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_asymm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_asymm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_rcheck = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_rcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_elim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_elim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clause_lim = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clause_lim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subsumption_lim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          subsumption_lim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double simp_garbage_frac = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          simp_garbage_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .SolverConfig solver_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MinisatCliConfig cli_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cli_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_asymm = 1;
  if (this->use_asymm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        1, this->_internal_use_asymm(), target);
  }

  // bool use_rcheck = 2;
  if (this->use_rcheck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        2, this->_internal_use_rcheck(), target);
  }

  // bool use_elim = 3;
  if (this->use_elim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        3, this->_internal_use_elim(), target);
  }

  // int32 grow = 4;
  if (this->grow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_grow(), target);
  }

  // int32 clause_lim = 5;
  if (this->clause_lim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_clause_lim(), target);
  }

  // int32 subsumption_lim = 6;
  if (this->subsumption_lim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_subsumption_lim(), target);
  }

  // double simp_garbage_frac = 7;
  if (!(this->simp_garbage_frac() <= 0 && this->simp_garbage_frac() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_simp_garbage_frac(), target);
  }

  // .SolverConfig solver_config = 8;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::solver_config(this), target, stream);
  }

  // .MinisatCliConfig cli_config = 9;
  if (this->has_cli_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::cli_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpSolverConfig)
  return target;
}

size_t SimpSolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SimpSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SolverConfig solver_config = 8;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  // .MinisatCliConfig cli_config = 9;
  if (this->has_cli_config()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*cli_config_);
  }

  // bool use_asymm = 1;
  if (this->use_asymm() != 0) {
    total_size += 1 + 1;
  }

  // bool use_rcheck = 2;
  if (this->use_rcheck() != 0) {
    total_size += 1 + 1;
  }

  // bool use_elim = 3;
  if (this->use_elim() != 0) {
    total_size += 1 + 1;
  }

  // int32 grow = 4;
  if (this->grow() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_grow());
  }

  // int32 clause_lim = 5;
  if (this->clause_lim() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_clause_lim());
  }

  // int32 subsumption_lim = 6;
  if (this->subsumption_lim() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_subsumption_lim());
  }

  // double simp_garbage_frac = 7;
  if (!(this->simp_garbage_frac() <= 0 && this->simp_garbage_frac() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SimpSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpSolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimpSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SimpSolverConfig)
    MergeFrom(*source);
  }
}

void SimpSolverConfig::MergeFrom(const SimpSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SimpSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
  if (from.has_cli_config()) {
    _internal_mutable_cli_config()->::MinisatCliConfig::MergeFrom(from._internal_cli_config());
  }
  if (from.use_asymm() != 0) {
    _internal_set_use_asymm(from._internal_use_asymm());
  }
  if (from.use_rcheck() != 0) {
    _internal_set_use_rcheck(from._internal_use_rcheck());
  }
  if (from.use_elim() != 0) {
    _internal_set_use_elim(from._internal_use_elim());
  }
  if (from.grow() != 0) {
    _internal_set_grow(from._internal_grow());
  }
  if (from.clause_lim() != 0) {
    _internal_set_clause_lim(from._internal_clause_lim());
  }
  if (from.subsumption_lim() != 0) {
    _internal_set_subsumption_lim(from._internal_subsumption_lim());
  }
  if (!(from.simp_garbage_frac() <= 0 && from.simp_garbage_frac() >= 0)) {
    _internal_set_simp_garbage_frac(from._internal_simp_garbage_frac());
  }
}

void SimpSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SimpSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SimpSolverConfig::CopyFrom(const SimpSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SimpSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SimpSolverConfig::IsInitialized() const {
  return true;
}

void SimpSolverConfig::InternalSwap(SimpSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpSolverConfig, simp_garbage_frac_) +
      sizeof(SimpSolverConfig::simp_garbage_frac_) -
      PROTOBUF_FIELD_OFFSET(SimpSolverConfig, solver_config_)>(
      reinterpret_cast<char*>(&solver_config_), reinterpret_cast<char*>(&other->solver_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ParSolverConfig::InitAsDefaultInstance() {}
class ParSolverConfig::_Internal {
 public:
};

ParSolverConfig::ParSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParSolverConfig)
}
ParSolverConfig::ParSolverConfig(const ParSolverConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solver_type().empty()) {
    solver_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_solver_type(), GetArena());
  }
  max_threads_ = from.max_threads_;
  // @@protoc_insertion_point(copy_constructor:ParSolverConfig)
}

void ParSolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto.base);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_threads_ = 0u;
}

ParSolverConfig::~ParSolverConfig() {
  // @@protoc_insertion_point(destructor:ParSolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  solver_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParSolverConfig::ArenaDtor(void* object) {
  ParSolverConfig* _this = reinterpret_cast<ParSolverConfig*>(object);
  (void) _this;
}
void ParSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ParSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParSolverConfig& ParSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ParSolverConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void ParSolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ParSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_threads_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParSolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_threads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string solver_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_solver_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ParSolverConfig.solver_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_threads = 1;
  if (this->max_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_max_threads(), target);
  }

  // string solver_type = 2;
  if (this->solver_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_solver_type().data(),
        static_cast<int>(this->_internal_solver_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "ParSolverConfig.solver_type");
    target = stream->WriteStringMaybeAliased(2, this->_internal_solver_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParSolverConfig)
  return target;
}

size_t ParSolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ParSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string solver_type = 2;
  if (this->solver_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_solver_type());
  }

  // uint32 max_threads = 1;
  if (this->max_threads() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_threads());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ParSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParSolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ParSolverConfig)
    MergeFrom(*source);
  }
}

void ParSolverConfig::MergeFrom(const ParSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ParSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.solver_type().size() > 0) {
    _internal_set_solver_type(from._internal_solver_type());
  }
  if (from.max_threads() != 0) {
    _internal_set_max_threads(from._internal_max_threads());
  }
}

void ParSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ParSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ParSolverConfig::CopyFrom(const ParSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ParSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ParSolverConfig::IsInitialized() const {
  return true;
}

void ParSolverConfig::InternalSwap(ParSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  solver_type_.Swap(
      &other->solver_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  swap(max_threads_, other->max_threads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void LoggerConfig_LoggerEntry::InitAsDefaultInstance() {}
class LoggerConfig_LoggerEntry::_Internal {
 public:
};

LoggerConfig_LoggerEntry::LoggerConfig_LoggerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoggerConfig.LoggerEntry)
}
LoggerConfig_LoggerEntry::LoggerConfig_LoggerEntry(const LoggerConfig_LoggerEntry& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &log_type_, &from.log_type_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
  // @@protoc_insertion_point(copy_constructor:LoggerConfig.LoggerEntry)
}

void LoggerConfig_LoggerEntry::SharedCtor() {
  ::memset(
      &log_type_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
}

LoggerConfig_LoggerEntry::~LoggerConfig_LoggerEntry() {
  // @@protoc_insertion_point(destructor:LoggerConfig.LoggerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggerConfig_LoggerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoggerConfig_LoggerEntry::ArenaDtor(void* object) {
  LoggerConfig_LoggerEntry* _this = reinterpret_cast<LoggerConfig_LoggerEntry*>(object);
  (void) _this;
}
void LoggerConfig_LoggerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void LoggerConfig_LoggerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggerConfig_LoggerEntry& LoggerConfig_LoggerEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_LoggerConfig_LoggerEntry_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void LoggerConfig_LoggerEntry::Clear() {
  // @@protoc_insertion_point(message_clear_start:LoggerConfig.LoggerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &log_type_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggerConfig_LoggerEntry::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LogType log_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_type(static_cast<::LogType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 min_verbose_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_verbose_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 every_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          every_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggerConfig_LoggerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoggerConfig.LoggerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LogType log_type = 1;
  if (this->log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_log_type(), target);
  }

  // uint32 min_verbose_level = 2;
  if (this->min_verbose_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_min_verbose_level(), target);
  }

  // uint32 every_n = 3;
  if (this->every_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_every_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoggerConfig.LoggerEntry)
  return target;
}

size_t LoggerConfig_LoggerEntry::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LoggerConfig.LoggerEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LogType log_type = 1;
  if (this->log_type() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_type());
  }

  // uint32 min_verbose_level = 2;
  if (this->min_verbose_level() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_min_verbose_level());
  }

  // uint32 every_n = 3;
  if (this->every_n() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_every_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggerConfig_LoggerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LoggerConfig.LoggerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggerConfig_LoggerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggerConfig_LoggerEntry>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoggerConfig.LoggerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LoggerConfig.LoggerEntry)
    MergeFrom(*source);
  }
}

void LoggerConfig_LoggerEntry::MergeFrom(const LoggerConfig_LoggerEntry& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LoggerConfig.LoggerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_type() != 0) {
    _internal_set_log_type(from._internal_log_type());
  }
  if (from.min_verbose_level() != 0) {
    _internal_set_min_verbose_level(from._internal_min_verbose_level());
  }
  if (from.every_n() != 0) {
    _internal_set_every_n(from._internal_every_n());
  }
}

void LoggerConfig_LoggerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LoggerConfig.LoggerEntry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LoggerConfig_LoggerEntry::CopyFrom(const LoggerConfig_LoggerEntry& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LoggerConfig.LoggerEntry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LoggerConfig_LoggerEntry::IsInitialized() const {
  return true;
}

void LoggerConfig_LoggerEntry::InternalSwap(LoggerConfig_LoggerEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggerConfig_LoggerEntry, every_n_) +
      sizeof(LoggerConfig_LoggerEntry::every_n_) -
      PROTOBUF_FIELD_OFFSET(LoggerConfig_LoggerEntry, log_type_)>(
      reinterpret_cast<char*>(&log_type_), reinterpret_cast<char*>(&other->log_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggerConfig_LoggerEntry::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void LoggerConfig::InitAsDefaultInstance() {}
class LoggerConfig::_Internal {
 public:
};

LoggerConfig::LoggerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoggerConfig)
}
LoggerConfig::LoggerConfig(const LoggerConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LoggerConfig)
}

void LoggerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto.base);
}

LoggerConfig::~LoggerConfig() {
  // @@protoc_insertion_point(destructor:LoggerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoggerConfig::ArenaDtor(void* object) {
  LoggerConfig* _this = reinterpret_cast<LoggerConfig*>(object);
  (void) _this;
}
void LoggerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void LoggerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggerConfig& LoggerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_LoggerConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void LoggerConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:LoggerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggerConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LoggerConfig.LoggerEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoggerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LoggerConfig.LoggerEntry entries = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_entries_size()); i < n;
       i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoggerConfig)
  return target;
}

size_t LoggerConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LoggerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoggerConfig.LoggerEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LoggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggerConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggerConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoggerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LoggerConfig)
    MergeFrom(*source);
  }
}

void LoggerConfig::MergeFrom(const LoggerConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LoggerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void LoggerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LoggerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LoggerConfig::CopyFrom(const LoggerConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LoggerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LoggerConfig::IsInitialized() const {
  return true;
}

void LoggerConfig::InternalSwap(LoggerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggerConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GlobalConfig::InitAsDefaultInstance() {
  ::_GlobalConfig_default_instance_._instance.get_mutable()->algorithm_config_ =
      const_cast<::AlgorithmConfig*>(::AlgorithmConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->ea_algorithm_config_ =
      const_cast<::EAAlgorithmConfig*>(::EAAlgorithmConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->ga_algorithm_config_ =
      const_cast<::GAAlgorithmConfig*>(::GAAlgorithmConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->resource_limit_config_ =
      const_cast<::ResourceLimitConfig*>(::ResourceLimitConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->fitness_limit_config_ =
      const_cast<::FitnessLimitConfig*>(::FitnessLimitConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->conj_limit_config_ =
      const_cast<::ConjLimitConfig*>(::ConjLimitConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->uniform_mutation_config_ =
      const_cast<::UniformMutationConfig*>(::UniformMutationConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->doerr_mutation_config_ =
      const_cast<::DoerrMutationConfig*>(::DoerrMutationConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->simp_solver_config_ =
      const_cast<::SimpSolverConfig*>(::SimpSolverConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->par_solver_config_ =
      const_cast<::ParSolverConfig*>(::ParSolverConfig::internal_default_instance());
  ::_GlobalConfig_default_instance_._instance.get_mutable()->logger_config_ =
      const_cast<::LoggerConfig*>(::LoggerConfig::internal_default_instance());
}
class GlobalConfig::_Internal {
 public:
  static const ::AlgorithmConfig& algorithm_config(const GlobalConfig* msg);
  static const ::EAAlgorithmConfig& ea_algorithm_config(const GlobalConfig* msg);
  static const ::GAAlgorithmConfig& ga_algorithm_config(const GlobalConfig* msg);
  static const ::ResourceLimitConfig& resource_limit_config(const GlobalConfig* msg);
  static const ::FitnessLimitConfig& fitness_limit_config(const GlobalConfig* msg);
  static const ::ConjLimitConfig& conj_limit_config(const GlobalConfig* msg);
  static const ::UniformMutationConfig& uniform_mutation_config(const GlobalConfig* msg);
  static const ::DoerrMutationConfig& doerr_mutation_config(const GlobalConfig* msg);
  static const ::SimpSolverConfig& simp_solver_config(const GlobalConfig* msg);
  static const ::ParSolverConfig& par_solver_config(const GlobalConfig* msg);
  static const ::LoggerConfig& logger_config(const GlobalConfig* msg);
};

const ::AlgorithmConfig& GlobalConfig::_Internal::algorithm_config(const GlobalConfig* msg) {
  return *msg->algorithm_config_;
}
const ::EAAlgorithmConfig& GlobalConfig::_Internal::ea_algorithm_config(const GlobalConfig* msg) {
  return *msg->ea_algorithm_config_;
}
const ::GAAlgorithmConfig& GlobalConfig::_Internal::ga_algorithm_config(const GlobalConfig* msg) {
  return *msg->ga_algorithm_config_;
}
const ::ResourceLimitConfig& GlobalConfig::_Internal::resource_limit_config(
    const GlobalConfig* msg) {
  return *msg->resource_limit_config_;
}
const ::FitnessLimitConfig& GlobalConfig::_Internal::fitness_limit_config(const GlobalConfig* msg) {
  return *msg->fitness_limit_config_;
}
const ::ConjLimitConfig& GlobalConfig::_Internal::conj_limit_config(const GlobalConfig* msg) {
  return *msg->conj_limit_config_;
}
const ::UniformMutationConfig& GlobalConfig::_Internal::uniform_mutation_config(
    const GlobalConfig* msg) {
  return *msg->uniform_mutation_config_;
}
const ::DoerrMutationConfig& GlobalConfig::_Internal::doerr_mutation_config(
    const GlobalConfig* msg) {
  return *msg->doerr_mutation_config_;
}
const ::SimpSolverConfig& GlobalConfig::_Internal::simp_solver_config(const GlobalConfig* msg) {
  return *msg->simp_solver_config_;
}
const ::ParSolverConfig& GlobalConfig::_Internal::par_solver_config(const GlobalConfig* msg) {
  return *msg->par_solver_config_;
}
const ::LoggerConfig& GlobalConfig::_Internal::logger_config(const GlobalConfig* msg) {
  return *msg->logger_config_;
}
GlobalConfig::GlobalConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GlobalConfig)
}
GlobalConfig::GlobalConfig(const GlobalConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_algorithm_type().empty()) {
    algorithm_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_algorithm_type(), GetArena());
  }
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solver_type().empty()) {
    solver_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_solver_type(), GetArena());
  }
  if (from._internal_has_algorithm_config()) {
    algorithm_config_ = new ::AlgorithmConfig(*from.algorithm_config_);
  } else {
    algorithm_config_ = nullptr;
  }
  if (from._internal_has_resource_limit_config()) {
    resource_limit_config_ = new ::ResourceLimitConfig(*from.resource_limit_config_);
  } else {
    resource_limit_config_ = nullptr;
  }
  if (from._internal_has_fitness_limit_config()) {
    fitness_limit_config_ = new ::FitnessLimitConfig(*from.fitness_limit_config_);
  } else {
    fitness_limit_config_ = nullptr;
  }
  if (from._internal_has_conj_limit_config()) {
    conj_limit_config_ = new ::ConjLimitConfig(*from.conj_limit_config_);
  } else {
    conj_limit_config_ = nullptr;
  }
  if (from._internal_has_simp_solver_config()) {
    simp_solver_config_ = new ::SimpSolverConfig(*from.simp_solver_config_);
  } else {
    simp_solver_config_ = nullptr;
  }
  if (from._internal_has_uniform_mutation_config()) {
    uniform_mutation_config_ = new ::UniformMutationConfig(*from.uniform_mutation_config_);
  } else {
    uniform_mutation_config_ = nullptr;
  }
  if (from._internal_has_ea_algorithm_config()) {
    ea_algorithm_config_ = new ::EAAlgorithmConfig(*from.ea_algorithm_config_);
  } else {
    ea_algorithm_config_ = nullptr;
  }
  if (from._internal_has_doerr_mutation_config()) {
    doerr_mutation_config_ = new ::DoerrMutationConfig(*from.doerr_mutation_config_);
  } else {
    doerr_mutation_config_ = nullptr;
  }
  if (from._internal_has_ga_algorithm_config()) {
    ga_algorithm_config_ = new ::GAAlgorithmConfig(*from.ga_algorithm_config_);
  } else {
    ga_algorithm_config_ = nullptr;
  }
  if (from._internal_has_par_solver_config()) {
    par_solver_config_ = new ::ParSolverConfig(*from.par_solver_config_);
  } else {
    par_solver_config_ = nullptr;
  }
  if (from._internal_has_logger_config()) {
    logger_config_ = new ::LoggerConfig(*from.logger_config_);
  } else {
    logger_config_ = nullptr;
  }
  rnd_seed_ = from.rnd_seed_;
  // @@protoc_insertion_point(copy_constructor:GlobalConfig)
}

void GlobalConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto.base);
  algorithm_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &algorithm_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&rnd_seed_) - reinterpret_cast<char*>(&algorithm_config_)) +
          sizeof(rnd_seed_));
}

GlobalConfig::~GlobalConfig() {
  // @@protoc_insertion_point(destructor:GlobalConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  algorithm_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solver_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete algorithm_config_;
  if (this != internal_default_instance())
    delete resource_limit_config_;
  if (this != internal_default_instance())
    delete fitness_limit_config_;
  if (this != internal_default_instance())
    delete conj_limit_config_;
  if (this != internal_default_instance())
    delete simp_solver_config_;
  if (this != internal_default_instance())
    delete uniform_mutation_config_;
  if (this != internal_default_instance())
    delete ea_algorithm_config_;
  if (this != internal_default_instance())
    delete doerr_mutation_config_;
  if (this != internal_default_instance())
    delete ga_algorithm_config_;
  if (this != internal_default_instance())
    delete par_solver_config_;
  if (this != internal_default_instance())
    delete logger_config_;
}

void GlobalConfig::ArenaDtor(void* object) {
  GlobalConfig* _this = reinterpret_cast<GlobalConfig*>(object);
  (void) _this;
}
void GlobalConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void GlobalConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalConfig& GlobalConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GlobalConfig_evol_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}

void GlobalConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:GlobalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && algorithm_config_ != nullptr) {
    delete algorithm_config_;
  }
  algorithm_config_ = nullptr;
  if (GetArena() == nullptr && resource_limit_config_ != nullptr) {
    delete resource_limit_config_;
  }
  resource_limit_config_ = nullptr;
  if (GetArena() == nullptr && fitness_limit_config_ != nullptr) {
    delete fitness_limit_config_;
  }
  fitness_limit_config_ = nullptr;
  if (GetArena() == nullptr && conj_limit_config_ != nullptr) {
    delete conj_limit_config_;
  }
  conj_limit_config_ = nullptr;
  if (GetArena() == nullptr && simp_solver_config_ != nullptr) {
    delete simp_solver_config_;
  }
  simp_solver_config_ = nullptr;
  if (GetArena() == nullptr && uniform_mutation_config_ != nullptr) {
    delete uniform_mutation_config_;
  }
  uniform_mutation_config_ = nullptr;
  if (GetArena() == nullptr && ea_algorithm_config_ != nullptr) {
    delete ea_algorithm_config_;
  }
  ea_algorithm_config_ = nullptr;
  if (GetArena() == nullptr && doerr_mutation_config_ != nullptr) {
    delete doerr_mutation_config_;
  }
  doerr_mutation_config_ = nullptr;
  if (GetArena() == nullptr && ga_algorithm_config_ != nullptr) {
    delete ga_algorithm_config_;
  }
  ga_algorithm_config_ = nullptr;
  if (GetArena() == nullptr && par_solver_config_ != nullptr) {
    delete par_solver_config_;
  }
  par_solver_config_ = nullptr;
  if (GetArena() == nullptr && logger_config_ != nullptr) {
    delete logger_config_;
  }
  logger_config_ = nullptr;
  rnd_seed_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AlgorithmConfig algorithm_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ResourceLimitConfig resource_limit_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FitnessLimitConfig fitness_limit_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fitness_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ConjLimitConfig conj_limit_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conj_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SimpSolverConfig simp_solver_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_simp_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UniformMutationConfig uniform_mutation_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EAAlgorithmConfig ea_algorithm_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ea_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DoerrMutationConfig doerr_mutation_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_doerr_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GAAlgorithmConfig ga_algorithm_config = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ga_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string algorithm_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_algorithm_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GlobalConfig.algorithm_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string solver_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_solver_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GlobalConfig.solver_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ParSolverConfig par_solver_config = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_par_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 rnd_seed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          rnd_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LoggerConfig logger_config = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_logger_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlobalConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AlgorithmConfig algorithm_config = 1;
  if (this->has_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::algorithm_config(this), target, stream);
  }

  // .ResourceLimitConfig resource_limit_config = 2;
  if (this->has_resource_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::resource_limit_config(this), target, stream);
  }

  // .FitnessLimitConfig fitness_limit_config = 3;
  if (this->has_fitness_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::fitness_limit_config(this), target, stream);
  }

  // .ConjLimitConfig conj_limit_config = 5;
  if (this->has_conj_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::conj_limit_config(this), target, stream);
  }

  // .SimpSolverConfig simp_solver_config = 7;
  if (this->has_simp_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::simp_solver_config(this), target, stream);
  }

  // .UniformMutationConfig uniform_mutation_config = 11;
  if (this->has_uniform_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::uniform_mutation_config(this), target, stream);
  }

  // .EAAlgorithmConfig ea_algorithm_config = 12;
  if (this->has_ea_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::ea_algorithm_config(this), target, stream);
  }

  // .DoerrMutationConfig doerr_mutation_config = 13;
  if (this->has_doerr_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::doerr_mutation_config(this), target, stream);
  }

  // .GAAlgorithmConfig ga_algorithm_config = 14;
  if (this->has_ga_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::ga_algorithm_config(this), target, stream);
  }

  // string algorithm_type = 20;
  if (this->algorithm_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_algorithm_type().data(),
        static_cast<int>(this->_internal_algorithm_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "GlobalConfig.algorithm_type");
    target = stream->WriteStringMaybeAliased(20, this->_internal_algorithm_type(), target);
  }

  // string solver_type = 21;
  if (this->solver_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_solver_type().data(),
        static_cast<int>(this->_internal_solver_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GlobalConfig.solver_type");
    target = stream->WriteStringMaybeAliased(21, this->_internal_solver_type(), target);
  }

  // .ParSolverConfig par_solver_config = 22;
  if (this->has_par_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        22, _Internal::par_solver_config(this), target, stream);
  }

  // int64 rnd_seed = 23;
  if (this->rnd_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
        23, this->_internal_rnd_seed(), target);
  }

  // .LoggerConfig logger_config = 24;
  if (this->has_logger_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        24, _Internal::logger_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlobalConfig)
  return target;
}

size_t GlobalConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:GlobalConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algorithm_type = 20;
  if (this->algorithm_type().size() > 0) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_algorithm_type());
  }

  // string solver_type = 21;
  if (this->solver_type().size() > 0) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_solver_type());
  }

  // .AlgorithmConfig algorithm_config = 1;
  if (this->has_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*algorithm_config_);
  }

  // .ResourceLimitConfig resource_limit_config = 2;
  if (this->has_resource_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*resource_limit_config_);
  }

  // .FitnessLimitConfig fitness_limit_config = 3;
  if (this->has_fitness_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*fitness_limit_config_);
  }

  // .ConjLimitConfig conj_limit_config = 5;
  if (this->has_conj_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*conj_limit_config_);
  }

  // .SimpSolverConfig simp_solver_config = 7;
  if (this->has_simp_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*simp_solver_config_);
  }

  // .UniformMutationConfig uniform_mutation_config = 11;
  if (this->has_uniform_mutation_config()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *uniform_mutation_config_);
  }

  // .EAAlgorithmConfig ea_algorithm_config = 12;
  if (this->has_ea_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ea_algorithm_config_);
  }

  // .DoerrMutationConfig doerr_mutation_config = 13;
  if (this->has_doerr_mutation_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*doerr_mutation_config_);
  }

  // .GAAlgorithmConfig ga_algorithm_config = 14;
  if (this->has_ga_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ga_algorithm_config_);
  }

  // .ParSolverConfig par_solver_config = 22;
  if (this->has_par_solver_config()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*par_solver_config_);
  }

  // .LoggerConfig logger_config = 24;
  if (this->has_logger_config()) {
    total_size +=
        2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*logger_config_);
  }

  // int64 rnd_seed = 23;
  if (this->rnd_seed() != 0) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                          this->_internal_rnd_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:GlobalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:GlobalConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:GlobalConfig)
    MergeFrom(*source);
  }
}

void GlobalConfig::MergeFrom(const GlobalConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:GlobalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algorithm_type().size() > 0) {
    _internal_set_algorithm_type(from._internal_algorithm_type());
  }
  if (from.solver_type().size() > 0) {
    _internal_set_solver_type(from._internal_solver_type());
  }
  if (from.has_algorithm_config()) {
    _internal_mutable_algorithm_config()->::AlgorithmConfig::MergeFrom(
        from._internal_algorithm_config());
  }
  if (from.has_resource_limit_config()) {
    _internal_mutable_resource_limit_config()->::ResourceLimitConfig::MergeFrom(
        from._internal_resource_limit_config());
  }
  if (from.has_fitness_limit_config()) {
    _internal_mutable_fitness_limit_config()->::FitnessLimitConfig::MergeFrom(
        from._internal_fitness_limit_config());
  }
  if (from.has_conj_limit_config()) {
    _internal_mutable_conj_limit_config()->::ConjLimitConfig::MergeFrom(
        from._internal_conj_limit_config());
  }
  if (from.has_simp_solver_config()) {
    _internal_mutable_simp_solver_config()->::SimpSolverConfig::MergeFrom(
        from._internal_simp_solver_config());
  }
  if (from.has_uniform_mutation_config()) {
    _internal_mutable_uniform_mutation_config()->::UniformMutationConfig::MergeFrom(
        from._internal_uniform_mutation_config());
  }
  if (from.has_ea_algorithm_config()) {
    _internal_mutable_ea_algorithm_config()->::EAAlgorithmConfig::MergeFrom(
        from._internal_ea_algorithm_config());
  }
  if (from.has_doerr_mutation_config()) {
    _internal_mutable_doerr_mutation_config()->::DoerrMutationConfig::MergeFrom(
        from._internal_doerr_mutation_config());
  }
  if (from.has_ga_algorithm_config()) {
    _internal_mutable_ga_algorithm_config()->::GAAlgorithmConfig::MergeFrom(
        from._internal_ga_algorithm_config());
  }
  if (from.has_par_solver_config()) {
    _internal_mutable_par_solver_config()->::ParSolverConfig::MergeFrom(
        from._internal_par_solver_config());
  }
  if (from.has_logger_config()) {
    _internal_mutable_logger_config()->::LoggerConfig::MergeFrom(from._internal_logger_config());
  }
  if (from.rnd_seed() != 0) {
    _internal_set_rnd_seed(from._internal_rnd_seed());
  }
}

void GlobalConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:GlobalConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void GlobalConfig::CopyFrom(const GlobalConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:GlobalConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool GlobalConfig::IsInitialized() const {
  return true;
}

void GlobalConfig::InternalSwap(GlobalConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  algorithm_type_.Swap(
      &other->algorithm_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  solver_type_.Swap(
      &other->solver_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalConfig, rnd_seed_) + sizeof(GlobalConfig::rnd_seed_) -
      PROTOBUF_FIELD_OFFSET(GlobalConfig, algorithm_config_)>(
      reinterpret_cast<char*>(&algorithm_config_),
      reinterpret_cast<char*>(&other->algorithm_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::AlgorithmConfig_InstanceConfig_SamplingSizeConfig*
Arena::CreateMaybeMessage<::AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::AlgorithmConfig_InstanceConfig_SamplingSizeConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::AlgorithmConfig_InstanceConfig*
Arena::CreateMaybeMessage<::AlgorithmConfig_InstanceConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::AlgorithmConfig_InstanceConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::AlgorithmConfig* Arena::CreateMaybeMessage<::AlgorithmConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::AlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ResourceLimitConfig* Arena::CreateMaybeMessage<::ResourceLimitConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::ResourceLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::FitnessLimitConfig* Arena::CreateMaybeMessage<::FitnessLimitConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::FitnessLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ConjLimitConfig* Arena::CreateMaybeMessage<::ConjLimitConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::ConjLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::UniformMutationConfig* Arena::CreateMaybeMessage<::UniformMutationConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::UniformMutationConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::DoerrMutationConfig* Arena::CreateMaybeMessage<::DoerrMutationConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::DoerrMutationConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::EAAlgorithmConfig* Arena::CreateMaybeMessage<::EAAlgorithmConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::EAAlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::GAAlgorithmConfig* Arena::CreateMaybeMessage<::GAAlgorithmConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::GAAlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::MinisatCliConfig* Arena::CreateMaybeMessage<::MinisatCliConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::MinisatCliConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SolverConfig* Arena::CreateMaybeMessage<::SolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SimpSolverConfig* Arena::CreateMaybeMessage<::SimpSolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SimpSolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ParSolverConfig* Arena::CreateMaybeMessage<::ParSolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::ParSolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::LoggerConfig_LoggerEntry* Arena::CreateMaybeMessage<::LoggerConfig_LoggerEntry>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::LoggerConfig_LoggerEntry>(arena);
}
template <>
PROTOBUF_NOINLINE ::LoggerConfig* Arena::CreateMaybeMessage<::LoggerConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::LoggerConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::GlobalConfig* Arena::CreateMaybeMessage<::GlobalConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::GlobalConfig>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
