syntax = "proto3";

/// Solvers configuration

message SharingConfig {
  bool enabled = 1;
  int32 interval_us = 2;
  int32 shr_lit = 3;
}

message DiversificationConfig {
  bool native = 1;
  bool sparse = 2;
}

message MapleCOMSPSSolverConfig {
  int32 lbd_limit = 1;
  bool sharing_enabled = 2;
}

message LMapleSolverConfig {
  int32 lbd_limit = 1;
  bool sharing_enabled = 2;
}

message PainlessSolverConfig {
  int32 max_threads = 1;
  int32 max_memory = 2;
  int32 block_size = 3;
  int32 time_limit_s = 4;
  int32 lbd_limit = 5;
  SharingConfig sharing_config = 6;
}

message SolverConfig {
  string solver_type = 1;
  PainlessSolverConfig painless_solver_config = 2;
  MapleCOMSPSSolverConfig maplecomsps_solver_config = 3;
  LMapleSolverConfig lmaple_solver_config = 4;
}

message SequentialSolverServiceConfig {
  uint32 num_solvers = 1;
  SharingConfig sharing_config = 2;
  DiversificationConfig diversification_config = 3;
  SolverConfig solver_config = 4;
}

message SolverServiceConfig {
  string solver_service_type = 1;
  SequentialSolverServiceConfig sequential_solver_service_config = 2;
}

/// Propagators configuration

message PropConfig {
  string prop_type = 1;
  ParPropConfig par_prop_config = 4;
}

message ParPropConfig {
  uint32 max_threads = 1;
  uint32 tree_split_vars = 2;
  uint32 seq_split_samples = 3;
}

/// Algorithms' resource limits configuration

message ResourceLimitConfig {
  uint32 memory_limit_kb = 1;
  uint32 time_limit_sec = 2;
}

message FitnessLimitConfig {
  double lowest_fitness = 1;
  uint32 max_size = 2;
}

message PointsLimitConfig {
  uint32 max_points_visited = 1;
}

message ConjLimitConfig {
  repeated LimitConfig limit_config = 1;
}

message StallLimitConfig {
  uint32 steps_before_stall = 1;
  double time_before_stall_s = 2;
}

message LimitConfig {
  string limit_type = 1;
  ResourceLimitConfig resource_limit_config = 2;
  FitnessLimitConfig fitness_limit_config = 3;
  ConjLimitConfig conj_limit_config = 4;
  PointsLimitConfig points_limit_config = 5;
  StallLimitConfig stall_limit_config = 6;
}

/// Methods configuration

message PreprocessConfig {
  uint32 heuristic_size = 2;
}

message UniformMutationConfig {
  uint32 scale = 1;
}

message DoerrMutationConfig {
  double beta = 1;
}

message MutationConfig {
  string mutation_type = 1;
  UniformMutationConfig uniform_mutation_config = 2;
  DoerrMutationConfig doerr_mutation_config = 3;
}

message CrossoverConfig {
  string crossover_type = 1;
}

message SelectorConfig {
  string selector_type = 1;
}

message InstanceConfig {
  message SamplingSizeConfig {
    uint32 max_vars_fs = 1;
    uint64 base_count = 2;
    uint32 max_steps = 3;
    double scale = 4;
    bool tree = 5;
  }

  uint32 omega_x = 1;
  uint32 max_cache_size = 3;
  SamplingSizeConfig sampling_config = 4;
}

/// Algorithm's configuration

message BaseAlgorithmConfig {
  bool save_stats = 1;
  LimitConfig limit_config = 2;
  InstanceConfig instance_config = 3;
}

message EAAlgorithmConfig {
  MutationConfig mutation_config = 1;
  SelectorConfig selector_config = 2;
  BaseAlgorithmConfig base_algorithm_config = 3;
}

message GAAlgorithmConfig {
  uint32 q = 4;
  uint32 h = 5;
  MutationConfig mutation_config = 1;
  CrossoverConfig crossover_config = 2;
  SelectorConfig selector_config = 3;
  BaseAlgorithmConfig base_algorithm_config = 6;
}

message AlgorithmConfig {
  string algorithm_type = 1;
  EAAlgorithmConfig ea_algorithm_config = 3;
  GAAlgorithmConfig ga_algorithm_config = 4;
}

/// Rho-backdoor search configuration

message OneRBSearchConfig {
  AlgorithmConfig algorithm_config = 2;
}

message CartesianRBSearchConfig {
  repeated AlgorithmConfig algorithm_configs = 2;
  uint32 num_algorithms = 3;
  uint32 max_unpropagated = 4;
  uint32 max_cartesian_size = 5;
}

message RBSearchConfig {
  string rb_search_type = 1;
  OneRBSearchConfig one_rb_search_config = 2;
  CartesianRBSearchConfig cartesian_rb_search_config = 3;
}

/// Solve configuration

message NaiveSolveConfig {
  SolverConfig solver_config = 1;
}

message SingleReduceSolveConfig {
  PreprocessConfig preprocess_config = 1;
  RBSearchConfig rb_search_config = 2;
  PropConfig prop_config = 3;
  SolverServiceConfig solver_service_config = 4;
}

message RecurringReduceSolveConfig {
  PreprocessConfig preprocess_config = 1;
  RBSearchConfig rb_search_config = 2;
  uint32 max_solve_time_ms = 3;
  double max_solve_time_scale = 4;
  uint32 max_recursion_depth = 5;
  PropConfig prop_config = 6;
  SolverServiceConfig solver_service_config = 7;
}

message PortfolioSolveConfig {
  repeated SolveConfig solve_configs = 1;
  SharingConfig sharing_config = 2;
}

message SolveConfig {
  string solve_type = 1;
  uint32 cpu_limit = 2;
  uint32 random_seed = 3;
  NaiveSolveConfig naive_solve_config = 4;
  SingleReduceSolveConfig single_reduce_solve_config = 5;
  RecurringReduceSolveConfig recurring_reduce_solve_config = 6;
  PortfolioSolveConfig portfolio_solve_config = 7;
}
