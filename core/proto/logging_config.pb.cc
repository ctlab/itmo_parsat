// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/logging_config.proto

#include "core/proto/logging_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2flogging_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto;
class LoggingConfig_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingConfig_Entry> _instance;
} _LoggingConfig_Entry_default_instance_;
class LoggingConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingConfig> _instance;
} _LoggingConfig_default_instance_;
class TracerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracerConfig> _instance;
} _TracerConfig_default_instance_;
static void InitDefaultsscc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoggingConfig_default_instance_;
    new (ptr)::LoggingConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoggingConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto},
        {
            &scc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoggingConfig_Entry_default_instance_;
    new (ptr)::LoggingConfig_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoggingConfig_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_TracerConfig_core_2fproto_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TracerConfig_default_instance_;
    new (ptr)::TracerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TracerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_TracerConfig_core_2fproto_2flogging_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_TracerConfig_core_2fproto_2flogging_5fconfig_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_core_2fproto_2flogging_5fconfig_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
    file_level_enum_descriptors_core_2fproto_2flogging_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_core_2fproto_2flogging_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_core_2fproto_2flogging_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LoggingConfig_Entry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::LoggingConfig_Entry, log_type_),
        PROTOBUF_FIELD_OFFSET(::LoggingConfig_Entry, verbose_level_),
        PROTOBUF_FIELD_OFFSET(::LoggingConfig_Entry, every_n_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LoggingConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::LoggingConfig, entries_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TracerConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, sizeof(::LoggingConfig_Entry)},
    {8, -1, sizeof(::LoggingConfig)},
    {14, -1, sizeof(::TracerConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_LoggingConfig_Entry_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoggingConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TracerConfig_default_instance_),
};

const char
    descriptor_table_protodef_core_2fproto_2flogging_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\037core/proto/logging_config.proto\"\203\001\n\rLo"
        "ggingConfig\022%\n\007entries\030\001 \003(\0132\024.LoggingCo"
        "nfig.Entry\032K\n\005Entry\022\032\n\010log_type\030\001 \001(\0162\010."
        "LogType\022\025\n\rverbose_level\030\002 \001(\r\022\017\n\007every_"
        "n\030\003 \001(\r\"\016\n\014TracerConfig*\261\001\n\007LogType\022\n\n\006A"
        "LWAYS\020\000\022\t\n\005NEVER\020\001\022\033\n\027SOLVER_STATS_PREPR"
        "OCESS\020\002\022\024\n\020RESOLVE_INSTANCE\020\003\022\024\n\020HEURIST"
        "IC_RESULT\020\004\022\024\n\020CURRENT_INSTANCE\020\005\022\021\n\rBES"
        "T_INSTANCE\020\006\022\021\n\rFITNESS_SCALE\020\007\022\n\n\006TRACE"
        "R\020\010b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_sccs[3] = {
        &scc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto.base,
        &scc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto.base,
        &scc_info_TracerConfig_core_2fproto_2flogging_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_core_2fproto_2flogging_5fconfig_2eproto = {
        false,
        false,
        descriptor_table_protodef_core_2fproto_2flogging_5fconfig_2eproto,
        "core/proto/logging_config.proto",
        371,
        &descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_once,
        descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_sccs,
        descriptor_table_core_2fproto_2flogging_5fconfig_2eproto_deps,
        3,
        0,
        schemas,
        file_default_instances,
        TableStruct_core_2fproto_2flogging_5fconfig_2eproto::offsets,
        file_level_metadata_core_2fproto_2flogging_5fconfig_2eproto,
        3,
        file_level_enum_descriptors_core_2fproto_2flogging_5fconfig_2eproto,
        file_level_service_descriptors_core_2fproto_2flogging_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fproto_2flogging_5fconfig_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_core_2fproto_2flogging_5fconfig_2eproto)),
     true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_core_2fproto_2flogging_5fconfig_2eproto);
  return file_level_enum_descriptors_core_2fproto_2flogging_5fconfig_2eproto[0];
}
bool LogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

// ===================================================================

void LoggingConfig_Entry::InitAsDefaultInstance() {}
class LoggingConfig_Entry::_Internal {
 public:
};

LoggingConfig_Entry::LoggingConfig_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoggingConfig.Entry)
}
LoggingConfig_Entry::LoggingConfig_Entry(const LoggingConfig_Entry& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &log_type_, &from.log_type_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
  // @@protoc_insertion_point(copy_constructor:LoggingConfig.Entry)
}

void LoggingConfig_Entry::SharedCtor() {
  ::memset(
      &log_type_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
}

LoggingConfig_Entry::~LoggingConfig_Entry() {
  // @@protoc_insertion_point(destructor:LoggingConfig.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggingConfig_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoggingConfig_Entry::ArenaDtor(void* object) {
  LoggingConfig_Entry* _this = reinterpret_cast<LoggingConfig_Entry*>(object);
  (void) _this;
}
void LoggingConfig_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void LoggingConfig_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingConfig_Entry& LoggingConfig_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_LoggingConfig_Entry_core_2fproto_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void LoggingConfig_Entry::Clear() {
  // @@protoc_insertion_point(message_clear_start:LoggingConfig.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &log_type_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&every_n_) - reinterpret_cast<char*>(&log_type_)) +
          sizeof(every_n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingConfig_Entry::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LogType log_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val =
              ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_log_type(static_cast<::LogType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 verbose_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 every_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          every_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingConfig_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoggingConfig.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LogType log_type = 1;
  if (this->log_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_log_type(), target);
  }

  // uint32 verbose_level = 2;
  if (this->verbose_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_verbose_level(), target);
  }

  // uint32 every_n = 3;
  if (this->every_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_every_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoggingConfig.Entry)
  return target;
}

size_t LoggingConfig_Entry::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LoggingConfig.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LogType log_type = 1;
  if (this->log_type() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_log_type());
  }

  // uint32 verbose_level = 2;
  if (this->verbose_level() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_verbose_level());
  }

  // uint32 every_n = 3;
  if (this->every_n() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_every_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingConfig_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LoggingConfig.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingConfig_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingConfig_Entry>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoggingConfig.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LoggingConfig.Entry)
    MergeFrom(*source);
  }
}

void LoggingConfig_Entry::MergeFrom(const LoggingConfig_Entry& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LoggingConfig.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log_type() != 0) {
    _internal_set_log_type(from._internal_log_type());
  }
  if (from.verbose_level() != 0) {
    _internal_set_verbose_level(from._internal_verbose_level());
  }
  if (from.every_n() != 0) {
    _internal_set_every_n(from._internal_every_n());
  }
}

void LoggingConfig_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LoggingConfig.Entry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LoggingConfig_Entry::CopyFrom(const LoggingConfig_Entry& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LoggingConfig.Entry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LoggingConfig_Entry::IsInitialized() const {
  return true;
}

void LoggingConfig_Entry::InternalSwap(LoggingConfig_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggingConfig_Entry, every_n_) + sizeof(LoggingConfig_Entry::every_n_) -
      PROTOBUF_FIELD_OFFSET(LoggingConfig_Entry, log_type_)>(
      reinterpret_cast<char*>(&log_type_), reinterpret_cast<char*>(&other->log_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingConfig_Entry::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void LoggingConfig::InitAsDefaultInstance() {}
class LoggingConfig::_Internal {
 public:
};

LoggingConfig::LoggingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoggingConfig)
}
LoggingConfig::LoggingConfig(const LoggingConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LoggingConfig)
}

void LoggingConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto.base);
}

LoggingConfig::~LoggingConfig() {
  // @@protoc_insertion_point(destructor:LoggingConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoggingConfig::ArenaDtor(void* object) {
  LoggingConfig* _this = reinterpret_cast<LoggingConfig*>(object);
  (void) _this;
}
void LoggingConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void LoggingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingConfig& LoggingConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_LoggingConfig_core_2fproto_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void LoggingConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:LoggingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LoggingConfig.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoggingConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LoggingConfig.Entry entries = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_entries_size()); i < n;
       i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoggingConfig)
  return target;
}

size_t LoggingConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LoggingConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LoggingConfig.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LoggingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoggingConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LoggingConfig)
    MergeFrom(*source);
  }
}

void LoggingConfig::MergeFrom(const LoggingConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LoggingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void LoggingConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LoggingConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LoggingConfig::CopyFrom(const LoggingConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LoggingConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LoggingConfig::IsInitialized() const {
  return true;
}

void LoggingConfig::InternalSwap(LoggingConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void TracerConfig::InitAsDefaultInstance() {}
class TracerConfig::_Internal {
 public:
};

TracerConfig::TracerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TracerConfig)
}
TracerConfig::TracerConfig(const TracerConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TracerConfig)
}

void TracerConfig::SharedCtor() {}

TracerConfig::~TracerConfig() {
  // @@protoc_insertion_point(destructor:TracerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TracerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TracerConfig::ArenaDtor(void* object) {
  TracerConfig* _this = reinterpret_cast<TracerConfig*>(object);
  (void) _this;
}
void TracerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void TracerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracerConfig& TracerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_TracerConfig_core_2fproto_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void TracerConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:TracerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracerConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    if ((tag & 7) == 4 || tag == 0) {
      ctx->SetLastTag(tag);
      goto success;
    }
    ptr = UnknownFieldParse(
        tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
    continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TracerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TracerConfig)
  return target;
}

size_t TracerConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:TracerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:TracerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TracerConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracerConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:TracerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:TracerConfig)
    MergeFrom(*source);
  }
}

void TracerConfig::MergeFrom(const TracerConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:TracerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;
}

void TracerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:TracerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void TracerConfig::CopyFrom(const TracerConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:TracerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool TracerConfig::IsInitialized() const {
  return true;
}

void TracerConfig::InternalSwap(TracerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracerConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::LoggingConfig_Entry* Arena::CreateMaybeMessage<::LoggingConfig_Entry>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::LoggingConfig_Entry>(arena);
}
template <>
PROTOBUF_NOINLINE ::LoggingConfig* Arena::CreateMaybeMessage<::LoggingConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::LoggingConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::TracerConfig* Arena::CreateMaybeMessage<::TracerConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::TracerConfig>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
