// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/logging_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2flogging_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2flogging_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fproto_2flogging_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fproto_2flogging_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3] PROTOBUF_SECTION_VARIABLE(
      protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_core_2fproto_2flogging_5fconfig_2eproto;
class LoggingConfig;
class LoggingConfigDefaultTypeInternal;
extern LoggingConfigDefaultTypeInternal _LoggingConfig_default_instance_;
class LoggingConfig_Entry;
class LoggingConfig_EntryDefaultTypeInternal;
extern LoggingConfig_EntryDefaultTypeInternal _LoggingConfig_Entry_default_instance_;
class TracerConfig;
class TracerConfigDefaultTypeInternal;
extern TracerConfigDefaultTypeInternal _TracerConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::LoggingConfig* Arena::CreateMaybeMessage<::LoggingConfig>(Arena*);
template <>
::LoggingConfig_Entry* Arena::CreateMaybeMessage<::LoggingConfig_Entry>(Arena*);
template <>
::TracerConfig* Arena::CreateMaybeMessage<::TracerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LogType : int {
  ALWAYS = 0,
  NEVER = 1,
  SOLVER_STATS_PREPROCESS = 2,
  RESOLVE_INSTANCE = 3,
  HEURISTIC_RESULT = 4,
  CURRENT_INSTANCE = 5,
  BEST_INSTANCE = 6,
  FITNESS_SCALE = 7,
  TRACER = 8,
  LogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogType_IsValid(int value);
constexpr LogType LogType_MIN = ALWAYS;
constexpr LogType LogType_MAX = TRACER;
constexpr int LogType_ARRAYSIZE = LogType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogType_descriptor();
template <typename T>
inline const std::string& LogType_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, LogType>::value || ::std::is_integral<T>::value,
      "Incorrect type passed to function LogType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(LogType_descriptor(), enum_t_value);
}
inline bool LogType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogType>(
      LogType_descriptor(), name, value);
}
// ===================================================================

class LoggingConfig_Entry PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:LoggingConfig.Entry) */ {
 public:
  inline LoggingConfig_Entry() : LoggingConfig_Entry(nullptr) {}
  virtual ~LoggingConfig_Entry();

  LoggingConfig_Entry(const LoggingConfig_Entry& from);
  LoggingConfig_Entry(LoggingConfig_Entry&& from) noexcept : LoggingConfig_Entry() {
    *this = ::std::move(from);
  }

  inline LoggingConfig_Entry& operator=(const LoggingConfig_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingConfig_Entry& operator=(LoggingConfig_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggingConfig_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggingConfig_Entry* internal_default_instance() {
    return reinterpret_cast<const LoggingConfig_Entry*>(&_LoggingConfig_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(LoggingConfig_Entry& a, LoggingConfig_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggingConfig_Entry* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggingConfig_Entry* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggingConfig_Entry* New() const final {
    return CreateMaybeMessage<LoggingConfig_Entry>(nullptr);
  }

  LoggingConfig_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggingConfig_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggingConfig_Entry& from);
  void MergeFrom(const LoggingConfig_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggingConfig_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoggingConfig.Entry";
  }

 protected:
  explicit LoggingConfig_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogTypeFieldNumber = 1,
    kVerboseLevelFieldNumber = 2,
    kEveryNFieldNumber = 3,
  };
  // .LogType log_type = 1;
  void clear_log_type();
  ::LogType log_type() const;
  void set_log_type(::LogType value);

 private:
  ::LogType _internal_log_type() const;
  void _internal_set_log_type(::LogType value);

 public:
  // uint32 verbose_level = 2;
  void clear_verbose_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 verbose_level() const;
  void set_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verbose_level() const;
  void _internal_set_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 every_n = 3;
  void clear_every_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 every_n() const;
  void set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_every_n() const;
  void _internal_set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:LoggingConfig.Entry)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int log_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verbose_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 every_n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LoggingConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:LoggingConfig) */ {
 public:
  inline LoggingConfig() : LoggingConfig(nullptr) {}
  virtual ~LoggingConfig();

  LoggingConfig(const LoggingConfig& from);
  LoggingConfig(LoggingConfig&& from) noexcept : LoggingConfig() {
    *this = ::std::move(from);
  }

  inline LoggingConfig& operator=(const LoggingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingConfig& operator=(LoggingConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggingConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggingConfig* internal_default_instance() {
    return reinterpret_cast<const LoggingConfig*>(&_LoggingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(LoggingConfig& a, LoggingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggingConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggingConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggingConfig* New() const final {
    return CreateMaybeMessage<LoggingConfig>(nullptr);
  }

  LoggingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggingConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggingConfig& from);
  void MergeFrom(const LoggingConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggingConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoggingConfig";
  }

 protected:
  explicit LoggingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef LoggingConfig_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .LoggingConfig.Entry entries = 1;
  int entries_size() const;

 private:
  int _internal_entries_size() const;

 public:
  void clear_entries();
  ::LoggingConfig_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggingConfig_Entry>* mutable_entries();

 private:
  const ::LoggingConfig_Entry& _internal_entries(int index) const;
  ::LoggingConfig_Entry* _internal_add_entries();

 public:
  const ::LoggingConfig_Entry& entries(int index) const;
  ::LoggingConfig_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggingConfig_Entry>& entries() const;

  // @@protoc_insertion_point(class_scope:LoggingConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggingConfig_Entry> entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TracerConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:TracerConfig) */ {
 public:
  inline TracerConfig() : TracerConfig(nullptr) {}
  virtual ~TracerConfig();

  TracerConfig(const TracerConfig& from);
  TracerConfig(TracerConfig&& from) noexcept : TracerConfig() {
    *this = ::std::move(from);
  }

  inline TracerConfig& operator=(const TracerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracerConfig& operator=(TracerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TracerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracerConfig* internal_default_instance() {
    return reinterpret_cast<const TracerConfig*>(&_TracerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(TracerConfig& a, TracerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TracerConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracerConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracerConfig* New() const final {
    return CreateMaybeMessage<TracerConfig>(nullptr);
  }

  TracerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TracerConfig& from);
  void MergeFrom(const TracerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TracerConfig";
  }

 protected:
  explicit TracerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2flogging_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TracerConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2flogging_5fconfig_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoggingConfig_Entry

// .LogType log_type = 1;
inline void LoggingConfig_Entry::clear_log_type() {
  log_type_ = 0;
}
inline ::LogType LoggingConfig_Entry::_internal_log_type() const {
  return static_cast<::LogType>(log_type_);
}
inline ::LogType LoggingConfig_Entry::log_type() const {
  // @@protoc_insertion_point(field_get:LoggingConfig.Entry.log_type)
  return _internal_log_type();
}
inline void LoggingConfig_Entry::_internal_set_log_type(::LogType value) {
  log_type_ = value;
}
inline void LoggingConfig_Entry::set_log_type(::LogType value) {
  _internal_set_log_type(value);
  // @@protoc_insertion_point(field_set:LoggingConfig.Entry.log_type)
}

// uint32 verbose_level = 2;
inline void LoggingConfig_Entry::clear_verbose_level() {
  verbose_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggingConfig_Entry::_internal_verbose_level() const {
  return verbose_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggingConfig_Entry::verbose_level() const {
  // @@protoc_insertion_point(field_get:LoggingConfig.Entry.verbose_level)
  return _internal_verbose_level();
}
inline void LoggingConfig_Entry::_internal_set_verbose_level(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  verbose_level_ = value;
}
inline void LoggingConfig_Entry::set_verbose_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verbose_level(value);
  // @@protoc_insertion_point(field_set:LoggingConfig.Entry.verbose_level)
}

// uint32 every_n = 3;
inline void LoggingConfig_Entry::clear_every_n() {
  every_n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggingConfig_Entry::_internal_every_n() const {
  return every_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoggingConfig_Entry::every_n() const {
  // @@protoc_insertion_point(field_get:LoggingConfig.Entry.every_n)
  return _internal_every_n();
}
inline void LoggingConfig_Entry::_internal_set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  every_n_ = value;
}
inline void LoggingConfig_Entry::set_every_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_every_n(value);
  // @@protoc_insertion_point(field_set:LoggingConfig.Entry.every_n)
}

// -------------------------------------------------------------------

// LoggingConfig

// repeated .LoggingConfig.Entry entries = 1;
inline int LoggingConfig::_internal_entries_size() const {
  return entries_.size();
}
inline int LoggingConfig::entries_size() const {
  return _internal_entries_size();
}
inline void LoggingConfig::clear_entries() {
  entries_.Clear();
}
inline ::LoggingConfig_Entry* LoggingConfig::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:LoggingConfig.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggingConfig_Entry>*
LoggingConfig::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:LoggingConfig.entries)
  return &entries_;
}
inline const ::LoggingConfig_Entry& LoggingConfig::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::LoggingConfig_Entry& LoggingConfig::entries(int index) const {
  // @@protoc_insertion_point(field_get:LoggingConfig.entries)
  return _internal_entries(index);
}
inline ::LoggingConfig_Entry* LoggingConfig::_internal_add_entries() {
  return entries_.Add();
}
inline ::LoggingConfig_Entry* LoggingConfig::add_entries() {
  // @@protoc_insertion_point(field_add:LoggingConfig.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LoggingConfig_Entry>&
LoggingConfig::entries() const {
  // @@protoc_insertion_point(field_list:LoggingConfig.entries)
  return entries_;
}

// -------------------------------------------------------------------

// TracerConfig

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::LogType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::LogType>() {
  return ::LogType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2flogging_5fconfig_2eproto
