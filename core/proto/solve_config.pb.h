// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/solve_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2fsolve_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2fsolve_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fproto_2fsolve_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26] PROTOBUF_SECTION_VARIABLE(
      protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto;
class AlgorithmConfig;
class AlgorithmConfigDefaultTypeInternal;
extern AlgorithmConfigDefaultTypeInternal _AlgorithmConfig_default_instance_;
class BaseAlgorithmConfig;
class BaseAlgorithmConfigDefaultTypeInternal;
extern BaseAlgorithmConfigDefaultTypeInternal _BaseAlgorithmConfig_default_instance_;
class BaseSolverConfig;
class BaseSolverConfigDefaultTypeInternal;
extern BaseSolverConfigDefaultTypeInternal _BaseSolverConfig_default_instance_;
class ConjLimitConfig;
class ConjLimitConfigDefaultTypeInternal;
extern ConjLimitConfigDefaultTypeInternal _ConjLimitConfig_default_instance_;
class CrossoverConfig;
class CrossoverConfigDefaultTypeInternal;
extern CrossoverConfigDefaultTypeInternal _CrossoverConfig_default_instance_;
class DoerrMutationConfig;
class DoerrMutationConfigDefaultTypeInternal;
extern DoerrMutationConfigDefaultTypeInternal _DoerrMutationConfig_default_instance_;
class EAAlgorithmConfig;
class EAAlgorithmConfigDefaultTypeInternal;
extern EAAlgorithmConfigDefaultTypeInternal _EAAlgorithmConfig_default_instance_;
class FitnessLimitConfig;
class FitnessLimitConfigDefaultTypeInternal;
extern FitnessLimitConfigDefaultTypeInternal _FitnessLimitConfig_default_instance_;
class GAAlgorithmConfig;
class GAAlgorithmConfigDefaultTypeInternal;
extern GAAlgorithmConfigDefaultTypeInternal _GAAlgorithmConfig_default_instance_;
class InstanceConfig;
class InstanceConfigDefaultTypeInternal;
extern InstanceConfigDefaultTypeInternal _InstanceConfig_default_instance_;
class InstanceConfig_SamplingSizeConfig;
class InstanceConfig_SamplingSizeConfigDefaultTypeInternal;
extern InstanceConfig_SamplingSizeConfigDefaultTypeInternal
    _InstanceConfig_SamplingSizeConfig_default_instance_;
class LimitConfig;
class LimitConfigDefaultTypeInternal;
extern LimitConfigDefaultTypeInternal _LimitConfig_default_instance_;
class MinisatCliConfig;
class MinisatCliConfigDefaultTypeInternal;
extern MinisatCliConfigDefaultTypeInternal _MinisatCliConfig_default_instance_;
class MutationConfig;
class MutationConfigDefaultTypeInternal;
extern MutationConfigDefaultTypeInternal _MutationConfig_default_instance_;
class NaiveSolveConfig;
class NaiveSolveConfigDefaultTypeInternal;
extern NaiveSolveConfigDefaultTypeInternal _NaiveSolveConfig_default_instance_;
class ParRBSSolveConfig;
class ParRBSSolveConfigDefaultTypeInternal;
extern ParRBSSolveConfigDefaultTypeInternal _ParRBSSolveConfig_default_instance_;
class ParSolverConfig;
class ParSolverConfigDefaultTypeInternal;
extern ParSolverConfigDefaultTypeInternal _ParSolverConfig_default_instance_;
class PointsLimitConfig;
class PointsLimitConfigDefaultTypeInternal;
extern PointsLimitConfigDefaultTypeInternal _PointsLimitConfig_default_instance_;
class RBSSolveConfig;
class RBSSolveConfigDefaultTypeInternal;
extern RBSSolveConfigDefaultTypeInternal _RBSSolveConfig_default_instance_;
class ResourceLimitConfig;
class ResourceLimitConfigDefaultTypeInternal;
extern ResourceLimitConfigDefaultTypeInternal _ResourceLimitConfig_default_instance_;
class SelectorConfig;
class SelectorConfigDefaultTypeInternal;
extern SelectorConfigDefaultTypeInternal _SelectorConfig_default_instance_;
class SimpSolverConfig;
class SimpSolverConfigDefaultTypeInternal;
extern SimpSolverConfigDefaultTypeInternal _SimpSolverConfig_default_instance_;
class SolveConfig;
class SolveConfigDefaultTypeInternal;
extern SolveConfigDefaultTypeInternal _SolveConfig_default_instance_;
class SolverConfig;
class SolverConfigDefaultTypeInternal;
extern SolverConfigDefaultTypeInternal _SolverConfig_default_instance_;
class StallLimitConfig;
class StallLimitConfigDefaultTypeInternal;
extern StallLimitConfigDefaultTypeInternal _StallLimitConfig_default_instance_;
class UniformMutationConfig;
class UniformMutationConfigDefaultTypeInternal;
extern UniformMutationConfigDefaultTypeInternal _UniformMutationConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::AlgorithmConfig* Arena::CreateMaybeMessage<::AlgorithmConfig>(Arena*);
template <>
::BaseAlgorithmConfig* Arena::CreateMaybeMessage<::BaseAlgorithmConfig>(Arena*);
template <>
::BaseSolverConfig* Arena::CreateMaybeMessage<::BaseSolverConfig>(Arena*);
template <>
::ConjLimitConfig* Arena::CreateMaybeMessage<::ConjLimitConfig>(Arena*);
template <>
::CrossoverConfig* Arena::CreateMaybeMessage<::CrossoverConfig>(Arena*);
template <>
::DoerrMutationConfig* Arena::CreateMaybeMessage<::DoerrMutationConfig>(Arena*);
template <>
::EAAlgorithmConfig* Arena::CreateMaybeMessage<::EAAlgorithmConfig>(Arena*);
template <>
::FitnessLimitConfig* Arena::CreateMaybeMessage<::FitnessLimitConfig>(Arena*);
template <>
::GAAlgorithmConfig* Arena::CreateMaybeMessage<::GAAlgorithmConfig>(Arena*);
template <>
::InstanceConfig* Arena::CreateMaybeMessage<::InstanceConfig>(Arena*);
template <>
::InstanceConfig_SamplingSizeConfig* Arena::CreateMaybeMessage<::InstanceConfig_SamplingSizeConfig>(
    Arena*);
template <>
::LimitConfig* Arena::CreateMaybeMessage<::LimitConfig>(Arena*);
template <>
::MinisatCliConfig* Arena::CreateMaybeMessage<::MinisatCliConfig>(Arena*);
template <>
::MutationConfig* Arena::CreateMaybeMessage<::MutationConfig>(Arena*);
template <>
::NaiveSolveConfig* Arena::CreateMaybeMessage<::NaiveSolveConfig>(Arena*);
template <>
::ParRBSSolveConfig* Arena::CreateMaybeMessage<::ParRBSSolveConfig>(Arena*);
template <>
::ParSolverConfig* Arena::CreateMaybeMessage<::ParSolverConfig>(Arena*);
template <>
::PointsLimitConfig* Arena::CreateMaybeMessage<::PointsLimitConfig>(Arena*);
template <>
::RBSSolveConfig* Arena::CreateMaybeMessage<::RBSSolveConfig>(Arena*);
template <>
::ResourceLimitConfig* Arena::CreateMaybeMessage<::ResourceLimitConfig>(Arena*);
template <>
::SelectorConfig* Arena::CreateMaybeMessage<::SelectorConfig>(Arena*);
template <>
::SimpSolverConfig* Arena::CreateMaybeMessage<::SimpSolverConfig>(Arena*);
template <>
::SolveConfig* Arena::CreateMaybeMessage<::SolveConfig>(Arena*);
template <>
::SolverConfig* Arena::CreateMaybeMessage<::SolverConfig>(Arena*);
template <>
::StallLimitConfig* Arena::CreateMaybeMessage<::StallLimitConfig>(Arena*);
template <>
::UniformMutationConfig* Arena::CreateMaybeMessage<::UniformMutationConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MinisatCliConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:MinisatCliConfig) */ {
 public:
  inline MinisatCliConfig() : MinisatCliConfig(nullptr) {}
  virtual ~MinisatCliConfig();

  MinisatCliConfig(const MinisatCliConfig& from);
  MinisatCliConfig(MinisatCliConfig&& from) noexcept : MinisatCliConfig() {
    *this = ::std::move(from);
  }

  inline MinisatCliConfig& operator=(const MinisatCliConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinisatCliConfig& operator=(MinisatCliConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinisatCliConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinisatCliConfig* internal_default_instance() {
    return reinterpret_cast<const MinisatCliConfig*>(&_MinisatCliConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(MinisatCliConfig& a, MinisatCliConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MinisatCliConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinisatCliConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinisatCliConfig* New() const final {
    return CreateMaybeMessage<MinisatCliConfig>(nullptr);
  }

  MinisatCliConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinisatCliConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinisatCliConfig& from);
  void MergeFrom(const MinisatCliConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinisatCliConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MinisatCliConfig";
  }

 protected:
  explicit MinisatCliConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerbosityLevelFieldNumber = 1,
    kPreprocessingFieldNumber = 2,
    kCpuLimitFieldNumber = 4,
    kMemLimitFieldNumber = 5,
  };
  // int32 verbosity_level = 1;
  void clear_verbosity_level();
  ::PROTOBUF_NAMESPACE_ID::int32 verbosity_level() const;
  void set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_verbosity_level() const;
  void _internal_set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool preprocessing = 2;
  void clear_preprocessing();
  bool preprocessing() const;
  void set_preprocessing(bool value);

 private:
  bool _internal_preprocessing() const;
  void _internal_set_preprocessing(bool value);

 public:
  // int32 cpu_limit = 4;
  void clear_cpu_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_limit() const;
  void set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_limit() const;
  void _internal_set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 mem_limit = 5;
  void clear_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 mem_limit() const;
  void set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mem_limit() const;
  void _internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:MinisatCliConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 verbosity_level_;
  bool preprocessing_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 mem_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class BaseSolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:BaseSolverConfig) */ {
 public:
  inline BaseSolverConfig() : BaseSolverConfig(nullptr) {}
  virtual ~BaseSolverConfig();

  BaseSolverConfig(const BaseSolverConfig& from);
  BaseSolverConfig(BaseSolverConfig&& from) noexcept : BaseSolverConfig() {
    *this = ::std::move(from);
  }

  inline BaseSolverConfig& operator=(const BaseSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseSolverConfig& operator=(BaseSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseSolverConfig* internal_default_instance() {
    return reinterpret_cast<const BaseSolverConfig*>(&_BaseSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(BaseSolverConfig& a, BaseSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseSolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseSolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseSolverConfig* New() const final {
    return CreateMaybeMessage<BaseSolverConfig>(nullptr);
  }

  BaseSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseSolverConfig& from);
  void MergeFrom(const BaseSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BaseSolverConfig";
  }

 protected:
  explicit BaseSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarDecayFieldNumber = 1,
    kClaDecayFieldNumber = 2,
    kRndFreqFieldNumber = 3,
    kCcminModeFieldNumber = 5,
    kPhaseSavingFieldNumber = 6,
    kRndInitFieldNumber = 7,
    kLubyFieldNumber = 8,
    kRfirstFieldNumber = 9,
    kRincFieldNumber = 10,
    kGcFracFieldNumber = 11,
    kMinLearntsFieldNumber = 12,
  };
  // double var_decay = 1;
  void clear_var_decay();
  double var_decay() const;
  void set_var_decay(double value);

 private:
  double _internal_var_decay() const;
  void _internal_set_var_decay(double value);

 public:
  // double cla_decay = 2;
  void clear_cla_decay();
  double cla_decay() const;
  void set_cla_decay(double value);

 private:
  double _internal_cla_decay() const;
  void _internal_set_cla_decay(double value);

 public:
  // double rnd_freq = 3;
  void clear_rnd_freq();
  double rnd_freq() const;
  void set_rnd_freq(double value);

 private:
  double _internal_rnd_freq() const;
  void _internal_set_rnd_freq(double value);

 public:
  // int32 ccmin_mode = 5;
  void clear_ccmin_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 ccmin_mode() const;
  void set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ccmin_mode() const;
  void _internal_set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 phase_saving = 6;
  void clear_phase_saving();
  ::PROTOBUF_NAMESPACE_ID::int32 phase_saving() const;
  void set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phase_saving() const;
  void _internal_set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // bool rnd_init = 7;
  void clear_rnd_init();
  bool rnd_init() const;
  void set_rnd_init(bool value);

 private:
  bool _internal_rnd_init() const;
  void _internal_set_rnd_init(bool value);

 public:
  // bool luby = 8;
  void clear_luby();
  bool luby() const;
  void set_luby(bool value);

 private:
  bool _internal_luby() const;
  void _internal_set_luby(bool value);

 public:
  // int32 rfirst = 9;
  void clear_rfirst();
  ::PROTOBUF_NAMESPACE_ID::int32 rfirst() const;
  void set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rfirst() const;
  void _internal_set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // double rinc = 10;
  void clear_rinc();
  double rinc() const;
  void set_rinc(double value);

 private:
  double _internal_rinc() const;
  void _internal_set_rinc(double value);

 public:
  // double gc_frac = 11;
  void clear_gc_frac();
  double gc_frac() const;
  void set_gc_frac(double value);

 private:
  double _internal_gc_frac() const;
  void _internal_set_gc_frac(double value);

 public:
  // int32 min_learnts = 12;
  void clear_min_learnts();
  ::PROTOBUF_NAMESPACE_ID::int32 min_learnts() const;
  void set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_learnts() const;
  void _internal_set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // @@protoc_insertion_point(class_scope:BaseSolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double var_decay_;
  double cla_decay_;
  double rnd_freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 ccmin_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_saving_;
  bool rnd_init_;
  bool luby_;
  ::PROTOBUF_NAMESPACE_ID::int32 rfirst_;
  double rinc_;
  double gc_frac_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_learnts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimpSolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SimpSolverConfig) */ {
 public:
  inline SimpSolverConfig() : SimpSolverConfig(nullptr) {}
  virtual ~SimpSolverConfig();

  SimpSolverConfig(const SimpSolverConfig& from);
  SimpSolverConfig(SimpSolverConfig&& from) noexcept : SimpSolverConfig() {
    *this = ::std::move(from);
  }

  inline SimpSolverConfig& operator=(const SimpSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpSolverConfig& operator=(SimpSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpSolverConfig* internal_default_instance() {
    return reinterpret_cast<const SimpSolverConfig*>(&_SimpSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(SimpSolverConfig& a, SimpSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpSolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpSolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpSolverConfig* New() const final {
    return CreateMaybeMessage<SimpSolverConfig>(nullptr);
  }

  SimpSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpSolverConfig& from);
  void MergeFrom(const SimpSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimpSolverConfig";
  }

 protected:
  explicit SimpSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinisatCliConfigFieldNumber = 8,
    kBaseSolverConfigFieldNumber = 9,
    kUseAsymmFieldNumber = 1,
    kUseRcheckFieldNumber = 2,
    kUseElimFieldNumber = 3,
    kGrowFieldNumber = 4,
    kClauseLimFieldNumber = 5,
    kSubsumptionLimFieldNumber = 6,
    kSimpGarbageFracFieldNumber = 7,
  };
  // .MinisatCliConfig minisat_cli_config = 8;
  bool has_minisat_cli_config() const;

 private:
  bool _internal_has_minisat_cli_config() const;

 public:
  void clear_minisat_cli_config();
  const ::MinisatCliConfig& minisat_cli_config() const;
  ::MinisatCliConfig* release_minisat_cli_config();
  ::MinisatCliConfig* mutable_minisat_cli_config();
  void set_allocated_minisat_cli_config(::MinisatCliConfig* minisat_cli_config);

 private:
  const ::MinisatCliConfig& _internal_minisat_cli_config() const;
  ::MinisatCliConfig* _internal_mutable_minisat_cli_config();

 public:
  void unsafe_arena_set_allocated_minisat_cli_config(::MinisatCliConfig* minisat_cli_config);
  ::MinisatCliConfig* unsafe_arena_release_minisat_cli_config();

  // .BaseSolverConfig base_solver_config = 9;
  bool has_base_solver_config() const;

 private:
  bool _internal_has_base_solver_config() const;

 public:
  void clear_base_solver_config();
  const ::BaseSolverConfig& base_solver_config() const;
  ::BaseSolverConfig* release_base_solver_config();
  ::BaseSolverConfig* mutable_base_solver_config();
  void set_allocated_base_solver_config(::BaseSolverConfig* base_solver_config);

 private:
  const ::BaseSolverConfig& _internal_base_solver_config() const;
  ::BaseSolverConfig* _internal_mutable_base_solver_config();

 public:
  void unsafe_arena_set_allocated_base_solver_config(::BaseSolverConfig* base_solver_config);
  ::BaseSolverConfig* unsafe_arena_release_base_solver_config();

  // bool use_asymm = 1;
  void clear_use_asymm();
  bool use_asymm() const;
  void set_use_asymm(bool value);

 private:
  bool _internal_use_asymm() const;
  void _internal_set_use_asymm(bool value);

 public:
  // bool use_rcheck = 2;
  void clear_use_rcheck();
  bool use_rcheck() const;
  void set_use_rcheck(bool value);

 private:
  bool _internal_use_rcheck() const;
  void _internal_set_use_rcheck(bool value);

 public:
  // bool use_elim = 3;
  void clear_use_elim();
  bool use_elim() const;
  void set_use_elim(bool value);

 private:
  bool _internal_use_elim() const;
  void _internal_set_use_elim(bool value);

 public:
  // int32 grow = 4;
  void clear_grow();
  ::PROTOBUF_NAMESPACE_ID::int32 grow() const;
  void set_grow(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grow() const;
  void _internal_set_grow(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 clause_lim = 5;
  void clear_clause_lim();
  ::PROTOBUF_NAMESPACE_ID::int32 clause_lim() const;
  void set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clause_lim() const;
  void _internal_set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // int32 subsumption_lim = 6;
  void clear_subsumption_lim();
  ::PROTOBUF_NAMESPACE_ID::int32 subsumption_lim() const;
  void set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subsumption_lim() const;
  void _internal_set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value);

 public:
  // double simp_garbage_frac = 7;
  void clear_simp_garbage_frac();
  double simp_garbage_frac() const;
  void set_simp_garbage_frac(double value);

 private:
  double _internal_simp_garbage_frac() const;
  void _internal_set_simp_garbage_frac(double value);

 public:
  // @@protoc_insertion_point(class_scope:SimpSolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MinisatCliConfig* minisat_cli_config_;
  ::BaseSolverConfig* base_solver_config_;
  bool use_asymm_;
  bool use_rcheck_;
  bool use_elim_;
  ::PROTOBUF_NAMESPACE_ID::int32 grow_;
  ::PROTOBUF_NAMESPACE_ID::int32 clause_lim_;
  ::PROTOBUF_NAMESPACE_ID::int32 subsumption_lim_;
  double simp_garbage_frac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ParSolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ParSolverConfig) */ {
 public:
  inline ParSolverConfig() : ParSolverConfig(nullptr) {}
  virtual ~ParSolverConfig();

  ParSolverConfig(const ParSolverConfig& from);
  ParSolverConfig(ParSolverConfig&& from) noexcept : ParSolverConfig() {
    *this = ::std::move(from);
  }

  inline ParSolverConfig& operator=(const ParSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParSolverConfig& operator=(ParSolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParSolverConfig* internal_default_instance() {
    return reinterpret_cast<const ParSolverConfig*>(&_ParSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(ParSolverConfig& a, ParSolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ParSolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParSolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParSolverConfig* New() const final {
    return CreateMaybeMessage<ParSolverConfig>(nullptr);
  }

  ParSolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParSolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParSolverConfig& from);
  void MergeFrom(const ParSolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParSolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParSolverConfig";
  }

 protected:
  explicit ParSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverConfigFieldNumber = 3,
    kMaxThreadsFieldNumber = 1,
  };
  // .SolverConfig solver_config = 3;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // uint32 max_threads = 1;
  void clear_max_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_threads() const;
  void set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_threads() const;
  void _internal_set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:ParSolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SolverConfig* solver_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_threads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SolverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SolverConfig) */ {
 public:
  inline SolverConfig() : SolverConfig(nullptr) {}
  virtual ~SolverConfig();

  SolverConfig(const SolverConfig& from);
  SolverConfig(SolverConfig&& from) noexcept : SolverConfig() {
    *this = ::std::move(from);
  }

  inline SolverConfig& operator=(const SolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverConfig& operator=(SolverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolverConfig* internal_default_instance() {
    return reinterpret_cast<const SolverConfig*>(&_SolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  friend void swap(SolverConfig& a, SolverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolverConfig* New() const final {
    return CreateMaybeMessage<SolverConfig>(nullptr);
  }

  SolverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolverConfig& from);
  void MergeFrom(const SolverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolverConfig";
  }

 protected:
  explicit SolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverTypeFieldNumber = 1,
    kSimpSolverConfigFieldNumber = 4,
    kParSolverConfigFieldNumber = 5,
  };
  // string solver_type = 1;
  void clear_solver_type();
  const std::string& solver_type() const;
  void set_solver_type(const std::string& value);
  void set_solver_type(std::string&& value);
  void set_solver_type(const char* value);
  void set_solver_type(const char* value, size_t size);
  std::string* mutable_solver_type();
  std::string* release_solver_type();
  void set_allocated_solver_type(std::string* solver_type);

 private:
  const std::string& _internal_solver_type() const;
  void _internal_set_solver_type(const std::string& value);
  std::string* _internal_mutable_solver_type();

 public:
  // .SimpSolverConfig simp_solver_config = 4;
  bool has_simp_solver_config() const;

 private:
  bool _internal_has_simp_solver_config() const;

 public:
  void clear_simp_solver_config();
  const ::SimpSolverConfig& simp_solver_config() const;
  ::SimpSolverConfig* release_simp_solver_config();
  ::SimpSolverConfig* mutable_simp_solver_config();
  void set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config);

 private:
  const ::SimpSolverConfig& _internal_simp_solver_config() const;
  ::SimpSolverConfig* _internal_mutable_simp_solver_config();

 public:
  void unsafe_arena_set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config);
  ::SimpSolverConfig* unsafe_arena_release_simp_solver_config();

  // .ParSolverConfig par_solver_config = 5;
  bool has_par_solver_config() const;

 private:
  bool _internal_has_par_solver_config() const;

 public:
  void clear_par_solver_config();
  const ::ParSolverConfig& par_solver_config() const;
  ::ParSolverConfig* release_par_solver_config();
  ::ParSolverConfig* mutable_par_solver_config();
  void set_allocated_par_solver_config(::ParSolverConfig* par_solver_config);

 private:
  const ::ParSolverConfig& _internal_par_solver_config() const;
  ::ParSolverConfig* _internal_mutable_par_solver_config();

 public:
  void unsafe_arena_set_allocated_par_solver_config(::ParSolverConfig* par_solver_config);
  ::ParSolverConfig* unsafe_arena_release_par_solver_config();

  // @@protoc_insertion_point(class_scope:SolverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solver_type_;
  ::SimpSolverConfig* simp_solver_config_;
  ::ParSolverConfig* par_solver_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ResourceLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ResourceLimitConfig) */ {
 public:
  inline ResourceLimitConfig() : ResourceLimitConfig(nullptr) {}
  virtual ~ResourceLimitConfig();

  ResourceLimitConfig(const ResourceLimitConfig& from);
  ResourceLimitConfig(ResourceLimitConfig&& from) noexcept : ResourceLimitConfig() {
    *this = ::std::move(from);
  }

  inline ResourceLimitConfig& operator=(const ResourceLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceLimitConfig& operator=(ResourceLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceLimitConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceLimitConfig*>(&_ResourceLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  friend void swap(ResourceLimitConfig& a, ResourceLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceLimitConfig* New() const final {
    return CreateMaybeMessage<ResourceLimitConfig>(nullptr);
  }

  ResourceLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceLimitConfig& from);
  void MergeFrom(const ResourceLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResourceLimitConfig";
  }

 protected:
  explicit ResourceLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryLimitKbFieldNumber = 1,
    kTimeLimitSecFieldNumber = 2,
  };
  // uint32 memory_limit_kb = 1;
  void clear_memory_limit_kb();
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_limit_kb() const;
  void set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memory_limit_kb() const;
  void _internal_set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 time_limit_sec = 2;
  void clear_time_limit_sec();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_limit_sec() const;
  void set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_limit_sec() const;
  void _internal_set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:ResourceLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_limit_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_limit_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FitnessLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:FitnessLimitConfig) */ {
 public:
  inline FitnessLimitConfig() : FitnessLimitConfig(nullptr) {}
  virtual ~FitnessLimitConfig();

  FitnessLimitConfig(const FitnessLimitConfig& from);
  FitnessLimitConfig(FitnessLimitConfig&& from) noexcept : FitnessLimitConfig() {
    *this = ::std::move(from);
  }

  inline FitnessLimitConfig& operator=(const FitnessLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FitnessLimitConfig& operator=(FitnessLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FitnessLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FitnessLimitConfig* internal_default_instance() {
    return reinterpret_cast<const FitnessLimitConfig*>(&_FitnessLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;

  friend void swap(FitnessLimitConfig& a, FitnessLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FitnessLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FitnessLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FitnessLimitConfig* New() const final {
    return CreateMaybeMessage<FitnessLimitConfig>(nullptr);
  }

  FitnessLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FitnessLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FitnessLimitConfig& from);
  void MergeFrom(const FitnessLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FitnessLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FitnessLimitConfig";
  }

 protected:
  explicit FitnessLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowestFitnessFieldNumber = 1,
    kMaxSizeFieldNumber = 2,
  };
  // double lowest_fitness = 1;
  void clear_lowest_fitness();
  double lowest_fitness() const;
  void set_lowest_fitness(double value);

 private:
  double _internal_lowest_fitness() const;
  void _internal_set_lowest_fitness(double value);

 public:
  // uint32 max_size = 2;
  void clear_max_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size() const;
  void set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_size() const;
  void _internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:FitnessLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lowest_fitness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PointsLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:PointsLimitConfig) */ {
 public:
  inline PointsLimitConfig() : PointsLimitConfig(nullptr) {}
  virtual ~PointsLimitConfig();

  PointsLimitConfig(const PointsLimitConfig& from);
  PointsLimitConfig(PointsLimitConfig&& from) noexcept : PointsLimitConfig() {
    *this = ::std::move(from);
  }

  inline PointsLimitConfig& operator=(const PointsLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointsLimitConfig& operator=(PointsLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointsLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointsLimitConfig* internal_default_instance() {
    return reinterpret_cast<const PointsLimitConfig*>(&_PointsLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;

  friend void swap(PointsLimitConfig& a, PointsLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PointsLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointsLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointsLimitConfig* New() const final {
    return CreateMaybeMessage<PointsLimitConfig>(nullptr);
  }

  PointsLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointsLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointsLimitConfig& from);
  void MergeFrom(const PointsLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointsLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PointsLimitConfig";
  }

 protected:
  explicit PointsLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPointsVisitedFieldNumber = 1,
  };
  // uint32 max_points_visited = 1;
  void clear_max_points_visited();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_visited() const;
  void set_max_points_visited(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_points_visited() const;
  void _internal_set_max_points_visited(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:PointsLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_points_visited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StallLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:StallLimitConfig) */ {
 public:
  inline StallLimitConfig() : StallLimitConfig(nullptr) {}
  virtual ~StallLimitConfig();

  StallLimitConfig(const StallLimitConfig& from);
  StallLimitConfig(StallLimitConfig&& from) noexcept : StallLimitConfig() {
    *this = ::std::move(from);
  }

  inline StallLimitConfig& operator=(const StallLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StallLimitConfig& operator=(StallLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StallLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StallLimitConfig* internal_default_instance() {
    return reinterpret_cast<const StallLimitConfig*>(&_StallLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;

  friend void swap(StallLimitConfig& a, StallLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StallLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StallLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StallLimitConfig* New() const final {
    return CreateMaybeMessage<StallLimitConfig>(nullptr);
  }

  StallLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StallLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StallLimitConfig& from);
  void MergeFrom(const StallLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StallLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StallLimitConfig";
  }

 protected:
  explicit StallLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsBeforeStallFieldNumber = 1,
  };
  // uint32 steps_before_stall = 1;
  void clear_steps_before_stall();
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_before_stall() const;
  void set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steps_before_stall() const;
  void _internal_set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:StallLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_before_stall_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConjLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ConjLimitConfig) */ {
 public:
  inline ConjLimitConfig() : ConjLimitConfig(nullptr) {}
  virtual ~ConjLimitConfig();

  ConjLimitConfig(const ConjLimitConfig& from);
  ConjLimitConfig(ConjLimitConfig&& from) noexcept : ConjLimitConfig() {
    *this = ::std::move(from);
  }

  inline ConjLimitConfig& operator=(const ConjLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConjLimitConfig& operator=(ConjLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConjLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConjLimitConfig* internal_default_instance() {
    return reinterpret_cast<const ConjLimitConfig*>(&_ConjLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;

  friend void swap(ConjLimitConfig& a, ConjLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ConjLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConjLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConjLimitConfig* New() const final {
    return CreateMaybeMessage<ConjLimitConfig>(nullptr);
  }

  ConjLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConjLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConjLimitConfig& from);
  void MergeFrom(const ConjLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConjLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConjLimitConfig";
  }

 protected:
  explicit ConjLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitConfigFieldNumber = 1,
  };
  // repeated .LimitConfig limit_config = 1;
  int limit_config_size() const;

 private:
  int _internal_limit_config_size() const;

 public:
  void clear_limit_config();
  ::LimitConfig* mutable_limit_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LimitConfig>* mutable_limit_config();

 private:
  const ::LimitConfig& _internal_limit_config(int index) const;
  ::LimitConfig* _internal_add_limit_config();

 public:
  const ::LimitConfig& limit_config(int index) const;
  ::LimitConfig* add_limit_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LimitConfig>& limit_config() const;

  // @@protoc_insertion_point(class_scope:ConjLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LimitConfig> limit_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StallLimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:StallLimitConfig) */ {
 public:
  inline StallLimitConfig() : StallLimitConfig(nullptr) {}
  virtual ~StallLimitConfig();

  StallLimitConfig(const StallLimitConfig& from);
  StallLimitConfig(StallLimitConfig&& from) noexcept : StallLimitConfig() {
    *this = ::std::move(from);
  }

  inline StallLimitConfig& operator=(const StallLimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StallLimitConfig& operator=(StallLimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StallLimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StallLimitConfig* internal_default_instance() {
    return reinterpret_cast<const StallLimitConfig*>(&_StallLimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;

  friend void swap(StallLimitConfig& a, StallLimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StallLimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StallLimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StallLimitConfig* New() const final {
    return CreateMaybeMessage<StallLimitConfig>(nullptr);
  }

  StallLimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StallLimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StallLimitConfig& from);
  void MergeFrom(const StallLimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StallLimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StallLimitConfig";
  }

 protected:
  explicit StallLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsBeforeStallFieldNumber = 1,
  };
  // uint32 steps_before_stall = 1;
  void clear_steps_before_stall();
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_before_stall() const;
  void set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steps_before_stall() const;
  void _internal_set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:StallLimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steps_before_stall_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LimitConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:LimitConfig) */ {
 public:
  inline LimitConfig() : LimitConfig(nullptr) {}
  virtual ~LimitConfig();

  LimitConfig(const LimitConfig& from);
  LimitConfig(LimitConfig&& from) noexcept : LimitConfig() {
    *this = ::std::move(from);
  }

  inline LimitConfig& operator=(const LimitConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitConfig& operator=(LimitConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LimitConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitConfig* internal_default_instance() {
    return reinterpret_cast<const LimitConfig*>(&_LimitConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;

  friend void swap(LimitConfig& a, LimitConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitConfig* New() const final {
    return CreateMaybeMessage<LimitConfig>(nullptr);
  }

  LimitConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LimitConfig& from);
  void MergeFrom(const LimitConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LimitConfig";
  }

 protected:
  explicit LimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitTypeFieldNumber = 1,
    kResourceLimitConfigFieldNumber = 2,
    kFitnessLimitConfigFieldNumber = 3,
    kConjLimitConfigFieldNumber = 4,
    kPointsLimitConfigFieldNumber = 5,
    kStallLimitConfigFieldNumber = 6,
  };
  // string limit_type = 1;
  void clear_limit_type();
  const std::string& limit_type() const;
  void set_limit_type(const std::string& value);
  void set_limit_type(std::string&& value);
  void set_limit_type(const char* value);
  void set_limit_type(const char* value, size_t size);
  std::string* mutable_limit_type();
  std::string* release_limit_type();
  void set_allocated_limit_type(std::string* limit_type);

 private:
  const std::string& _internal_limit_type() const;
  void _internal_set_limit_type(const std::string& value);
  std::string* _internal_mutable_limit_type();

 public:
  // .ResourceLimitConfig resource_limit_config = 2;
  bool has_resource_limit_config() const;

 private:
  bool _internal_has_resource_limit_config() const;

 public:
  void clear_resource_limit_config();
  const ::ResourceLimitConfig& resource_limit_config() const;
  ::ResourceLimitConfig* release_resource_limit_config();
  ::ResourceLimitConfig* mutable_resource_limit_config();
  void set_allocated_resource_limit_config(::ResourceLimitConfig* resource_limit_config);

 private:
  const ::ResourceLimitConfig& _internal_resource_limit_config() const;
  ::ResourceLimitConfig* _internal_mutable_resource_limit_config();

 public:
  void unsafe_arena_set_allocated_resource_limit_config(
      ::ResourceLimitConfig* resource_limit_config);
  ::ResourceLimitConfig* unsafe_arena_release_resource_limit_config();

  // .FitnessLimitConfig fitness_limit_config = 3;
  bool has_fitness_limit_config() const;

 private:
  bool _internal_has_fitness_limit_config() const;

 public:
  void clear_fitness_limit_config();
  const ::FitnessLimitConfig& fitness_limit_config() const;
  ::FitnessLimitConfig* release_fitness_limit_config();
  ::FitnessLimitConfig* mutable_fitness_limit_config();
  void set_allocated_fitness_limit_config(::FitnessLimitConfig* fitness_limit_config);

 private:
  const ::FitnessLimitConfig& _internal_fitness_limit_config() const;
  ::FitnessLimitConfig* _internal_mutable_fitness_limit_config();

 public:
  void unsafe_arena_set_allocated_fitness_limit_config(::FitnessLimitConfig* fitness_limit_config);
  ::FitnessLimitConfig* unsafe_arena_release_fitness_limit_config();

  // .ConjLimitConfig conj_limit_config = 4;
  bool has_conj_limit_config() const;

 private:
  bool _internal_has_conj_limit_config() const;

 public:
  void clear_conj_limit_config();
  const ::ConjLimitConfig& conj_limit_config() const;
  ::ConjLimitConfig* release_conj_limit_config();
  ::ConjLimitConfig* mutable_conj_limit_config();
  void set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config);

 private:
  const ::ConjLimitConfig& _internal_conj_limit_config() const;
  ::ConjLimitConfig* _internal_mutable_conj_limit_config();

 public:
  void unsafe_arena_set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config);
  ::ConjLimitConfig* unsafe_arena_release_conj_limit_config();

  // .PointsLimitConfig points_limit_config = 5;
  bool has_points_limit_config() const;

 private:
  bool _internal_has_points_limit_config() const;

 public:
  void clear_points_limit_config();
  const ::PointsLimitConfig& points_limit_config() const;
  ::PointsLimitConfig* release_points_limit_config();
  ::PointsLimitConfig* mutable_points_limit_config();
  void set_allocated_points_limit_config(::PointsLimitConfig* points_limit_config);

 private:
  const ::PointsLimitConfig& _internal_points_limit_config() const;
  ::PointsLimitConfig* _internal_mutable_points_limit_config();

 public:
  void unsafe_arena_set_allocated_points_limit_config(::PointsLimitConfig* points_limit_config);
  ::PointsLimitConfig* unsafe_arena_release_points_limit_config();

  // .StallLimitConfig stall_limit_config = 6;
  bool has_stall_limit_config() const;

 private:
  bool _internal_has_stall_limit_config() const;

 public:
  void clear_stall_limit_config();
  const ::StallLimitConfig& stall_limit_config() const;
  ::StallLimitConfig* release_stall_limit_config();
  ::StallLimitConfig* mutable_stall_limit_config();
  void set_allocated_stall_limit_config(::StallLimitConfig* stall_limit_config);

 private:
  const ::StallLimitConfig& _internal_stall_limit_config() const;
  ::StallLimitConfig* _internal_mutable_stall_limit_config();

 public:
  void unsafe_arena_set_allocated_stall_limit_config(::StallLimitConfig* stall_limit_config);
  ::StallLimitConfig* unsafe_arena_release_stall_limit_config();

  // @@protoc_insertion_point(class_scope:LimitConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr limit_type_;
  ::ResourceLimitConfig* resource_limit_config_;
  ::FitnessLimitConfig* fitness_limit_config_;
  ::ConjLimitConfig* conj_limit_config_;
  ::PointsLimitConfig* points_limit_config_;
  ::StallLimitConfig* stall_limit_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UniformMutationConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:UniformMutationConfig) */ {
 public:
  inline UniformMutationConfig() : UniformMutationConfig(nullptr) {}
  virtual ~UniformMutationConfig();

  UniformMutationConfig(const UniformMutationConfig& from);
  UniformMutationConfig(UniformMutationConfig&& from) noexcept : UniformMutationConfig() {
    *this = ::std::move(from);
  }

  inline UniformMutationConfig& operator=(const UniformMutationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniformMutationConfig& operator=(UniformMutationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniformMutationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniformMutationConfig* internal_default_instance() {
    return reinterpret_cast<const UniformMutationConfig*>(
        &_UniformMutationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;

  friend void swap(UniformMutationConfig& a, UniformMutationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(UniformMutationConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniformMutationConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniformMutationConfig* New() const final {
    return CreateMaybeMessage<UniformMutationConfig>(nullptr);
  }

  UniformMutationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniformMutationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniformMutationConfig& from);
  void MergeFrom(const UniformMutationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniformMutationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UniformMutationConfig";
  }

 protected:
  explicit UniformMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
  };
  // double scale = 1;
  void clear_scale();
  double scale() const;
  void set_scale(double value);

 private:
  double _internal_scale() const;
  void _internal_set_scale(double value);

 public:
  // @@protoc_insertion_point(class_scope:UniformMutationConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DoerrMutationConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:DoerrMutationConfig) */ {
 public:
  inline DoerrMutationConfig() : DoerrMutationConfig(nullptr) {}
  virtual ~DoerrMutationConfig();

  DoerrMutationConfig(const DoerrMutationConfig& from);
  DoerrMutationConfig(DoerrMutationConfig&& from) noexcept : DoerrMutationConfig() {
    *this = ::std::move(from);
  }

  inline DoerrMutationConfig& operator=(const DoerrMutationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoerrMutationConfig& operator=(DoerrMutationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoerrMutationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoerrMutationConfig* internal_default_instance() {
    return reinterpret_cast<const DoerrMutationConfig*>(&_DoerrMutationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;

  friend void swap(DoerrMutationConfig& a, DoerrMutationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DoerrMutationConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoerrMutationConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoerrMutationConfig* New() const final {
    return CreateMaybeMessage<DoerrMutationConfig>(nullptr);
  }

  DoerrMutationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoerrMutationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoerrMutationConfig& from);
  void MergeFrom(const DoerrMutationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoerrMutationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DoerrMutationConfig";
  }

 protected:
  explicit DoerrMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBetaFieldNumber = 1,
  };
  // double beta = 1;
  void clear_beta();
  double beta() const;
  void set_beta(double value);

 private:
  double _internal_beta() const;
  void _internal_set_beta(double value);

 public:
  // @@protoc_insertion_point(class_scope:DoerrMutationConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double beta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MutationConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:MutationConfig) */ {
 public:
  inline MutationConfig() : MutationConfig(nullptr) {}
  virtual ~MutationConfig();

  MutationConfig(const MutationConfig& from);
  MutationConfig(MutationConfig&& from) noexcept : MutationConfig() {
    *this = ::std::move(from);
  }

  inline MutationConfig& operator=(const MutationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutationConfig& operator=(MutationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutationConfig* internal_default_instance() {
    return reinterpret_cast<const MutationConfig*>(&_MutationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;

  friend void swap(MutationConfig& a, MutationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MutationConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutationConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutationConfig* New() const final {
    return CreateMaybeMessage<MutationConfig>(nullptr);
  }

  MutationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutationConfig& from);
  void MergeFrom(const MutationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MutationConfig";
  }

 protected:
  explicit MutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationTypeFieldNumber = 1,
    kUniformMutationConfigFieldNumber = 2,
    kDoerrMutationConfigFieldNumber = 3,
  };
  // string mutation_type = 1;
  void clear_mutation_type();
  const std::string& mutation_type() const;
  void set_mutation_type(const std::string& value);
  void set_mutation_type(std::string&& value);
  void set_mutation_type(const char* value);
  void set_mutation_type(const char* value, size_t size);
  std::string* mutable_mutation_type();
  std::string* release_mutation_type();
  void set_allocated_mutation_type(std::string* mutation_type);

 private:
  const std::string& _internal_mutation_type() const;
  void _internal_set_mutation_type(const std::string& value);
  std::string* _internal_mutable_mutation_type();

 public:
  // .UniformMutationConfig uniform_mutation_config = 2;
  bool has_uniform_mutation_config() const;

 private:
  bool _internal_has_uniform_mutation_config() const;

 public:
  void clear_uniform_mutation_config();
  const ::UniformMutationConfig& uniform_mutation_config() const;
  ::UniformMutationConfig* release_uniform_mutation_config();
  ::UniformMutationConfig* mutable_uniform_mutation_config();
  void set_allocated_uniform_mutation_config(::UniformMutationConfig* uniform_mutation_config);

 private:
  const ::UniformMutationConfig& _internal_uniform_mutation_config() const;
  ::UniformMutationConfig* _internal_mutable_uniform_mutation_config();

 public:
  void unsafe_arena_set_allocated_uniform_mutation_config(
      ::UniformMutationConfig* uniform_mutation_config);
  ::UniformMutationConfig* unsafe_arena_release_uniform_mutation_config();

  // .DoerrMutationConfig doerr_mutation_config = 3;
  bool has_doerr_mutation_config() const;

 private:
  bool _internal_has_doerr_mutation_config() const;

 public:
  void clear_doerr_mutation_config();
  const ::DoerrMutationConfig& doerr_mutation_config() const;
  ::DoerrMutationConfig* release_doerr_mutation_config();
  ::DoerrMutationConfig* mutable_doerr_mutation_config();
  void set_allocated_doerr_mutation_config(::DoerrMutationConfig* doerr_mutation_config);

 private:
  const ::DoerrMutationConfig& _internal_doerr_mutation_config() const;
  ::DoerrMutationConfig* _internal_mutable_doerr_mutation_config();

 public:
  void unsafe_arena_set_allocated_doerr_mutation_config(
      ::DoerrMutationConfig* doerr_mutation_config);
  ::DoerrMutationConfig* unsafe_arena_release_doerr_mutation_config();

  // @@protoc_insertion_point(class_scope:MutationConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mutation_type_;
  ::UniformMutationConfig* uniform_mutation_config_;
  ::DoerrMutationConfig* doerr_mutation_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CrossoverConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:CrossoverConfig) */ {
 public:
  inline CrossoverConfig() : CrossoverConfig(nullptr) {}
  virtual ~CrossoverConfig();

  CrossoverConfig(const CrossoverConfig& from);
  CrossoverConfig(CrossoverConfig&& from) noexcept : CrossoverConfig() {
    *this = ::std::move(from);
  }

  inline CrossoverConfig& operator=(const CrossoverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossoverConfig& operator=(CrossoverConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrossoverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CrossoverConfig* internal_default_instance() {
    return reinterpret_cast<const CrossoverConfig*>(&_CrossoverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;

  friend void swap(CrossoverConfig& a, CrossoverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossoverConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossoverConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrossoverConfig* New() const final {
    return CreateMaybeMessage<CrossoverConfig>(nullptr);
  }

  CrossoverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrossoverConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrossoverConfig& from);
  void MergeFrom(const CrossoverConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossoverConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CrossoverConfig";
  }

 protected:
  explicit CrossoverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrossoverTypeFieldNumber = 1,
  };
  // string crossover_type = 1;
  void clear_crossover_type();
  const std::string& crossover_type() const;
  void set_crossover_type(const std::string& value);
  void set_crossover_type(std::string&& value);
  void set_crossover_type(const char* value);
  void set_crossover_type(const char* value, size_t size);
  std::string* mutable_crossover_type();
  std::string* release_crossover_type();
  void set_allocated_crossover_type(std::string* crossover_type);

 private:
  const std::string& _internal_crossover_type() const;
  void _internal_set_crossover_type(const std::string& value);
  std::string* _internal_mutable_crossover_type();

 public:
  // @@protoc_insertion_point(class_scope:CrossoverConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crossover_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SelectorConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SelectorConfig) */ {
 public:
  inline SelectorConfig() : SelectorConfig(nullptr) {}
  virtual ~SelectorConfig();

  SelectorConfig(const SelectorConfig& from);
  SelectorConfig(SelectorConfig&& from) noexcept : SelectorConfig() {
    *this = ::std::move(from);
  }

  inline SelectorConfig& operator=(const SelectorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectorConfig& operator=(SelectorConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectorConfig* internal_default_instance() {
    return reinterpret_cast<const SelectorConfig*>(&_SelectorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;

  friend void swap(SelectorConfig& a, SelectorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectorConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectorConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectorConfig* New() const final {
    return CreateMaybeMessage<SelectorConfig>(nullptr);
  }

  SelectorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectorConfig& from);
  void MergeFrom(const SelectorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectorConfig";
  }

 protected:
  explicit SelectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectorTypeFieldNumber = 1,
  };
  // string selector_type = 1;
  void clear_selector_type();
  const std::string& selector_type() const;
  void set_selector_type(const std::string& value);
  void set_selector_type(std::string&& value);
  void set_selector_type(const char* value);
  void set_selector_type(const char* value, size_t size);
  std::string* mutable_selector_type();
  std::string* release_selector_type();
  void set_allocated_selector_type(std::string* selector_type);

 private:
  const std::string& _internal_selector_type() const;
  void _internal_set_selector_type(const std::string& value);
  std::string* _internal_mutable_selector_type();

 public:
  // @@protoc_insertion_point(class_scope:SelectorConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InstanceConfig_SamplingSizeConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:InstanceConfig.SamplingSizeConfig)
                   */
{
 public:
  inline InstanceConfig_SamplingSizeConfig() : InstanceConfig_SamplingSizeConfig(nullptr) {}
  virtual ~InstanceConfig_SamplingSizeConfig();

  InstanceConfig_SamplingSizeConfig(const InstanceConfig_SamplingSizeConfig& from);
  InstanceConfig_SamplingSizeConfig(InstanceConfig_SamplingSizeConfig&& from) noexcept
      : InstanceConfig_SamplingSizeConfig() {
    *this = ::std::move(from);
  }

  inline InstanceConfig_SamplingSizeConfig& operator=(
      const InstanceConfig_SamplingSizeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceConfig_SamplingSizeConfig& operator=(
      InstanceConfig_SamplingSizeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceConfig_SamplingSizeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceConfig_SamplingSizeConfig* internal_default_instance() {
    return reinterpret_cast<const InstanceConfig_SamplingSizeConfig*>(
        &_InstanceConfig_SamplingSizeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;

  friend void swap(InstanceConfig_SamplingSizeConfig& a, InstanceConfig_SamplingSizeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceConfig_SamplingSizeConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceConfig_SamplingSizeConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstanceConfig_SamplingSizeConfig* New() const final {
    return CreateMaybeMessage<InstanceConfig_SamplingSizeConfig>(nullptr);
  }

  InstanceConfig_SamplingSizeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceConfig_SamplingSizeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceConfig_SamplingSizeConfig& from);
  void MergeFrom(const InstanceConfig_SamplingSizeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceConfig_SamplingSizeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstanceConfig.SamplingSizeConfig";
  }

 protected:
  explicit InstanceConfig_SamplingSizeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseCountFieldNumber = 1,
    kScaleFieldNumber = 3,
    kMaxStepsFieldNumber = 2,
  };
  // uint64 base_count = 1;
  void clear_base_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_count() const;
  void set_base_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_base_count() const;
  void _internal_set_base_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

 public:
  // double scale = 3;
  void clear_scale();
  double scale() const;
  void set_scale(double value);

 private:
  double _internal_scale() const;
  void _internal_set_scale(double value);

 public:
  // uint32 max_steps = 2;
  void clear_max_steps();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_steps() const;
  void set_max_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_steps() const;
  void _internal_set_max_steps(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:InstanceConfig.SamplingSizeConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_count_;
  double scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class InstanceConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:InstanceConfig) */ {
 public:
  inline InstanceConfig() : InstanceConfig(nullptr) {}
  virtual ~InstanceConfig();

  InstanceConfig(const InstanceConfig& from);
  InstanceConfig(InstanceConfig&& from) noexcept : InstanceConfig() {
    *this = ::std::move(from);
  }

  inline InstanceConfig& operator=(const InstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceConfig& operator=(InstanceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceConfig* internal_default_instance() {
    return reinterpret_cast<const InstanceConfig*>(&_InstanceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;

  friend void swap(InstanceConfig& a, InstanceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(InstanceConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstanceConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstanceConfig* New() const final {
    return CreateMaybeMessage<InstanceConfig>(nullptr);
  }

  InstanceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceConfig& from);
  void MergeFrom(const InstanceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InstanceConfig";
  }

 protected:
  explicit InstanceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  typedef InstanceConfig_SamplingSizeConfig SamplingSizeConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingConfigFieldNumber = 4,
    kOmegaXFieldNumber = 1,
    kHeuristicSizeFieldNumber = 2,
    kMaxCacheSizeFieldNumber = 3,
  };
  // .InstanceConfig.SamplingSizeConfig sampling_config = 4;
  bool has_sampling_config() const;

 private:
  bool _internal_has_sampling_config() const;

 public:
  void clear_sampling_config();
  const ::InstanceConfig_SamplingSizeConfig& sampling_config() const;
  ::InstanceConfig_SamplingSizeConfig* release_sampling_config();
  ::InstanceConfig_SamplingSizeConfig* mutable_sampling_config();
  void set_allocated_sampling_config(::InstanceConfig_SamplingSizeConfig* sampling_config);

 private:
  const ::InstanceConfig_SamplingSizeConfig& _internal_sampling_config() const;
  ::InstanceConfig_SamplingSizeConfig* _internal_mutable_sampling_config();

 public:
  void unsafe_arena_set_allocated_sampling_config(
      ::InstanceConfig_SamplingSizeConfig* sampling_config);
  ::InstanceConfig_SamplingSizeConfig* unsafe_arena_release_sampling_config();

  // uint32 omega_x = 1;
  void clear_omega_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 omega_x() const;
  void set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_omega_x() const;
  void _internal_set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 heuristic_size = 2;
  void clear_heuristic_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 heuristic_size() const;
  void set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heuristic_size() const;
  void _internal_set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 max_cache_size = 3;
  void clear_max_cache_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cache_size() const;
  void set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cache_size() const;
  void _internal_set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:InstanceConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::InstanceConfig_SamplingSizeConfig* sampling_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 omega_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heuristic_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cache_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class BaseAlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:BaseAlgorithmConfig) */ {
 public:
  inline BaseAlgorithmConfig() : BaseAlgorithmConfig(nullptr) {}
  virtual ~BaseAlgorithmConfig();

  BaseAlgorithmConfig(const BaseAlgorithmConfig& from);
  BaseAlgorithmConfig(BaseAlgorithmConfig&& from) noexcept : BaseAlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline BaseAlgorithmConfig& operator=(const BaseAlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAlgorithmConfig& operator=(BaseAlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseAlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseAlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const BaseAlgorithmConfig*>(&_BaseAlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;

  friend void swap(BaseAlgorithmConfig& a, BaseAlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseAlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseAlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseAlgorithmConfig* New() const final {
    return CreateMaybeMessage<BaseAlgorithmConfig>(nullptr);
  }

  BaseAlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseAlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseAlgorithmConfig& from);
  void MergeFrom(const BaseAlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BaseAlgorithmConfig";
  }

 protected:
  explicit BaseAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverConfigFieldNumber = 1,
    kLimitConfigFieldNumber = 2,
    kInstanceConfigFieldNumber = 3,
  };
  // .SolverConfig solver_config = 1;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // .LimitConfig limit_config = 2;
  bool has_limit_config() const;

 private:
  bool _internal_has_limit_config() const;

 public:
  void clear_limit_config();
  const ::LimitConfig& limit_config() const;
  ::LimitConfig* release_limit_config();
  ::LimitConfig* mutable_limit_config();
  void set_allocated_limit_config(::LimitConfig* limit_config);

 private:
  const ::LimitConfig& _internal_limit_config() const;
  ::LimitConfig* _internal_mutable_limit_config();

 public:
  void unsafe_arena_set_allocated_limit_config(::LimitConfig* limit_config);
  ::LimitConfig* unsafe_arena_release_limit_config();

  // .InstanceConfig instance_config = 3;
  bool has_instance_config() const;

 private:
  bool _internal_has_instance_config() const;

 public:
  void clear_instance_config();
  const ::InstanceConfig& instance_config() const;
  ::InstanceConfig* release_instance_config();
  ::InstanceConfig* mutable_instance_config();
  void set_allocated_instance_config(::InstanceConfig* instance_config);

 private:
  const ::InstanceConfig& _internal_instance_config() const;
  ::InstanceConfig* _internal_mutable_instance_config();

 public:
  void unsafe_arena_set_allocated_instance_config(::InstanceConfig* instance_config);
  ::InstanceConfig* unsafe_arena_release_instance_config();

  // @@protoc_insertion_point(class_scope:BaseAlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SolverConfig* solver_config_;
  ::LimitConfig* limit_config_;
  ::InstanceConfig* instance_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EAAlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:EAAlgorithmConfig) */ {
 public:
  inline EAAlgorithmConfig() : EAAlgorithmConfig(nullptr) {}
  virtual ~EAAlgorithmConfig();

  EAAlgorithmConfig(const EAAlgorithmConfig& from);
  EAAlgorithmConfig(EAAlgorithmConfig&& from) noexcept : EAAlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline EAAlgorithmConfig& operator=(const EAAlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EAAlgorithmConfig& operator=(EAAlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EAAlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EAAlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const EAAlgorithmConfig*>(&_EAAlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;

  friend void swap(EAAlgorithmConfig& a, EAAlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EAAlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EAAlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EAAlgorithmConfig* New() const final {
    return CreateMaybeMessage<EAAlgorithmConfig>(nullptr);
  }

  EAAlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EAAlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EAAlgorithmConfig& from);
  void MergeFrom(const EAAlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EAAlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EAAlgorithmConfig";
  }

 protected:
  explicit EAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationConfigFieldNumber = 1,
    kSelectorConfigFieldNumber = 2,
    kBaseAlgorithmConfigFieldNumber = 3,
  };
  // .MutationConfig mutation_config = 1;
  bool has_mutation_config() const;

 private:
  bool _internal_has_mutation_config() const;

 public:
  void clear_mutation_config();
  const ::MutationConfig& mutation_config() const;
  ::MutationConfig* release_mutation_config();
  ::MutationConfig* mutable_mutation_config();
  void set_allocated_mutation_config(::MutationConfig* mutation_config);

 private:
  const ::MutationConfig& _internal_mutation_config() const;
  ::MutationConfig* _internal_mutable_mutation_config();

 public:
  void unsafe_arena_set_allocated_mutation_config(::MutationConfig* mutation_config);
  ::MutationConfig* unsafe_arena_release_mutation_config();

  // .SelectorConfig selector_config = 2;
  bool has_selector_config() const;

 private:
  bool _internal_has_selector_config() const;

 public:
  void clear_selector_config();
  const ::SelectorConfig& selector_config() const;
  ::SelectorConfig* release_selector_config();
  ::SelectorConfig* mutable_selector_config();
  void set_allocated_selector_config(::SelectorConfig* selector_config);

 private:
  const ::SelectorConfig& _internal_selector_config() const;
  ::SelectorConfig* _internal_mutable_selector_config();

 public:
  void unsafe_arena_set_allocated_selector_config(::SelectorConfig* selector_config);
  ::SelectorConfig* unsafe_arena_release_selector_config();

  // .BaseAlgorithmConfig base_algorithm_config = 3;
  bool has_base_algorithm_config() const;

 private:
  bool _internal_has_base_algorithm_config() const;

 public:
  void clear_base_algorithm_config();
  const ::BaseAlgorithmConfig& base_algorithm_config() const;
  ::BaseAlgorithmConfig* release_base_algorithm_config();
  ::BaseAlgorithmConfig* mutable_base_algorithm_config();
  void set_allocated_base_algorithm_config(::BaseAlgorithmConfig* base_algorithm_config);

 private:
  const ::BaseAlgorithmConfig& _internal_base_algorithm_config() const;
  ::BaseAlgorithmConfig* _internal_mutable_base_algorithm_config();

 public:
  void unsafe_arena_set_allocated_base_algorithm_config(
      ::BaseAlgorithmConfig* base_algorithm_config);
  ::BaseAlgorithmConfig* unsafe_arena_release_base_algorithm_config();

  // @@protoc_insertion_point(class_scope:EAAlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MutationConfig* mutation_config_;
  ::SelectorConfig* selector_config_;
  ::BaseAlgorithmConfig* base_algorithm_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GAAlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:GAAlgorithmConfig) */ {
 public:
  inline GAAlgorithmConfig() : GAAlgorithmConfig(nullptr) {}
  virtual ~GAAlgorithmConfig();

  GAAlgorithmConfig(const GAAlgorithmConfig& from);
  GAAlgorithmConfig(GAAlgorithmConfig&& from) noexcept : GAAlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline GAAlgorithmConfig& operator=(const GAAlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GAAlgorithmConfig& operator=(GAAlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GAAlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GAAlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const GAAlgorithmConfig*>(&_GAAlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;

  friend void swap(GAAlgorithmConfig& a, GAAlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GAAlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GAAlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GAAlgorithmConfig* New() const final {
    return CreateMaybeMessage<GAAlgorithmConfig>(nullptr);
  }

  GAAlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GAAlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GAAlgorithmConfig& from);
  void MergeFrom(const GAAlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GAAlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GAAlgorithmConfig";
  }

 protected:
  explicit GAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutationConfigFieldNumber = 1,
    kCrossoverConfigFieldNumber = 2,
    kSelectorConfigFieldNumber = 3,
    kBaseAlgorithmConfigFieldNumber = 6,
    kQFieldNumber = 4,
    kHFieldNumber = 5,
  };
  // .MutationConfig mutation_config = 1;
  bool has_mutation_config() const;

 private:
  bool _internal_has_mutation_config() const;

 public:
  void clear_mutation_config();
  const ::MutationConfig& mutation_config() const;
  ::MutationConfig* release_mutation_config();
  ::MutationConfig* mutable_mutation_config();
  void set_allocated_mutation_config(::MutationConfig* mutation_config);

 private:
  const ::MutationConfig& _internal_mutation_config() const;
  ::MutationConfig* _internal_mutable_mutation_config();

 public:
  void unsafe_arena_set_allocated_mutation_config(::MutationConfig* mutation_config);
  ::MutationConfig* unsafe_arena_release_mutation_config();

  // .CrossoverConfig crossover_config = 2;
  bool has_crossover_config() const;

 private:
  bool _internal_has_crossover_config() const;

 public:
  void clear_crossover_config();
  const ::CrossoverConfig& crossover_config() const;
  ::CrossoverConfig* release_crossover_config();
  ::CrossoverConfig* mutable_crossover_config();
  void set_allocated_crossover_config(::CrossoverConfig* crossover_config);

 private:
  const ::CrossoverConfig& _internal_crossover_config() const;
  ::CrossoverConfig* _internal_mutable_crossover_config();

 public:
  void unsafe_arena_set_allocated_crossover_config(::CrossoverConfig* crossover_config);
  ::CrossoverConfig* unsafe_arena_release_crossover_config();

  // .SelectorConfig selector_config = 3;
  bool has_selector_config() const;

 private:
  bool _internal_has_selector_config() const;

 public:
  void clear_selector_config();
  const ::SelectorConfig& selector_config() const;
  ::SelectorConfig* release_selector_config();
  ::SelectorConfig* mutable_selector_config();
  void set_allocated_selector_config(::SelectorConfig* selector_config);

 private:
  const ::SelectorConfig& _internal_selector_config() const;
  ::SelectorConfig* _internal_mutable_selector_config();

 public:
  void unsafe_arena_set_allocated_selector_config(::SelectorConfig* selector_config);
  ::SelectorConfig* unsafe_arena_release_selector_config();

  // .BaseAlgorithmConfig base_algorithm_config = 6;
  bool has_base_algorithm_config() const;

 private:
  bool _internal_has_base_algorithm_config() const;

 public:
  void clear_base_algorithm_config();
  const ::BaseAlgorithmConfig& base_algorithm_config() const;
  ::BaseAlgorithmConfig* release_base_algorithm_config();
  ::BaseAlgorithmConfig* mutable_base_algorithm_config();
  void set_allocated_base_algorithm_config(::BaseAlgorithmConfig* base_algorithm_config);

 private:
  const ::BaseAlgorithmConfig& _internal_base_algorithm_config() const;
  ::BaseAlgorithmConfig* _internal_mutable_base_algorithm_config();

 public:
  void unsafe_arena_set_allocated_base_algorithm_config(
      ::BaseAlgorithmConfig* base_algorithm_config);
  ::BaseAlgorithmConfig* unsafe_arena_release_base_algorithm_config();

  // uint32 q = 4;
  void clear_q();
  ::PROTOBUF_NAMESPACE_ID::uint32 q() const;
  void set_q(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_q() const;
  void _internal_set_q(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 h = 5;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:GAAlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MutationConfig* mutation_config_;
  ::CrossoverConfig* crossover_config_;
  ::SelectorConfig* selector_config_;
  ::BaseAlgorithmConfig* base_algorithm_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 q_;
  ::PROTOBUF_NAMESPACE_ID::uint32 h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:AlgorithmConfig) */ {
 public:
  inline AlgorithmConfig() : AlgorithmConfig(nullptr) {}
  virtual ~AlgorithmConfig();

  AlgorithmConfig(const AlgorithmConfig& from);
  AlgorithmConfig(AlgorithmConfig&& from) noexcept : AlgorithmConfig() {
    *this = ::std::move(from);
  }

  inline AlgorithmConfig& operator=(const AlgorithmConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmConfig& operator=(AlgorithmConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlgorithmConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgorithmConfig* internal_default_instance() {
    return reinterpret_cast<const AlgorithmConfig*>(&_AlgorithmConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;

  friend void swap(AlgorithmConfig& a, AlgorithmConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlgorithmConfig* New() const final {
    return CreateMaybeMessage<AlgorithmConfig>(nullptr);
  }

  AlgorithmConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlgorithmConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlgorithmConfig& from);
  void MergeFrom(const AlgorithmConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AlgorithmConfig";
  }

 protected:
  explicit AlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmTypeFieldNumber = 1,
    kEaAlgorithmConfigFieldNumber = 3,
    kGaAlgorithmConfigFieldNumber = 4,
  };
  // string algorithm_type = 1;
  void clear_algorithm_type();
  const std::string& algorithm_type() const;
  void set_algorithm_type(const std::string& value);
  void set_algorithm_type(std::string&& value);
  void set_algorithm_type(const char* value);
  void set_algorithm_type(const char* value, size_t size);
  std::string* mutable_algorithm_type();
  std::string* release_algorithm_type();
  void set_allocated_algorithm_type(std::string* algorithm_type);

 private:
  const std::string& _internal_algorithm_type() const;
  void _internal_set_algorithm_type(const std::string& value);
  std::string* _internal_mutable_algorithm_type();

 public:
  // .EAAlgorithmConfig ea_algorithm_config = 3;
  bool has_ea_algorithm_config() const;

 private:
  bool _internal_has_ea_algorithm_config() const;

 public:
  void clear_ea_algorithm_config();
  const ::EAAlgorithmConfig& ea_algorithm_config() const;
  ::EAAlgorithmConfig* release_ea_algorithm_config();
  ::EAAlgorithmConfig* mutable_ea_algorithm_config();
  void set_allocated_ea_algorithm_config(::EAAlgorithmConfig* ea_algorithm_config);

 private:
  const ::EAAlgorithmConfig& _internal_ea_algorithm_config() const;
  ::EAAlgorithmConfig* _internal_mutable_ea_algorithm_config();

 public:
  void unsafe_arena_set_allocated_ea_algorithm_config(::EAAlgorithmConfig* ea_algorithm_config);
  ::EAAlgorithmConfig* unsafe_arena_release_ea_algorithm_config();

  // .GAAlgorithmConfig ga_algorithm_config = 4;
  bool has_ga_algorithm_config() const;

 private:
  bool _internal_has_ga_algorithm_config() const;

 public:
  void clear_ga_algorithm_config();
  const ::GAAlgorithmConfig& ga_algorithm_config() const;
  ::GAAlgorithmConfig* release_ga_algorithm_config();
  ::GAAlgorithmConfig* mutable_ga_algorithm_config();
  void set_allocated_ga_algorithm_config(::GAAlgorithmConfig* ga_algorithm_config);

 private:
  const ::GAAlgorithmConfig& _internal_ga_algorithm_config() const;
  ::GAAlgorithmConfig* _internal_mutable_ga_algorithm_config();

 public:
  void unsafe_arena_set_allocated_ga_algorithm_config(::GAAlgorithmConfig* ga_algorithm_config);
  ::GAAlgorithmConfig* unsafe_arena_release_ga_algorithm_config();

  // @@protoc_insertion_point(class_scope:AlgorithmConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_type_;
  ::EAAlgorithmConfig* ea_algorithm_config_;
  ::GAAlgorithmConfig* ga_algorithm_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NaiveSolveConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:NaiveSolveConfig) */ {
 public:
  inline NaiveSolveConfig() : NaiveSolveConfig(nullptr) {}
  virtual ~NaiveSolveConfig();

  NaiveSolveConfig(const NaiveSolveConfig& from);
  NaiveSolveConfig(NaiveSolveConfig&& from) noexcept : NaiveSolveConfig() {
    *this = ::std::move(from);
  }

  inline NaiveSolveConfig& operator=(const NaiveSolveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaiveSolveConfig& operator=(NaiveSolveConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NaiveSolveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaiveSolveConfig* internal_default_instance() {
    return reinterpret_cast<const NaiveSolveConfig*>(&_NaiveSolveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;

  friend void swap(NaiveSolveConfig& a, NaiveSolveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaiveSolveConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaiveSolveConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NaiveSolveConfig* New() const final {
    return CreateMaybeMessage<NaiveSolveConfig>(nullptr);
  }

  NaiveSolveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NaiveSolveConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NaiveSolveConfig& from);
  void MergeFrom(const NaiveSolveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaiveSolveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NaiveSolveConfig";
  }

 protected:
  explicit NaiveSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverConfigFieldNumber = 1,
  };
  // .SolverConfig solver_config = 1;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // @@protoc_insertion_point(class_scope:NaiveSolveConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SolverConfig* solver_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RBSSolveConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:RBSSolveConfig) */ {
 public:
  inline RBSSolveConfig() : RBSSolveConfig(nullptr) {}
  virtual ~RBSSolveConfig();

  RBSSolveConfig(const RBSSolveConfig& from);
  RBSSolveConfig(RBSSolveConfig&& from) noexcept : RBSSolveConfig() {
    *this = ::std::move(from);
  }

  inline RBSSolveConfig& operator=(const RBSSolveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RBSSolveConfig& operator=(RBSSolveConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RBSSolveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RBSSolveConfig* internal_default_instance() {
    return reinterpret_cast<const RBSSolveConfig*>(&_RBSSolveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;

  friend void swap(RBSSolveConfig& a, RBSSolveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RBSSolveConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RBSSolveConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RBSSolveConfig* New() const final {
    return CreateMaybeMessage<RBSSolveConfig>(nullptr);
  }

  RBSSolveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RBSSolveConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RBSSolveConfig& from);
  void MergeFrom(const RBSSolveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RBSSolveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RBSSolveConfig";
  }

 protected:
  explicit RBSSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmConfigFieldNumber = 1,
    kSolverConfigFieldNumber = 2,
  };
  // .AlgorithmConfig algorithm_config = 1;
  bool has_algorithm_config() const;

 private:
  bool _internal_has_algorithm_config() const;

 public:
  void clear_algorithm_config();
  const ::AlgorithmConfig& algorithm_config() const;
  ::AlgorithmConfig* release_algorithm_config();
  ::AlgorithmConfig* mutable_algorithm_config();
  void set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config);

 private:
  const ::AlgorithmConfig& _internal_algorithm_config() const;
  ::AlgorithmConfig* _internal_mutable_algorithm_config();

 public:
  void unsafe_arena_set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config);
  ::AlgorithmConfig* unsafe_arena_release_algorithm_config();

  // .SolverConfig solver_config = 2;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // @@protoc_insertion_point(class_scope:RBSSolveConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::AlgorithmConfig* algorithm_config_;
  ::SolverConfig* solver_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ParRBSSolveConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:ParRBSSolveConfig) */ {
 public:
  inline ParRBSSolveConfig() : ParRBSSolveConfig(nullptr) {}
  virtual ~ParRBSSolveConfig();

  ParRBSSolveConfig(const ParRBSSolveConfig& from);
  ParRBSSolveConfig(ParRBSSolveConfig&& from) noexcept : ParRBSSolveConfig() {
    *this = ::std::move(from);
  }

  inline ParRBSSolveConfig& operator=(const ParRBSSolveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParRBSSolveConfig& operator=(ParRBSSolveConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParRBSSolveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParRBSSolveConfig* internal_default_instance() {
    return reinterpret_cast<const ParRBSSolveConfig*>(&_ParRBSSolveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;

  friend void swap(ParRBSSolveConfig& a, ParRBSSolveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ParRBSSolveConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParRBSSolveConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParRBSSolveConfig* New() const final {
    return CreateMaybeMessage<ParRBSSolveConfig>(nullptr);
  }

  ParRBSSolveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParRBSSolveConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParRBSSolveConfig& from);
  void MergeFrom(const ParRBSSolveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParRBSSolveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParRBSSolveConfig";
  }

 protected:
  explicit ParRBSSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmConfigsFieldNumber = 1,
    kSolverConfigFieldNumber = 2,
    kNumAlgorithmsFieldNumber = 4,
    kMaxUnpropagatedFieldNumber = 5,
    kMaxCartesianSizeFieldNumber = 6,
  };
  // repeated .AlgorithmConfig algorithm_configs = 1;
  int algorithm_configs_size() const;

 private:
  int _internal_algorithm_configs_size() const;

 public:
  void clear_algorithm_configs();
  ::AlgorithmConfig* mutable_algorithm_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::AlgorithmConfig>* mutable_algorithm_configs();

 private:
  const ::AlgorithmConfig& _internal_algorithm_configs(int index) const;
  ::AlgorithmConfig* _internal_add_algorithm_configs();

 public:
  const ::AlgorithmConfig& algorithm_configs(int index) const;
  ::AlgorithmConfig* add_algorithm_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::AlgorithmConfig>& algorithm_configs() const;

  // .SolverConfig solver_config = 2;
  bool has_solver_config() const;

 private:
  bool _internal_has_solver_config() const;

 public:
  void clear_solver_config();
  const ::SolverConfig& solver_config() const;
  ::SolverConfig* release_solver_config();
  ::SolverConfig* mutable_solver_config();
  void set_allocated_solver_config(::SolverConfig* solver_config);

 private:
  const ::SolverConfig& _internal_solver_config() const;
  ::SolverConfig* _internal_mutable_solver_config();

 public:
  void unsafe_arena_set_allocated_solver_config(::SolverConfig* solver_config);
  ::SolverConfig* unsafe_arena_release_solver_config();

  // uint32 num_algorithms = 4;
  void clear_num_algorithms();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_algorithms() const;
  void set_num_algorithms(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_algorithms() const;
  void _internal_set_num_algorithms(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 max_unpropagated = 5;
  void clear_max_unpropagated();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unpropagated() const;
  void set_max_unpropagated(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_unpropagated() const;
  void _internal_set_max_unpropagated(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // uint32 max_cartesian_size = 6;
  void clear_max_cartesian_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cartesian_size() const;
  void set_max_cartesian_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cartesian_size() const;
  void _internal_set_max_cartesian_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:ParRBSSolveConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::AlgorithmConfig> algorithm_configs_;
  ::SolverConfig* solver_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_algorithms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_unpropagated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cartesian_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SolveConfig PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:SolveConfig) */ {
 public:
  inline SolveConfig() : SolveConfig(nullptr) {}
  virtual ~SolveConfig();

  SolveConfig(const SolveConfig& from);
  SolveConfig(SolveConfig&& from) noexcept : SolveConfig() {
    *this = ::std::move(from);
  }

  inline SolveConfig& operator=(const SolveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveConfig& operator=(SolveConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SolveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SolveConfig* internal_default_instance() {
    return reinterpret_cast<const SolveConfig*>(&_SolveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;

  friend void swap(SolveConfig& a, SolveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveConfig* other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveConfig* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SolveConfig* New() const final {
    return CreateMaybeMessage<SolveConfig>(nullptr);
  }

  SolveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SolveConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SolveConfig& from);
  void MergeFrom(const SolveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final {
    return _cached_size_.Get();
  }

 private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SolveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolveConfig";
  }

 protected:
  explicit SolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

 public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

 private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto);
    return ::descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolveTypeFieldNumber = 1,
    kNaiveSolveConfigFieldNumber = 3,
    kRbsSolveConfigFieldNumber = 4,
    kParRbsSolveConfigFieldNumber = 5,
    kRandomSeedFieldNumber = 2,
  };
  // string solve_type = 1;
  void clear_solve_type();
  const std::string& solve_type() const;
  void set_solve_type(const std::string& value);
  void set_solve_type(std::string&& value);
  void set_solve_type(const char* value);
  void set_solve_type(const char* value, size_t size);
  std::string* mutable_solve_type();
  std::string* release_solve_type();
  void set_allocated_solve_type(std::string* solve_type);

 private:
  const std::string& _internal_solve_type() const;
  void _internal_set_solve_type(const std::string& value);
  std::string* _internal_mutable_solve_type();

 public:
  // .NaiveSolveConfig naive_solve_config = 3;
  bool has_naive_solve_config() const;

 private:
  bool _internal_has_naive_solve_config() const;

 public:
  void clear_naive_solve_config();
  const ::NaiveSolveConfig& naive_solve_config() const;
  ::NaiveSolveConfig* release_naive_solve_config();
  ::NaiveSolveConfig* mutable_naive_solve_config();
  void set_allocated_naive_solve_config(::NaiveSolveConfig* naive_solve_config);

 private:
  const ::NaiveSolveConfig& _internal_naive_solve_config() const;
  ::NaiveSolveConfig* _internal_mutable_naive_solve_config();

 public:
  void unsafe_arena_set_allocated_naive_solve_config(::NaiveSolveConfig* naive_solve_config);
  ::NaiveSolveConfig* unsafe_arena_release_naive_solve_config();

  // .RBSSolveConfig rbs_solve_config = 4;
  bool has_rbs_solve_config() const;

 private:
  bool _internal_has_rbs_solve_config() const;

 public:
  void clear_rbs_solve_config();
  const ::RBSSolveConfig& rbs_solve_config() const;
  ::RBSSolveConfig* release_rbs_solve_config();
  ::RBSSolveConfig* mutable_rbs_solve_config();
  void set_allocated_rbs_solve_config(::RBSSolveConfig* rbs_solve_config);

 private:
  const ::RBSSolveConfig& _internal_rbs_solve_config() const;
  ::RBSSolveConfig* _internal_mutable_rbs_solve_config();

 public:
  void unsafe_arena_set_allocated_rbs_solve_config(::RBSSolveConfig* rbs_solve_config);
  ::RBSSolveConfig* unsafe_arena_release_rbs_solve_config();

  // .ParRBSSolveConfig par_rbs_solve_config = 5;
  bool has_par_rbs_solve_config() const;

 private:
  bool _internal_has_par_rbs_solve_config() const;

 public:
  void clear_par_rbs_solve_config();
  const ::ParRBSSolveConfig& par_rbs_solve_config() const;
  ::ParRBSSolveConfig* release_par_rbs_solve_config();
  ::ParRBSSolveConfig* mutable_par_rbs_solve_config();
  void set_allocated_par_rbs_solve_config(::ParRBSSolveConfig* par_rbs_solve_config);

 private:
  const ::ParRBSSolveConfig& _internal_par_rbs_solve_config() const;
  ::ParRBSSolveConfig* _internal_mutable_par_rbs_solve_config();

 public:
  void unsafe_arena_set_allocated_par_rbs_solve_config(::ParRBSSolveConfig* par_rbs_solve_config);
  ::ParRBSSolveConfig* unsafe_arena_release_par_rbs_solve_config();

  // uint32 random_seed = 2;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

 private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

 public:
  // @@protoc_insertion_point(class_scope:SolveConfig)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solve_type_;
  ::NaiveSolveConfig* naive_solve_config_;
  ::RBSSolveConfig* rbs_solve_config_;
  ::ParRBSSolveConfig* par_rbs_solve_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fproto_2fsolve_5fconfig_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MinisatCliConfig

// int32 verbosity_level = 1;
inline void MinisatCliConfig::clear_verbosity_level() {
  verbosity_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_verbosity_level() const {
  return verbosity_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::verbosity_level() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.verbosity_level)
  return _internal_verbosity_level();
}
inline void MinisatCliConfig::_internal_set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  verbosity_level_ = value;
}
inline void MinisatCliConfig::set_verbosity_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_verbosity_level(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.verbosity_level)
}

// bool preprocessing = 2;
inline void MinisatCliConfig::clear_preprocessing() {
  preprocessing_ = false;
}
inline bool MinisatCliConfig::_internal_preprocessing() const {
  return preprocessing_;
}
inline bool MinisatCliConfig::preprocessing() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.preprocessing)
  return _internal_preprocessing();
}
inline void MinisatCliConfig::_internal_set_preprocessing(bool value) {
  preprocessing_ = value;
}
inline void MinisatCliConfig::set_preprocessing(bool value) {
  _internal_set_preprocessing(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.preprocessing)
}

// int32 cpu_limit = 4;
inline void MinisatCliConfig::clear_cpu_limit() {
  cpu_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_cpu_limit() const {
  return cpu_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::cpu_limit() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.cpu_limit)
  return _internal_cpu_limit();
}
inline void MinisatCliConfig::_internal_set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpu_limit_ = value;
}
inline void MinisatCliConfig::set_cpu_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_limit(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.cpu_limit)
}

// int32 mem_limit = 5;
inline void MinisatCliConfig::clear_mem_limit() {
  mem_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::_internal_mem_limit() const {
  return mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MinisatCliConfig::mem_limit() const {
  // @@protoc_insertion_point(field_get:MinisatCliConfig.mem_limit)
  return _internal_mem_limit();
}
inline void MinisatCliConfig::_internal_set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mem_limit_ = value;
}
inline void MinisatCliConfig::set_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mem_limit(value);
  // @@protoc_insertion_point(field_set:MinisatCliConfig.mem_limit)
}

// -------------------------------------------------------------------

// BaseSolverConfig

// double var_decay = 1;
inline void BaseSolverConfig::clear_var_decay() {
  var_decay_ = 0;
}
inline double BaseSolverConfig::_internal_var_decay() const {
  return var_decay_;
}
inline double BaseSolverConfig::var_decay() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.var_decay)
  return _internal_var_decay();
}
inline void BaseSolverConfig::_internal_set_var_decay(double value) {
  var_decay_ = value;
}
inline void BaseSolverConfig::set_var_decay(double value) {
  _internal_set_var_decay(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.var_decay)
}

// double cla_decay = 2;
inline void BaseSolverConfig::clear_cla_decay() {
  cla_decay_ = 0;
}
inline double BaseSolverConfig::_internal_cla_decay() const {
  return cla_decay_;
}
inline double BaseSolverConfig::cla_decay() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.cla_decay)
  return _internal_cla_decay();
}
inline void BaseSolverConfig::_internal_set_cla_decay(double value) {
  cla_decay_ = value;
}
inline void BaseSolverConfig::set_cla_decay(double value) {
  _internal_set_cla_decay(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.cla_decay)
}

// double rnd_freq = 3;
inline void BaseSolverConfig::clear_rnd_freq() {
  rnd_freq_ = 0;
}
inline double BaseSolverConfig::_internal_rnd_freq() const {
  return rnd_freq_;
}
inline double BaseSolverConfig::rnd_freq() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.rnd_freq)
  return _internal_rnd_freq();
}
inline void BaseSolverConfig::_internal_set_rnd_freq(double value) {
  rnd_freq_ = value;
}
inline void BaseSolverConfig::set_rnd_freq(double value) {
  _internal_set_rnd_freq(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.rnd_freq)
}

// int32 ccmin_mode = 5;
inline void BaseSolverConfig::clear_ccmin_mode() {
  ccmin_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::_internal_ccmin_mode() const {
  return ccmin_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::ccmin_mode() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.ccmin_mode)
  return _internal_ccmin_mode();
}
inline void BaseSolverConfig::_internal_set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ccmin_mode_ = value;
}
inline void BaseSolverConfig::set_ccmin_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ccmin_mode(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.ccmin_mode)
}

// int32 phase_saving = 6;
inline void BaseSolverConfig::clear_phase_saving() {
  phase_saving_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::_internal_phase_saving() const {
  return phase_saving_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::phase_saving() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.phase_saving)
  return _internal_phase_saving();
}
inline void BaseSolverConfig::_internal_set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value) {
  phase_saving_ = value;
}
inline void BaseSolverConfig::set_phase_saving(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phase_saving(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.phase_saving)
}

// bool rnd_init = 7;
inline void BaseSolverConfig::clear_rnd_init() {
  rnd_init_ = false;
}
inline bool BaseSolverConfig::_internal_rnd_init() const {
  return rnd_init_;
}
inline bool BaseSolverConfig::rnd_init() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.rnd_init)
  return _internal_rnd_init();
}
inline void BaseSolverConfig::_internal_set_rnd_init(bool value) {
  rnd_init_ = value;
}
inline void BaseSolverConfig::set_rnd_init(bool value) {
  _internal_set_rnd_init(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.rnd_init)
}

// bool luby = 8;
inline void BaseSolverConfig::clear_luby() {
  luby_ = false;
}
inline bool BaseSolverConfig::_internal_luby() const {
  return luby_;
}
inline bool BaseSolverConfig::luby() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.luby)
  return _internal_luby();
}
inline void BaseSolverConfig::_internal_set_luby(bool value) {
  luby_ = value;
}
inline void BaseSolverConfig::set_luby(bool value) {
  _internal_set_luby(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.luby)
}

// int32 rfirst = 9;
inline void BaseSolverConfig::clear_rfirst() {
  rfirst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::_internal_rfirst() const {
  return rfirst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::rfirst() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.rfirst)
  return _internal_rfirst();
}
inline void BaseSolverConfig::_internal_set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rfirst_ = value;
}
inline void BaseSolverConfig::set_rfirst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rfirst(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.rfirst)
}

// double rinc = 10;
inline void BaseSolverConfig::clear_rinc() {
  rinc_ = 0;
}
inline double BaseSolverConfig::_internal_rinc() const {
  return rinc_;
}
inline double BaseSolverConfig::rinc() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.rinc)
  return _internal_rinc();
}
inline void BaseSolverConfig::_internal_set_rinc(double value) {
  rinc_ = value;
}
inline void BaseSolverConfig::set_rinc(double value) {
  _internal_set_rinc(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.rinc)
}

// double gc_frac = 11;
inline void BaseSolverConfig::clear_gc_frac() {
  gc_frac_ = 0;
}
inline double BaseSolverConfig::_internal_gc_frac() const {
  return gc_frac_;
}
inline double BaseSolverConfig::gc_frac() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.gc_frac)
  return _internal_gc_frac();
}
inline void BaseSolverConfig::_internal_set_gc_frac(double value) {
  gc_frac_ = value;
}
inline void BaseSolverConfig::set_gc_frac(double value) {
  _internal_set_gc_frac(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.gc_frac)
}

// int32 min_learnts = 12;
inline void BaseSolverConfig::clear_min_learnts() {
  min_learnts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::_internal_min_learnts() const {
  return min_learnts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseSolverConfig::min_learnts() const {
  // @@protoc_insertion_point(field_get:BaseSolverConfig.min_learnts)
  return _internal_min_learnts();
}
inline void BaseSolverConfig::_internal_set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  min_learnts_ = value;
}
inline void BaseSolverConfig::set_min_learnts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_learnts(value);
  // @@protoc_insertion_point(field_set:BaseSolverConfig.min_learnts)
}

// -------------------------------------------------------------------

// SimpSolverConfig

// bool use_asymm = 1;
inline void SimpSolverConfig::clear_use_asymm() {
  use_asymm_ = false;
}
inline bool SimpSolverConfig::_internal_use_asymm() const {
  return use_asymm_;
}
inline bool SimpSolverConfig::use_asymm() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_asymm)
  return _internal_use_asymm();
}
inline void SimpSolverConfig::_internal_set_use_asymm(bool value) {
  use_asymm_ = value;
}
inline void SimpSolverConfig::set_use_asymm(bool value) {
  _internal_set_use_asymm(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_asymm)
}

// bool use_rcheck = 2;
inline void SimpSolverConfig::clear_use_rcheck() {
  use_rcheck_ = false;
}
inline bool SimpSolverConfig::_internal_use_rcheck() const {
  return use_rcheck_;
}
inline bool SimpSolverConfig::use_rcheck() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_rcheck)
  return _internal_use_rcheck();
}
inline void SimpSolverConfig::_internal_set_use_rcheck(bool value) {
  use_rcheck_ = value;
}
inline void SimpSolverConfig::set_use_rcheck(bool value) {
  _internal_set_use_rcheck(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_rcheck)
}

// bool use_elim = 3;
inline void SimpSolverConfig::clear_use_elim() {
  use_elim_ = false;
}
inline bool SimpSolverConfig::_internal_use_elim() const {
  return use_elim_;
}
inline bool SimpSolverConfig::use_elim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.use_elim)
  return _internal_use_elim();
}
inline void SimpSolverConfig::_internal_set_use_elim(bool value) {
  use_elim_ = value;
}
inline void SimpSolverConfig::set_use_elim(bool value) {
  _internal_set_use_elim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.use_elim)
}

// int32 grow = 4;
inline void SimpSolverConfig::clear_grow() {
  grow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_grow() const {
  return grow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::grow() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.grow)
  return _internal_grow();
}
inline void SimpSolverConfig::_internal_set_grow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  grow_ = value;
}
inline void SimpSolverConfig::set_grow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grow(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.grow)
}

// int32 clause_lim = 5;
inline void SimpSolverConfig::clear_clause_lim() {
  clause_lim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_clause_lim() const {
  return clause_lim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::clause_lim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.clause_lim)
  return _internal_clause_lim();
}
inline void SimpSolverConfig::_internal_set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clause_lim_ = value;
}
inline void SimpSolverConfig::set_clause_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clause_lim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.clause_lim)
}

// int32 subsumption_lim = 6;
inline void SimpSolverConfig::clear_subsumption_lim() {
  subsumption_lim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::_internal_subsumption_lim() const {
  return subsumption_lim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpSolverConfig::subsumption_lim() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.subsumption_lim)
  return _internal_subsumption_lim();
}
inline void SimpSolverConfig::_internal_set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  subsumption_lim_ = value;
}
inline void SimpSolverConfig::set_subsumption_lim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subsumption_lim(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.subsumption_lim)
}

// double simp_garbage_frac = 7;
inline void SimpSolverConfig::clear_simp_garbage_frac() {
  simp_garbage_frac_ = 0;
}
inline double SimpSolverConfig::_internal_simp_garbage_frac() const {
  return simp_garbage_frac_;
}
inline double SimpSolverConfig::simp_garbage_frac() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.simp_garbage_frac)
  return _internal_simp_garbage_frac();
}
inline void SimpSolverConfig::_internal_set_simp_garbage_frac(double value) {
  simp_garbage_frac_ = value;
}
inline void SimpSolverConfig::set_simp_garbage_frac(double value) {
  _internal_set_simp_garbage_frac(value);
  // @@protoc_insertion_point(field_set:SimpSolverConfig.simp_garbage_frac)
}

// .MinisatCliConfig minisat_cli_config = 8;
inline bool SimpSolverConfig::_internal_has_minisat_cli_config() const {
  return this != internal_default_instance() && minisat_cli_config_ != nullptr;
}
inline bool SimpSolverConfig::has_minisat_cli_config() const {
  return _internal_has_minisat_cli_config();
}
inline void SimpSolverConfig::clear_minisat_cli_config() {
  if (GetArena() == nullptr && minisat_cli_config_ != nullptr) {
    delete minisat_cli_config_;
  }
  minisat_cli_config_ = nullptr;
}
inline const ::MinisatCliConfig& SimpSolverConfig::_internal_minisat_cli_config() const {
  const ::MinisatCliConfig* p = minisat_cli_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::MinisatCliConfig*>(&::_MinisatCliConfig_default_instance_);
}
inline const ::MinisatCliConfig& SimpSolverConfig::minisat_cli_config() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.minisat_cli_config)
  return _internal_minisat_cli_config();
}
inline void SimpSolverConfig::unsafe_arena_set_allocated_minisat_cli_config(
    ::MinisatCliConfig* minisat_cli_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minisat_cli_config_);
  }
  minisat_cli_config_ = minisat_cli_config;
  if (minisat_cli_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimpSolverConfig.minisat_cli_config)
}
inline ::MinisatCliConfig* SimpSolverConfig::release_minisat_cli_config() {
  ::MinisatCliConfig* temp = minisat_cli_config_;
  minisat_cli_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MinisatCliConfig* SimpSolverConfig::unsafe_arena_release_minisat_cli_config() {
  // @@protoc_insertion_point(field_release:SimpSolverConfig.minisat_cli_config)

  ::MinisatCliConfig* temp = minisat_cli_config_;
  minisat_cli_config_ = nullptr;
  return temp;
}
inline ::MinisatCliConfig* SimpSolverConfig::_internal_mutable_minisat_cli_config() {
  if (minisat_cli_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::MinisatCliConfig>(GetArena());
    minisat_cli_config_ = p;
  }
  return minisat_cli_config_;
}
inline ::MinisatCliConfig* SimpSolverConfig::mutable_minisat_cli_config() {
  // @@protoc_insertion_point(field_mutable:SimpSolverConfig.minisat_cli_config)
  return _internal_mutable_minisat_cli_config();
}
inline void SimpSolverConfig::set_allocated_minisat_cli_config(
    ::MinisatCliConfig* minisat_cli_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete minisat_cli_config_;
  }
  if (minisat_cli_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(minisat_cli_config);
    if (message_arena != submessage_arena) {
      minisat_cli_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minisat_cli_config, submessage_arena);
    }

  } else {
  }
  minisat_cli_config_ = minisat_cli_config;
  // @@protoc_insertion_point(field_set_allocated:SimpSolverConfig.minisat_cli_config)
}

// .BaseSolverConfig base_solver_config = 9;
inline bool SimpSolverConfig::_internal_has_base_solver_config() const {
  return this != internal_default_instance() && base_solver_config_ != nullptr;
}
inline bool SimpSolverConfig::has_base_solver_config() const {
  return _internal_has_base_solver_config();
}
inline void SimpSolverConfig::clear_base_solver_config() {
  if (GetArena() == nullptr && base_solver_config_ != nullptr) {
    delete base_solver_config_;
  }
  base_solver_config_ = nullptr;
}
inline const ::BaseSolverConfig& SimpSolverConfig::_internal_base_solver_config() const {
  const ::BaseSolverConfig* p = base_solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::BaseSolverConfig*>(&::_BaseSolverConfig_default_instance_);
}
inline const ::BaseSolverConfig& SimpSolverConfig::base_solver_config() const {
  // @@protoc_insertion_point(field_get:SimpSolverConfig.base_solver_config)
  return _internal_base_solver_config();
}
inline void SimpSolverConfig::unsafe_arena_set_allocated_base_solver_config(
    ::BaseSolverConfig* base_solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_solver_config_);
  }
  base_solver_config_ = base_solver_config;
  if (base_solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimpSolverConfig.base_solver_config)
}
inline ::BaseSolverConfig* SimpSolverConfig::release_base_solver_config() {
  ::BaseSolverConfig* temp = base_solver_config_;
  base_solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BaseSolverConfig* SimpSolverConfig::unsafe_arena_release_base_solver_config() {
  // @@protoc_insertion_point(field_release:SimpSolverConfig.base_solver_config)

  ::BaseSolverConfig* temp = base_solver_config_;
  base_solver_config_ = nullptr;
  return temp;
}
inline ::BaseSolverConfig* SimpSolverConfig::_internal_mutable_base_solver_config() {
  if (base_solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseSolverConfig>(GetArena());
    base_solver_config_ = p;
  }
  return base_solver_config_;
}
inline ::BaseSolverConfig* SimpSolverConfig::mutable_base_solver_config() {
  // @@protoc_insertion_point(field_mutable:SimpSolverConfig.base_solver_config)
  return _internal_mutable_base_solver_config();
}
inline void SimpSolverConfig::set_allocated_base_solver_config(
    ::BaseSolverConfig* base_solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_solver_config_;
  }
  if (base_solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_solver_config);
    if (message_arena != submessage_arena) {
      base_solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_solver_config, submessage_arena);
    }

  } else {
  }
  base_solver_config_ = base_solver_config;
  // @@protoc_insertion_point(field_set_allocated:SimpSolverConfig.base_solver_config)
}

// -------------------------------------------------------------------

// ParSolverConfig

// uint32 max_threads = 1;
inline void ParSolverConfig::clear_max_threads() {
  max_threads_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParSolverConfig::_internal_max_threads() const {
  return max_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParSolverConfig::max_threads() const {
  // @@protoc_insertion_point(field_get:ParSolverConfig.max_threads)
  return _internal_max_threads();
}
inline void ParSolverConfig::_internal_set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_threads_ = value;
}
inline void ParSolverConfig::set_max_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_threads(value);
  // @@protoc_insertion_point(field_set:ParSolverConfig.max_threads)
}

// .SolverConfig solver_config = 3;
inline bool ParSolverConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool ParSolverConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void ParSolverConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& ParSolverConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& ParSolverConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:ParSolverConfig.solver_config)
  return _internal_solver_config();
}
inline void ParSolverConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ParSolverConfig.solver_config)
}
inline ::SolverConfig* ParSolverConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* ParSolverConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:ParSolverConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* ParSolverConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* ParSolverConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:ParSolverConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void ParSolverConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:ParSolverConfig.solver_config)
}

// -------------------------------------------------------------------

// SolverConfig

// string solver_type = 1;
inline void SolverConfig::clear_solver_type() {
  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SolverConfig::solver_type() const {
  // @@protoc_insertion_point(field_get:SolverConfig.solver_type)
  return _internal_solver_type();
}
inline void SolverConfig::set_solver_type(const std::string& value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:SolverConfig.solver_type)
}
inline std::string* SolverConfig::mutable_solver_type() {
  // @@protoc_insertion_point(field_mutable:SolverConfig.solver_type)
  return _internal_mutable_solver_type();
}
inline const std::string& SolverConfig::_internal_solver_type() const {
  return solver_type_.Get();
}
inline void SolverConfig::_internal_set_solver_type(const std::string& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolverConfig::set_solver_type(std::string&& value) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolverConfig.solver_type)
}
inline void SolverConfig::set_solver_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:SolverConfig.solver_type)
}
inline void SolverConfig::set_solver_type(const char* value, size_t size) {
  solver_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolverConfig.solver_type)
}
inline std::string* SolverConfig::_internal_mutable_solver_type() {
  return solver_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolverConfig::release_solver_type() {
  // @@protoc_insertion_point(field_release:SolverConfig.solver_type)
  return solver_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolverConfig::set_allocated_solver_type(std::string* solver_type) {
  if (solver_type != nullptr) {
  } else {
  }
  solver_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solver_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolverConfig.solver_type)
}

// .SimpSolverConfig simp_solver_config = 4;
inline bool SolverConfig::_internal_has_simp_solver_config() const {
  return this != internal_default_instance() && simp_solver_config_ != nullptr;
}
inline bool SolverConfig::has_simp_solver_config() const {
  return _internal_has_simp_solver_config();
}
inline void SolverConfig::clear_simp_solver_config() {
  if (GetArena() == nullptr && simp_solver_config_ != nullptr) {
    delete simp_solver_config_;
  }
  simp_solver_config_ = nullptr;
}
inline const ::SimpSolverConfig& SolverConfig::_internal_simp_solver_config() const {
  const ::SimpSolverConfig* p = simp_solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SimpSolverConfig*>(&::_SimpSolverConfig_default_instance_);
}
inline const ::SimpSolverConfig& SolverConfig::simp_solver_config() const {
  // @@protoc_insertion_point(field_get:SolverConfig.simp_solver_config)
  return _internal_simp_solver_config();
}
inline void SolverConfig::unsafe_arena_set_allocated_simp_solver_config(
    ::SimpSolverConfig* simp_solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simp_solver_config_);
  }
  simp_solver_config_ = simp_solver_config;
  if (simp_solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolverConfig.simp_solver_config)
}
inline ::SimpSolverConfig* SolverConfig::release_simp_solver_config() {
  ::SimpSolverConfig* temp = simp_solver_config_;
  simp_solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SimpSolverConfig* SolverConfig::unsafe_arena_release_simp_solver_config() {
  // @@protoc_insertion_point(field_release:SolverConfig.simp_solver_config)

  ::SimpSolverConfig* temp = simp_solver_config_;
  simp_solver_config_ = nullptr;
  return temp;
}
inline ::SimpSolverConfig* SolverConfig::_internal_mutable_simp_solver_config() {
  if (simp_solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimpSolverConfig>(GetArena());
    simp_solver_config_ = p;
  }
  return simp_solver_config_;
}
inline ::SimpSolverConfig* SolverConfig::mutable_simp_solver_config() {
  // @@protoc_insertion_point(field_mutable:SolverConfig.simp_solver_config)
  return _internal_mutable_simp_solver_config();
}
inline void SolverConfig::set_allocated_simp_solver_config(::SimpSolverConfig* simp_solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete simp_solver_config_;
  }
  if (simp_solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(simp_solver_config);
    if (message_arena != submessage_arena) {
      simp_solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simp_solver_config, submessage_arena);
    }

  } else {
  }
  simp_solver_config_ = simp_solver_config;
  // @@protoc_insertion_point(field_set_allocated:SolverConfig.simp_solver_config)
}

// .ParSolverConfig par_solver_config = 5;
inline bool SolverConfig::_internal_has_par_solver_config() const {
  return this != internal_default_instance() && par_solver_config_ != nullptr;
}
inline bool SolverConfig::has_par_solver_config() const {
  return _internal_has_par_solver_config();
}
inline void SolverConfig::clear_par_solver_config() {
  if (GetArena() == nullptr && par_solver_config_ != nullptr) {
    delete par_solver_config_;
  }
  par_solver_config_ = nullptr;
}
inline const ::ParSolverConfig& SolverConfig::_internal_par_solver_config() const {
  const ::ParSolverConfig* p = par_solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::ParSolverConfig*>(&::_ParSolverConfig_default_instance_);
}
inline const ::ParSolverConfig& SolverConfig::par_solver_config() const {
  // @@protoc_insertion_point(field_get:SolverConfig.par_solver_config)
  return _internal_par_solver_config();
}
inline void SolverConfig::unsafe_arena_set_allocated_par_solver_config(
    ::ParSolverConfig* par_solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_solver_config_);
  }
  par_solver_config_ = par_solver_config;
  if (par_solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolverConfig.par_solver_config)
}
inline ::ParSolverConfig* SolverConfig::release_par_solver_config() {
  ::ParSolverConfig* temp = par_solver_config_;
  par_solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ParSolverConfig* SolverConfig::unsafe_arena_release_par_solver_config() {
  // @@protoc_insertion_point(field_release:SolverConfig.par_solver_config)

  ::ParSolverConfig* temp = par_solver_config_;
  par_solver_config_ = nullptr;
  return temp;
}
inline ::ParSolverConfig* SolverConfig::_internal_mutable_par_solver_config() {
  if (par_solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParSolverConfig>(GetArena());
    par_solver_config_ = p;
  }
  return par_solver_config_;
}
inline ::ParSolverConfig* SolverConfig::mutable_par_solver_config() {
  // @@protoc_insertion_point(field_mutable:SolverConfig.par_solver_config)
  return _internal_mutable_par_solver_config();
}
inline void SolverConfig::set_allocated_par_solver_config(::ParSolverConfig* par_solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete par_solver_config_;
  }
  if (par_solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(par_solver_config);
    if (message_arena != submessage_arena) {
      par_solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, par_solver_config, submessage_arena);
    }

  } else {
  }
  par_solver_config_ = par_solver_config;
  // @@protoc_insertion_point(field_set_allocated:SolverConfig.par_solver_config)
}

// -------------------------------------------------------------------

// ResourceLimitConfig

// uint32 memory_limit_kb = 1;
inline void ResourceLimitConfig::clear_memory_limit_kb() {
  memory_limit_kb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::_internal_memory_limit_kb() const {
  return memory_limit_kb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::memory_limit_kb() const {
  // @@protoc_insertion_point(field_get:ResourceLimitConfig.memory_limit_kb)
  return _internal_memory_limit_kb();
}
inline void ResourceLimitConfig::_internal_set_memory_limit_kb(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  memory_limit_kb_ = value;
}
inline void ResourceLimitConfig::set_memory_limit_kb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memory_limit_kb(value);
  // @@protoc_insertion_point(field_set:ResourceLimitConfig.memory_limit_kb)
}

// uint32 time_limit_sec = 2;
inline void ResourceLimitConfig::clear_time_limit_sec() {
  time_limit_sec_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::_internal_time_limit_sec() const {
  return time_limit_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResourceLimitConfig::time_limit_sec() const {
  // @@protoc_insertion_point(field_get:ResourceLimitConfig.time_limit_sec)
  return _internal_time_limit_sec();
}
inline void ResourceLimitConfig::_internal_set_time_limit_sec(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  time_limit_sec_ = value;
}
inline void ResourceLimitConfig::set_time_limit_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_limit_sec(value);
  // @@protoc_insertion_point(field_set:ResourceLimitConfig.time_limit_sec)
}

// -------------------------------------------------------------------

// FitnessLimitConfig

// double lowest_fitness = 1;
inline void FitnessLimitConfig::clear_lowest_fitness() {
  lowest_fitness_ = 0;
}
inline double FitnessLimitConfig::_internal_lowest_fitness() const {
  return lowest_fitness_;
}
inline double FitnessLimitConfig::lowest_fitness() const {
  // @@protoc_insertion_point(field_get:FitnessLimitConfig.lowest_fitness)
  return _internal_lowest_fitness();
}
inline void FitnessLimitConfig::_internal_set_lowest_fitness(double value) {
  lowest_fitness_ = value;
}
inline void FitnessLimitConfig::set_lowest_fitness(double value) {
  _internal_set_lowest_fitness(value);
  // @@protoc_insertion_point(field_set:FitnessLimitConfig.lowest_fitness)
}

// uint32 max_size = 2;
inline void FitnessLimitConfig::clear_max_size() {
  max_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FitnessLimitConfig::_internal_max_size() const {
  return max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FitnessLimitConfig::max_size() const {
  // @@protoc_insertion_point(field_get:FitnessLimitConfig.max_size)
  return _internal_max_size();
}
inline void FitnessLimitConfig::_internal_set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_size_ = value;
}
inline void FitnessLimitConfig::set_max_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:FitnessLimitConfig.max_size)
}

// -------------------------------------------------------------------

// PointsLimitConfig

// uint32 max_points_visited = 1;
inline void PointsLimitConfig::clear_max_points_visited() {
  max_points_visited_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointsLimitConfig::_internal_max_points_visited() const {
  return max_points_visited_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointsLimitConfig::max_points_visited() const {
  // @@protoc_insertion_point(field_get:PointsLimitConfig.max_points_visited)
  return _internal_max_points_visited();
}
inline void PointsLimitConfig::_internal_set_max_points_visited(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_points_visited_ = value;
}
inline void PointsLimitConfig::set_max_points_visited(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_points_visited(value);
  // @@protoc_insertion_point(field_set:PointsLimitConfig.max_points_visited)
}

// -------------------------------------------------------------------

// StallLimitConfig

// uint32 steps_before_stall = 1;
inline void StallLimitConfig::clear_steps_before_stall() {
  steps_before_stall_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StallLimitConfig::_internal_steps_before_stall() const {
  return steps_before_stall_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StallLimitConfig::steps_before_stall() const {
  // @@protoc_insertion_point(field_get:StallLimitConfig.steps_before_stall)
  return _internal_steps_before_stall();
}
inline void StallLimitConfig::_internal_set_steps_before_stall(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  steps_before_stall_ = value;
}
inline void StallLimitConfig::set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steps_before_stall(value);
  // @@protoc_insertion_point(field_set:StallLimitConfig.steps_before_stall)
}

// -------------------------------------------------------------------

// ConjLimitConfig

// repeated .LimitConfig limit_config = 1;
inline int ConjLimitConfig::_internal_limit_config_size() const {
  return limit_config_.size();
}
inline int ConjLimitConfig::limit_config_size() const {
  return _internal_limit_config_size();
}
inline void ConjLimitConfig::clear_limit_config() {
  limit_config_.Clear();
}
inline ::LimitConfig* ConjLimitConfig::mutable_limit_config(int index) {
  // @@protoc_insertion_point(field_mutable:ConjLimitConfig.limit_config)
  return limit_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LimitConfig>*
ConjLimitConfig::mutable_limit_config() {
  // @@protoc_insertion_point(field_mutable_list:ConjLimitConfig.limit_config)
  return &limit_config_;
}
inline const ::LimitConfig& ConjLimitConfig::_internal_limit_config(int index) const {
  return limit_config_.Get(index);
}
inline const ::LimitConfig& ConjLimitConfig::limit_config(int index) const {
  // @@protoc_insertion_point(field_get:ConjLimitConfig.limit_config)
  return _internal_limit_config(index);
}
inline ::LimitConfig* ConjLimitConfig::_internal_add_limit_config() {
  return limit_config_.Add();
}
inline ::LimitConfig* ConjLimitConfig::add_limit_config() {
  // @@protoc_insertion_point(field_add:ConjLimitConfig.limit_config)
  return _internal_add_limit_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::LimitConfig>&
ConjLimitConfig::limit_config() const {
  // @@protoc_insertion_point(field_list:ConjLimitConfig.limit_config)
  return limit_config_;
}

// -------------------------------------------------------------------

// StallLimitConfig

// uint32 steps_before_stall = 1;
inline void StallLimitConfig::clear_steps_before_stall() {
  steps_before_stall_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StallLimitConfig::_internal_steps_before_stall() const {
  return steps_before_stall_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StallLimitConfig::steps_before_stall() const {
  // @@protoc_insertion_point(field_get:StallLimitConfig.steps_before_stall)
  return _internal_steps_before_stall();
}
inline void StallLimitConfig::_internal_set_steps_before_stall(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  steps_before_stall_ = value;
}
inline void StallLimitConfig::set_steps_before_stall(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steps_before_stall(value);
  // @@protoc_insertion_point(field_set:StallLimitConfig.steps_before_stall)
}

// -------------------------------------------------------------------

// LimitConfig

// string limit_type = 1;
inline void LimitConfig::clear_limit_type() {
  limit_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LimitConfig::limit_type() const {
  // @@protoc_insertion_point(field_get:LimitConfig.limit_type)
  return _internal_limit_type();
}
inline void LimitConfig::set_limit_type(const std::string& value) {
  _internal_set_limit_type(value);
  // @@protoc_insertion_point(field_set:LimitConfig.limit_type)
}
inline std::string* LimitConfig::mutable_limit_type() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.limit_type)
  return _internal_mutable_limit_type();
}
inline const std::string& LimitConfig::_internal_limit_type() const {
  return limit_type_.Get();
}
inline void LimitConfig::_internal_set_limit_type(const std::string& value) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LimitConfig::set_limit_type(std::string&& value) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LimitConfig.limit_type)
}
inline void LimitConfig::set_limit_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:LimitConfig.limit_type)
}
inline void LimitConfig::set_limit_type(const char* value, size_t size) {
  limit_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LimitConfig.limit_type)
}
inline std::string* LimitConfig::_internal_mutable_limit_type() {
  return limit_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LimitConfig::release_limit_type() {
  // @@protoc_insertion_point(field_release:LimitConfig.limit_type)
  return limit_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LimitConfig::set_allocated_limit_type(std::string* limit_type) {
  if (limit_type != nullptr) {
  } else {
  }
  limit_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), limit_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.limit_type)
}

// .ResourceLimitConfig resource_limit_config = 2;
inline bool LimitConfig::_internal_has_resource_limit_config() const {
  return this != internal_default_instance() && resource_limit_config_ != nullptr;
}
inline bool LimitConfig::has_resource_limit_config() const {
  return _internal_has_resource_limit_config();
}
inline void LimitConfig::clear_resource_limit_config() {
  if (GetArena() == nullptr && resource_limit_config_ != nullptr) {
    delete resource_limit_config_;
  }
  resource_limit_config_ = nullptr;
}
inline const ::ResourceLimitConfig& LimitConfig::_internal_resource_limit_config() const {
  const ::ResourceLimitConfig* p = resource_limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::ResourceLimitConfig*>(
                            &::_ResourceLimitConfig_default_instance_);
}
inline const ::ResourceLimitConfig& LimitConfig::resource_limit_config() const {
  // @@protoc_insertion_point(field_get:LimitConfig.resource_limit_config)
  return _internal_resource_limit_config();
}
inline void LimitConfig::unsafe_arena_set_allocated_resource_limit_config(
    ::ResourceLimitConfig* resource_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_limit_config_);
  }
  resource_limit_config_ = resource_limit_config;
  if (resource_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LimitConfig.resource_limit_config)
}
inline ::ResourceLimitConfig* LimitConfig::release_resource_limit_config() {
  ::ResourceLimitConfig* temp = resource_limit_config_;
  resource_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ResourceLimitConfig* LimitConfig::unsafe_arena_release_resource_limit_config() {
  // @@protoc_insertion_point(field_release:LimitConfig.resource_limit_config)

  ::ResourceLimitConfig* temp = resource_limit_config_;
  resource_limit_config_ = nullptr;
  return temp;
}
inline ::ResourceLimitConfig* LimitConfig::_internal_mutable_resource_limit_config() {
  if (resource_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ResourceLimitConfig>(GetArena());
    resource_limit_config_ = p;
  }
  return resource_limit_config_;
}
inline ::ResourceLimitConfig* LimitConfig::mutable_resource_limit_config() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.resource_limit_config)
  return _internal_mutable_resource_limit_config();
}
inline void LimitConfig::set_allocated_resource_limit_config(
    ::ResourceLimitConfig* resource_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_limit_config_;
  }
  if (resource_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_limit_config);
    if (message_arena != submessage_arena) {
      resource_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_limit_config, submessage_arena);
    }

  } else {
  }
  resource_limit_config_ = resource_limit_config;
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.resource_limit_config)
}

// .FitnessLimitConfig fitness_limit_config = 3;
inline bool LimitConfig::_internal_has_fitness_limit_config() const {
  return this != internal_default_instance() && fitness_limit_config_ != nullptr;
}
inline bool LimitConfig::has_fitness_limit_config() const {
  return _internal_has_fitness_limit_config();
}
inline void LimitConfig::clear_fitness_limit_config() {
  if (GetArena() == nullptr && fitness_limit_config_ != nullptr) {
    delete fitness_limit_config_;
  }
  fitness_limit_config_ = nullptr;
}
inline const ::FitnessLimitConfig& LimitConfig::_internal_fitness_limit_config() const {
  const ::FitnessLimitConfig* p = fitness_limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::FitnessLimitConfig*>(
                            &::_FitnessLimitConfig_default_instance_);
}
inline const ::FitnessLimitConfig& LimitConfig::fitness_limit_config() const {
  // @@protoc_insertion_point(field_get:LimitConfig.fitness_limit_config)
  return _internal_fitness_limit_config();
}
inline void LimitConfig::unsafe_arena_set_allocated_fitness_limit_config(
    ::FitnessLimitConfig* fitness_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fitness_limit_config_);
  }
  fitness_limit_config_ = fitness_limit_config;
  if (fitness_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LimitConfig.fitness_limit_config)
}
inline ::FitnessLimitConfig* LimitConfig::release_fitness_limit_config() {
  ::FitnessLimitConfig* temp = fitness_limit_config_;
  fitness_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::FitnessLimitConfig* LimitConfig::unsafe_arena_release_fitness_limit_config() {
  // @@protoc_insertion_point(field_release:LimitConfig.fitness_limit_config)

  ::FitnessLimitConfig* temp = fitness_limit_config_;
  fitness_limit_config_ = nullptr;
  return temp;
}
inline ::FitnessLimitConfig* LimitConfig::_internal_mutable_fitness_limit_config() {
  if (fitness_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::FitnessLimitConfig>(GetArena());
    fitness_limit_config_ = p;
  }
  return fitness_limit_config_;
}
inline ::FitnessLimitConfig* LimitConfig::mutable_fitness_limit_config() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.fitness_limit_config)
  return _internal_mutable_fitness_limit_config();
}
inline void LimitConfig::set_allocated_fitness_limit_config(
    ::FitnessLimitConfig* fitness_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fitness_limit_config_;
  }
  if (fitness_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fitness_limit_config);
    if (message_arena != submessage_arena) {
      fitness_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fitness_limit_config, submessage_arena);
    }

  } else {
  }
  fitness_limit_config_ = fitness_limit_config;
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.fitness_limit_config)
}

// .ConjLimitConfig conj_limit_config = 4;
inline bool LimitConfig::_internal_has_conj_limit_config() const {
  return this != internal_default_instance() && conj_limit_config_ != nullptr;
}
inline bool LimitConfig::has_conj_limit_config() const {
  return _internal_has_conj_limit_config();
}
inline void LimitConfig::clear_conj_limit_config() {
  if (GetArena() == nullptr && conj_limit_config_ != nullptr) {
    delete conj_limit_config_;
  }
  conj_limit_config_ = nullptr;
}
inline const ::ConjLimitConfig& LimitConfig::_internal_conj_limit_config() const {
  const ::ConjLimitConfig* p = conj_limit_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::ConjLimitConfig*>(&::_ConjLimitConfig_default_instance_);
}
inline const ::ConjLimitConfig& LimitConfig::conj_limit_config() const {
  // @@protoc_insertion_point(field_get:LimitConfig.conj_limit_config)
  return _internal_conj_limit_config();
}
inline void LimitConfig::unsafe_arena_set_allocated_conj_limit_config(
    ::ConjLimitConfig* conj_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conj_limit_config_);
  }
  conj_limit_config_ = conj_limit_config;
  if (conj_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LimitConfig.conj_limit_config)
}
inline ::ConjLimitConfig* LimitConfig::release_conj_limit_config() {
  ::ConjLimitConfig* temp = conj_limit_config_;
  conj_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ConjLimitConfig* LimitConfig::unsafe_arena_release_conj_limit_config() {
  // @@protoc_insertion_point(field_release:LimitConfig.conj_limit_config)

  ::ConjLimitConfig* temp = conj_limit_config_;
  conj_limit_config_ = nullptr;
  return temp;
}
inline ::ConjLimitConfig* LimitConfig::_internal_mutable_conj_limit_config() {
  if (conj_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConjLimitConfig>(GetArena());
    conj_limit_config_ = p;
  }
  return conj_limit_config_;
}
inline ::ConjLimitConfig* LimitConfig::mutable_conj_limit_config() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.conj_limit_config)
  return _internal_mutable_conj_limit_config();
}
inline void LimitConfig::set_allocated_conj_limit_config(::ConjLimitConfig* conj_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conj_limit_config_;
  }
  if (conj_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conj_limit_config);
    if (message_arena != submessage_arena) {
      conj_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conj_limit_config, submessage_arena);
    }

  } else {
  }
  conj_limit_config_ = conj_limit_config;
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.conj_limit_config)
}

// .PointsLimitConfig points_limit_config = 5;
inline bool LimitConfig::_internal_has_points_limit_config() const {
  return this != internal_default_instance() && points_limit_config_ != nullptr;
}
inline bool LimitConfig::has_points_limit_config() const {
  return _internal_has_points_limit_config();
}
inline void LimitConfig::clear_points_limit_config() {
  if (GetArena() == nullptr && points_limit_config_ != nullptr) {
    delete points_limit_config_;
  }
  points_limit_config_ = nullptr;
}
inline const ::PointsLimitConfig& LimitConfig::_internal_points_limit_config() const {
  const ::PointsLimitConfig* p = points_limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::PointsLimitConfig*>(
                            &::_PointsLimitConfig_default_instance_);
}
inline const ::PointsLimitConfig& LimitConfig::points_limit_config() const {
  // @@protoc_insertion_point(field_get:LimitConfig.points_limit_config)
  return _internal_points_limit_config();
}
inline void LimitConfig::unsafe_arena_set_allocated_points_limit_config(
    ::PointsLimitConfig* points_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(points_limit_config_);
  }
  points_limit_config_ = points_limit_config;
  if (points_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LimitConfig.points_limit_config)
}
inline ::PointsLimitConfig* LimitConfig::release_points_limit_config() {
  ::PointsLimitConfig* temp = points_limit_config_;
  points_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PointsLimitConfig* LimitConfig::unsafe_arena_release_points_limit_config() {
  // @@protoc_insertion_point(field_release:LimitConfig.points_limit_config)

  ::PointsLimitConfig* temp = points_limit_config_;
  points_limit_config_ = nullptr;
  return temp;
}
inline ::PointsLimitConfig* LimitConfig::_internal_mutable_points_limit_config() {
  if (points_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::PointsLimitConfig>(GetArena());
    points_limit_config_ = p;
  }
  return points_limit_config_;
}
inline ::PointsLimitConfig* LimitConfig::mutable_points_limit_config() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.points_limit_config)
  return _internal_mutable_points_limit_config();
}
inline void LimitConfig::set_allocated_points_limit_config(
    ::PointsLimitConfig* points_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete points_limit_config_;
  }
  if (points_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(points_limit_config);
    if (message_arena != submessage_arena) {
      points_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points_limit_config, submessage_arena);
    }

  } else {
  }
  points_limit_config_ = points_limit_config;
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.points_limit_config)
}

// .StallLimitConfig stall_limit_config = 6;
inline bool LimitConfig::_internal_has_stall_limit_config() const {
  return this != internal_default_instance() && stall_limit_config_ != nullptr;
}
inline bool LimitConfig::has_stall_limit_config() const {
  return _internal_has_stall_limit_config();
}
inline void LimitConfig::clear_stall_limit_config() {
  if (GetArena() == nullptr && stall_limit_config_ != nullptr) {
    delete stall_limit_config_;
  }
  stall_limit_config_ = nullptr;
}
inline const ::StallLimitConfig& LimitConfig::_internal_stall_limit_config() const {
  const ::StallLimitConfig* p = stall_limit_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::StallLimitConfig*>(&::_StallLimitConfig_default_instance_);
}
inline const ::StallLimitConfig& LimitConfig::stall_limit_config() const {
  // @@protoc_insertion_point(field_get:LimitConfig.stall_limit_config)
  return _internal_stall_limit_config();
}
inline void LimitConfig::unsafe_arena_set_allocated_stall_limit_config(
    ::StallLimitConfig* stall_limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stall_limit_config_);
  }
  stall_limit_config_ = stall_limit_config;
  if (stall_limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LimitConfig.stall_limit_config)
}
inline ::StallLimitConfig* LimitConfig::release_stall_limit_config() {
  ::StallLimitConfig* temp = stall_limit_config_;
  stall_limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::StallLimitConfig* LimitConfig::unsafe_arena_release_stall_limit_config() {
  // @@protoc_insertion_point(field_release:LimitConfig.stall_limit_config)

  ::StallLimitConfig* temp = stall_limit_config_;
  stall_limit_config_ = nullptr;
  return temp;
}
inline ::StallLimitConfig* LimitConfig::_internal_mutable_stall_limit_config() {
  if (stall_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::StallLimitConfig>(GetArena());
    stall_limit_config_ = p;
  }
  return stall_limit_config_;
}
inline ::StallLimitConfig* LimitConfig::mutable_stall_limit_config() {
  // @@protoc_insertion_point(field_mutable:LimitConfig.stall_limit_config)
  return _internal_mutable_stall_limit_config();
}
inline void LimitConfig::set_allocated_stall_limit_config(::StallLimitConfig* stall_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stall_limit_config_;
  }
  if (stall_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stall_limit_config);
    if (message_arena != submessage_arena) {
      stall_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stall_limit_config, submessage_arena);
    }

  } else {
  }
  stall_limit_config_ = stall_limit_config;
  // @@protoc_insertion_point(field_set_allocated:LimitConfig.stall_limit_config)
}

// -------------------------------------------------------------------

// UniformMutationConfig

// double scale = 1;
inline void UniformMutationConfig::clear_scale() {
  scale_ = 0;
}
inline double UniformMutationConfig::_internal_scale() const {
  return scale_;
}
inline double UniformMutationConfig::scale() const {
  // @@protoc_insertion_point(field_get:UniformMutationConfig.scale)
  return _internal_scale();
}
inline void UniformMutationConfig::_internal_set_scale(double value) {
  scale_ = value;
}
inline void UniformMutationConfig::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:UniformMutationConfig.scale)
}

// -------------------------------------------------------------------

// DoerrMutationConfig

// double beta = 1;
inline void DoerrMutationConfig::clear_beta() {
  beta_ = 0;
}
inline double DoerrMutationConfig::_internal_beta() const {
  return beta_;
}
inline double DoerrMutationConfig::beta() const {
  // @@protoc_insertion_point(field_get:DoerrMutationConfig.beta)
  return _internal_beta();
}
inline void DoerrMutationConfig::_internal_set_beta(double value) {
  beta_ = value;
}
inline void DoerrMutationConfig::set_beta(double value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:DoerrMutationConfig.beta)
}

// -------------------------------------------------------------------

// MutationConfig

// string mutation_type = 1;
inline void MutationConfig::clear_mutation_type() {
  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MutationConfig::mutation_type() const {
  // @@protoc_insertion_point(field_get:MutationConfig.mutation_type)
  return _internal_mutation_type();
}
inline void MutationConfig::set_mutation_type(const std::string& value) {
  _internal_set_mutation_type(value);
  // @@protoc_insertion_point(field_set:MutationConfig.mutation_type)
}
inline std::string* MutationConfig::mutable_mutation_type() {
  // @@protoc_insertion_point(field_mutable:MutationConfig.mutation_type)
  return _internal_mutable_mutation_type();
}
inline const std::string& MutationConfig::_internal_mutation_type() const {
  return mutation_type_.Get();
}
inline void MutationConfig::_internal_set_mutation_type(const std::string& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MutationConfig::set_mutation_type(std::string&& value) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MutationConfig.mutation_type)
}
inline void MutationConfig::set_mutation_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:MutationConfig.mutation_type)
}
inline void MutationConfig::set_mutation_type(const char* value, size_t size) {
  mutation_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MutationConfig.mutation_type)
}
inline std::string* MutationConfig::_internal_mutable_mutation_type() {
  return mutation_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MutationConfig::release_mutation_type() {
  // @@protoc_insertion_point(field_release:MutationConfig.mutation_type)
  return mutation_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MutationConfig::set_allocated_mutation_type(std::string* mutation_type) {
  if (mutation_type != nullptr) {
  } else {
  }
  mutation_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mutation_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:MutationConfig.mutation_type)
}

// .UniformMutationConfig uniform_mutation_config = 2;
inline bool MutationConfig::_internal_has_uniform_mutation_config() const {
  return this != internal_default_instance() && uniform_mutation_config_ != nullptr;
}
inline bool MutationConfig::has_uniform_mutation_config() const {
  return _internal_has_uniform_mutation_config();
}
inline void MutationConfig::clear_uniform_mutation_config() {
  if (GetArena() == nullptr && uniform_mutation_config_ != nullptr) {
    delete uniform_mutation_config_;
  }
  uniform_mutation_config_ = nullptr;
}
inline const ::UniformMutationConfig& MutationConfig::_internal_uniform_mutation_config() const {
  const ::UniformMutationConfig* p = uniform_mutation_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::UniformMutationConfig*>(
                            &::_UniformMutationConfig_default_instance_);
}
inline const ::UniformMutationConfig& MutationConfig::uniform_mutation_config() const {
  // @@protoc_insertion_point(field_get:MutationConfig.uniform_mutation_config)
  return _internal_uniform_mutation_config();
}
inline void MutationConfig::unsafe_arena_set_allocated_uniform_mutation_config(
    ::UniformMutationConfig* uniform_mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniform_mutation_config_);
  }
  uniform_mutation_config_ = uniform_mutation_config;
  if (uniform_mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MutationConfig.uniform_mutation_config)
}
inline ::UniformMutationConfig* MutationConfig::release_uniform_mutation_config() {
  ::UniformMutationConfig* temp = uniform_mutation_config_;
  uniform_mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::UniformMutationConfig* MutationConfig::unsafe_arena_release_uniform_mutation_config() {
  // @@protoc_insertion_point(field_release:MutationConfig.uniform_mutation_config)

  ::UniformMutationConfig* temp = uniform_mutation_config_;
  uniform_mutation_config_ = nullptr;
  return temp;
}
inline ::UniformMutationConfig* MutationConfig::_internal_mutable_uniform_mutation_config() {
  if (uniform_mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::UniformMutationConfig>(GetArena());
    uniform_mutation_config_ = p;
  }
  return uniform_mutation_config_;
}
inline ::UniformMutationConfig* MutationConfig::mutable_uniform_mutation_config() {
  // @@protoc_insertion_point(field_mutable:MutationConfig.uniform_mutation_config)
  return _internal_mutable_uniform_mutation_config();
}
inline void MutationConfig::set_allocated_uniform_mutation_config(
    ::UniformMutationConfig* uniform_mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uniform_mutation_config_;
  }
  if (uniform_mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uniform_mutation_config);
    if (message_arena != submessage_arena) {
      uniform_mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniform_mutation_config, submessage_arena);
    }

  } else {
  }
  uniform_mutation_config_ = uniform_mutation_config;
  // @@protoc_insertion_point(field_set_allocated:MutationConfig.uniform_mutation_config)
}

// .DoerrMutationConfig doerr_mutation_config = 3;
inline bool MutationConfig::_internal_has_doerr_mutation_config() const {
  return this != internal_default_instance() && doerr_mutation_config_ != nullptr;
}
inline bool MutationConfig::has_doerr_mutation_config() const {
  return _internal_has_doerr_mutation_config();
}
inline void MutationConfig::clear_doerr_mutation_config() {
  if (GetArena() == nullptr && doerr_mutation_config_ != nullptr) {
    delete doerr_mutation_config_;
  }
  doerr_mutation_config_ = nullptr;
}
inline const ::DoerrMutationConfig& MutationConfig::_internal_doerr_mutation_config() const {
  const ::DoerrMutationConfig* p = doerr_mutation_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::DoerrMutationConfig*>(
                            &::_DoerrMutationConfig_default_instance_);
}
inline const ::DoerrMutationConfig& MutationConfig::doerr_mutation_config() const {
  // @@protoc_insertion_point(field_get:MutationConfig.doerr_mutation_config)
  return _internal_doerr_mutation_config();
}
inline void MutationConfig::unsafe_arena_set_allocated_doerr_mutation_config(
    ::DoerrMutationConfig* doerr_mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doerr_mutation_config_);
  }
  doerr_mutation_config_ = doerr_mutation_config;
  if (doerr_mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MutationConfig.doerr_mutation_config)
}
inline ::DoerrMutationConfig* MutationConfig::release_doerr_mutation_config() {
  ::DoerrMutationConfig* temp = doerr_mutation_config_;
  doerr_mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DoerrMutationConfig* MutationConfig::unsafe_arena_release_doerr_mutation_config() {
  // @@protoc_insertion_point(field_release:MutationConfig.doerr_mutation_config)

  ::DoerrMutationConfig* temp = doerr_mutation_config_;
  doerr_mutation_config_ = nullptr;
  return temp;
}
inline ::DoerrMutationConfig* MutationConfig::_internal_mutable_doerr_mutation_config() {
  if (doerr_mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::DoerrMutationConfig>(GetArena());
    doerr_mutation_config_ = p;
  }
  return doerr_mutation_config_;
}
inline ::DoerrMutationConfig* MutationConfig::mutable_doerr_mutation_config() {
  // @@protoc_insertion_point(field_mutable:MutationConfig.doerr_mutation_config)
  return _internal_mutable_doerr_mutation_config();
}
inline void MutationConfig::set_allocated_doerr_mutation_config(
    ::DoerrMutationConfig* doerr_mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete doerr_mutation_config_;
  }
  if (doerr_mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(doerr_mutation_config);
    if (message_arena != submessage_arena) {
      doerr_mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doerr_mutation_config, submessage_arena);
    }

  } else {
  }
  doerr_mutation_config_ = doerr_mutation_config;
  // @@protoc_insertion_point(field_set_allocated:MutationConfig.doerr_mutation_config)
}

// -------------------------------------------------------------------

// CrossoverConfig

// string crossover_type = 1;
inline void CrossoverConfig::clear_crossover_type() {
  crossover_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CrossoverConfig::crossover_type() const {
  // @@protoc_insertion_point(field_get:CrossoverConfig.crossover_type)
  return _internal_crossover_type();
}
inline void CrossoverConfig::set_crossover_type(const std::string& value) {
  _internal_set_crossover_type(value);
  // @@protoc_insertion_point(field_set:CrossoverConfig.crossover_type)
}
inline std::string* CrossoverConfig::mutable_crossover_type() {
  // @@protoc_insertion_point(field_mutable:CrossoverConfig.crossover_type)
  return _internal_mutable_crossover_type();
}
inline const std::string& CrossoverConfig::_internal_crossover_type() const {
  return crossover_type_.Get();
}
inline void CrossoverConfig::_internal_set_crossover_type(const std::string& value) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CrossoverConfig::set_crossover_type(std::string&& value) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CrossoverConfig.crossover_type)
}
inline void CrossoverConfig::set_crossover_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:CrossoverConfig.crossover_type)
}
inline void CrossoverConfig::set_crossover_type(const char* value, size_t size) {
  crossover_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CrossoverConfig.crossover_type)
}
inline std::string* CrossoverConfig::_internal_mutable_crossover_type() {
  return crossover_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CrossoverConfig::release_crossover_type() {
  // @@protoc_insertion_point(field_release:CrossoverConfig.crossover_type)
  return crossover_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrossoverConfig::set_allocated_crossover_type(std::string* crossover_type) {
  if (crossover_type != nullptr) {
  } else {
  }
  crossover_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crossover_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CrossoverConfig.crossover_type)
}

// -------------------------------------------------------------------

// SelectorConfig

// string selector_type = 1;
inline void SelectorConfig::clear_selector_type() {
  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SelectorConfig::selector_type() const {
  // @@protoc_insertion_point(field_get:SelectorConfig.selector_type)
  return _internal_selector_type();
}
inline void SelectorConfig::set_selector_type(const std::string& value) {
  _internal_set_selector_type(value);
  // @@protoc_insertion_point(field_set:SelectorConfig.selector_type)
}
inline std::string* SelectorConfig::mutable_selector_type() {
  // @@protoc_insertion_point(field_mutable:SelectorConfig.selector_type)
  return _internal_mutable_selector_type();
}
inline const std::string& SelectorConfig::_internal_selector_type() const {
  return selector_type_.Get();
}
inline void SelectorConfig::_internal_set_selector_type(const std::string& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SelectorConfig::set_selector_type(std::string&& value) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SelectorConfig.selector_type)
}
inline void SelectorConfig::set_selector_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:SelectorConfig.selector_type)
}
inline void SelectorConfig::set_selector_type(const char* value, size_t size) {
  selector_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SelectorConfig.selector_type)
}
inline std::string* SelectorConfig::_internal_mutable_selector_type() {
  return selector_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SelectorConfig::release_selector_type() {
  // @@protoc_insertion_point(field_release:SelectorConfig.selector_type)
  return selector_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SelectorConfig::set_allocated_selector_type(std::string* selector_type) {
  if (selector_type != nullptr) {
  } else {
  }
  selector_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:SelectorConfig.selector_type)
}

// -------------------------------------------------------------------

// InstanceConfig_SamplingSizeConfig

// uint64 base_count = 1;
inline void InstanceConfig_SamplingSizeConfig::clear_base_count() {
  base_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstanceConfig_SamplingSizeConfig::_internal_base_count()
    const {
  return base_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstanceConfig_SamplingSizeConfig::base_count() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.SamplingSizeConfig.base_count)
  return _internal_base_count();
}
inline void InstanceConfig_SamplingSizeConfig::_internal_set_base_count(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  base_count_ = value;
}
inline void InstanceConfig_SamplingSizeConfig::set_base_count(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_base_count(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.SamplingSizeConfig.base_count)
}

// uint32 max_steps = 2;
inline void InstanceConfig_SamplingSizeConfig::clear_max_steps() {
  max_steps_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig_SamplingSizeConfig::_internal_max_steps()
    const {
  return max_steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig_SamplingSizeConfig::max_steps() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.SamplingSizeConfig.max_steps)
  return _internal_max_steps();
}
inline void InstanceConfig_SamplingSizeConfig::_internal_set_max_steps(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_steps_ = value;
}
inline void InstanceConfig_SamplingSizeConfig::set_max_steps(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_steps(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.SamplingSizeConfig.max_steps)
}

// double scale = 3;
inline void InstanceConfig_SamplingSizeConfig::clear_scale() {
  scale_ = 0;
}
inline double InstanceConfig_SamplingSizeConfig::_internal_scale() const {
  return scale_;
}
inline double InstanceConfig_SamplingSizeConfig::scale() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.SamplingSizeConfig.scale)
  return _internal_scale();
}
inline void InstanceConfig_SamplingSizeConfig::_internal_set_scale(double value) {
  scale_ = value;
}
inline void InstanceConfig_SamplingSizeConfig::set_scale(double value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.SamplingSizeConfig.scale)
}

// -------------------------------------------------------------------

// InstanceConfig

// uint32 omega_x = 1;
inline void InstanceConfig::clear_omega_x() {
  omega_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::_internal_omega_x() const {
  return omega_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::omega_x() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.omega_x)
  return _internal_omega_x();
}
inline void InstanceConfig::_internal_set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  omega_x_ = value;
}
inline void InstanceConfig::set_omega_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_omega_x(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.omega_x)
}

// uint32 heuristic_size = 2;
inline void InstanceConfig::clear_heuristic_size() {
  heuristic_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::_internal_heuristic_size() const {
  return heuristic_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::heuristic_size() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.heuristic_size)
  return _internal_heuristic_size();
}
inline void InstanceConfig::_internal_set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  heuristic_size_ = value;
}
inline void InstanceConfig::set_heuristic_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heuristic_size(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.heuristic_size)
}

// uint32 max_cache_size = 3;
inline void InstanceConfig::clear_max_cache_size() {
  max_cache_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::_internal_max_cache_size() const {
  return max_cache_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstanceConfig::max_cache_size() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.max_cache_size)
  return _internal_max_cache_size();
}
inline void InstanceConfig::_internal_set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_cache_size_ = value;
}
inline void InstanceConfig::set_max_cache_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cache_size(value);
  // @@protoc_insertion_point(field_set:InstanceConfig.max_cache_size)
}

// .InstanceConfig.SamplingSizeConfig sampling_config = 4;
inline bool InstanceConfig::_internal_has_sampling_config() const {
  return this != internal_default_instance() && sampling_config_ != nullptr;
}
inline bool InstanceConfig::has_sampling_config() const {
  return _internal_has_sampling_config();
}
inline void InstanceConfig::clear_sampling_config() {
  if (GetArena() == nullptr && sampling_config_ != nullptr) {
    delete sampling_config_;
  }
  sampling_config_ = nullptr;
}
inline const ::InstanceConfig_SamplingSizeConfig& InstanceConfig::_internal_sampling_config()
    const {
  const ::InstanceConfig_SamplingSizeConfig* p = sampling_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::InstanceConfig_SamplingSizeConfig*>(
                            &::_InstanceConfig_SamplingSizeConfig_default_instance_);
}
inline const ::InstanceConfig_SamplingSizeConfig& InstanceConfig::sampling_config() const {
  // @@protoc_insertion_point(field_get:InstanceConfig.sampling_config)
  return _internal_sampling_config();
}
inline void InstanceConfig::unsafe_arena_set_allocated_sampling_config(
    ::InstanceConfig_SamplingSizeConfig* sampling_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_config_);
  }
  sampling_config_ = sampling_config;
  if (sampling_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InstanceConfig.sampling_config)
}
inline ::InstanceConfig_SamplingSizeConfig* InstanceConfig::release_sampling_config() {
  ::InstanceConfig_SamplingSizeConfig* temp = sampling_config_;
  sampling_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InstanceConfig_SamplingSizeConfig* InstanceConfig::unsafe_arena_release_sampling_config() {
  // @@protoc_insertion_point(field_release:InstanceConfig.sampling_config)

  ::InstanceConfig_SamplingSizeConfig* temp = sampling_config_;
  sampling_config_ = nullptr;
  return temp;
}
inline ::InstanceConfig_SamplingSizeConfig* InstanceConfig::_internal_mutable_sampling_config() {
  if (sampling_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceConfig_SamplingSizeConfig>(GetArena());
    sampling_config_ = p;
  }
  return sampling_config_;
}
inline ::InstanceConfig_SamplingSizeConfig* InstanceConfig::mutable_sampling_config() {
  // @@protoc_insertion_point(field_mutable:InstanceConfig.sampling_config)
  return _internal_mutable_sampling_config();
}
inline void InstanceConfig::set_allocated_sampling_config(
    ::InstanceConfig_SamplingSizeConfig* sampling_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sampling_config_;
  }
  if (sampling_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sampling_config);
    if (message_arena != submessage_arena) {
      sampling_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_config, submessage_arena);
    }

  } else {
  }
  sampling_config_ = sampling_config;
  // @@protoc_insertion_point(field_set_allocated:InstanceConfig.sampling_config)
}

// -------------------------------------------------------------------

// BaseAlgorithmConfig

// .SolverConfig solver_config = 1;
inline bool BaseAlgorithmConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool BaseAlgorithmConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void BaseAlgorithmConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& BaseAlgorithmConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& BaseAlgorithmConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:BaseAlgorithmConfig.solver_config)
  return _internal_solver_config();
}
inline void BaseAlgorithmConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BaseAlgorithmConfig.solver_config)
}
inline ::SolverConfig* BaseAlgorithmConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* BaseAlgorithmConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:BaseAlgorithmConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* BaseAlgorithmConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* BaseAlgorithmConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:BaseAlgorithmConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void BaseAlgorithmConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:BaseAlgorithmConfig.solver_config)
}

// .LimitConfig limit_config = 2;
inline bool BaseAlgorithmConfig::_internal_has_limit_config() const {
  return this != internal_default_instance() && limit_config_ != nullptr;
}
inline bool BaseAlgorithmConfig::has_limit_config() const {
  return _internal_has_limit_config();
}
inline void BaseAlgorithmConfig::clear_limit_config() {
  if (GetArena() == nullptr && limit_config_ != nullptr) {
    delete limit_config_;
  }
  limit_config_ = nullptr;
}
inline const ::LimitConfig& BaseAlgorithmConfig::_internal_limit_config() const {
  const ::LimitConfig* p = limit_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::LimitConfig*>(&::_LimitConfig_default_instance_);
}
inline const ::LimitConfig& BaseAlgorithmConfig::limit_config() const {
  // @@protoc_insertion_point(field_get:BaseAlgorithmConfig.limit_config)
  return _internal_limit_config();
}
inline void BaseAlgorithmConfig::unsafe_arena_set_allocated_limit_config(
    ::LimitConfig* limit_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_config_);
  }
  limit_config_ = limit_config;
  if (limit_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BaseAlgorithmConfig.limit_config)
}
inline ::LimitConfig* BaseAlgorithmConfig::release_limit_config() {
  ::LimitConfig* temp = limit_config_;
  limit_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LimitConfig* BaseAlgorithmConfig::unsafe_arena_release_limit_config() {
  // @@protoc_insertion_point(field_release:BaseAlgorithmConfig.limit_config)

  ::LimitConfig* temp = limit_config_;
  limit_config_ = nullptr;
  return temp;
}
inline ::LimitConfig* BaseAlgorithmConfig::_internal_mutable_limit_config() {
  if (limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::LimitConfig>(GetArena());
    limit_config_ = p;
  }
  return limit_config_;
}
inline ::LimitConfig* BaseAlgorithmConfig::mutable_limit_config() {
  // @@protoc_insertion_point(field_mutable:BaseAlgorithmConfig.limit_config)
  return _internal_mutable_limit_config();
}
inline void BaseAlgorithmConfig::set_allocated_limit_config(::LimitConfig* limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete limit_config_;
  }
  if (limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(limit_config);
    if (message_arena != submessage_arena) {
      limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit_config, submessage_arena);
    }

  } else {
  }
  limit_config_ = limit_config;
  // @@protoc_insertion_point(field_set_allocated:BaseAlgorithmConfig.limit_config)
}

// .InstanceConfig instance_config = 3;
inline bool BaseAlgorithmConfig::_internal_has_instance_config() const {
  return this != internal_default_instance() && instance_config_ != nullptr;
}
inline bool BaseAlgorithmConfig::has_instance_config() const {
  return _internal_has_instance_config();
}
inline void BaseAlgorithmConfig::clear_instance_config() {
  if (GetArena() == nullptr && instance_config_ != nullptr) {
    delete instance_config_;
  }
  instance_config_ = nullptr;
}
inline const ::InstanceConfig& BaseAlgorithmConfig::_internal_instance_config() const {
  const ::InstanceConfig* p = instance_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::InstanceConfig*>(&::_InstanceConfig_default_instance_);
}
inline const ::InstanceConfig& BaseAlgorithmConfig::instance_config() const {
  // @@protoc_insertion_point(field_get:BaseAlgorithmConfig.instance_config)
  return _internal_instance_config();
}
inline void BaseAlgorithmConfig::unsafe_arena_set_allocated_instance_config(
    ::InstanceConfig* instance_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_config_);
  }
  instance_config_ = instance_config;
  if (instance_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BaseAlgorithmConfig.instance_config)
}
inline ::InstanceConfig* BaseAlgorithmConfig::release_instance_config() {
  ::InstanceConfig* temp = instance_config_;
  instance_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::InstanceConfig* BaseAlgorithmConfig::unsafe_arena_release_instance_config() {
  // @@protoc_insertion_point(field_release:BaseAlgorithmConfig.instance_config)

  ::InstanceConfig* temp = instance_config_;
  instance_config_ = nullptr;
  return temp;
}
inline ::InstanceConfig* BaseAlgorithmConfig::_internal_mutable_instance_config() {
  if (instance_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::InstanceConfig>(GetArena());
    instance_config_ = p;
  }
  return instance_config_;
}
inline ::InstanceConfig* BaseAlgorithmConfig::mutable_instance_config() {
  // @@protoc_insertion_point(field_mutable:BaseAlgorithmConfig.instance_config)
  return _internal_mutable_instance_config();
}
inline void BaseAlgorithmConfig::set_allocated_instance_config(::InstanceConfig* instance_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete instance_config_;
  }
  if (instance_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(instance_config);
    if (message_arena != submessage_arena) {
      instance_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance_config, submessage_arena);
    }

  } else {
  }
  instance_config_ = instance_config;
  // @@protoc_insertion_point(field_set_allocated:BaseAlgorithmConfig.instance_config)
}

// -------------------------------------------------------------------

// EAAlgorithmConfig

// .MutationConfig mutation_config = 1;
inline bool EAAlgorithmConfig::_internal_has_mutation_config() const {
  return this != internal_default_instance() && mutation_config_ != nullptr;
}
inline bool EAAlgorithmConfig::has_mutation_config() const {
  return _internal_has_mutation_config();
}
inline void EAAlgorithmConfig::clear_mutation_config() {
  if (GetArena() == nullptr && mutation_config_ != nullptr) {
    delete mutation_config_;
  }
  mutation_config_ = nullptr;
}
inline const ::MutationConfig& EAAlgorithmConfig::_internal_mutation_config() const {
  const ::MutationConfig* p = mutation_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::MutationConfig*>(&::_MutationConfig_default_instance_);
}
inline const ::MutationConfig& EAAlgorithmConfig::mutation_config() const {
  // @@protoc_insertion_point(field_get:EAAlgorithmConfig.mutation_config)
  return _internal_mutation_config();
}
inline void EAAlgorithmConfig::unsafe_arena_set_allocated_mutation_config(
    ::MutationConfig* mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_config_);
  }
  mutation_config_ = mutation_config;
  if (mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EAAlgorithmConfig.mutation_config)
}
inline ::MutationConfig* EAAlgorithmConfig::release_mutation_config() {
  ::MutationConfig* temp = mutation_config_;
  mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MutationConfig* EAAlgorithmConfig::unsafe_arena_release_mutation_config() {
  // @@protoc_insertion_point(field_release:EAAlgorithmConfig.mutation_config)

  ::MutationConfig* temp = mutation_config_;
  mutation_config_ = nullptr;
  return temp;
}
inline ::MutationConfig* EAAlgorithmConfig::_internal_mutable_mutation_config() {
  if (mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::MutationConfig>(GetArena());
    mutation_config_ = p;
  }
  return mutation_config_;
}
inline ::MutationConfig* EAAlgorithmConfig::mutable_mutation_config() {
  // @@protoc_insertion_point(field_mutable:EAAlgorithmConfig.mutation_config)
  return _internal_mutable_mutation_config();
}
inline void EAAlgorithmConfig::set_allocated_mutation_config(::MutationConfig* mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mutation_config_;
  }
  if (mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutation_config);
    if (message_arena != submessage_arena) {
      mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation_config, submessage_arena);
    }

  } else {
  }
  mutation_config_ = mutation_config;
  // @@protoc_insertion_point(field_set_allocated:EAAlgorithmConfig.mutation_config)
}

// .SelectorConfig selector_config = 2;
inline bool EAAlgorithmConfig::_internal_has_selector_config() const {
  return this != internal_default_instance() && selector_config_ != nullptr;
}
inline bool EAAlgorithmConfig::has_selector_config() const {
  return _internal_has_selector_config();
}
inline void EAAlgorithmConfig::clear_selector_config() {
  if (GetArena() == nullptr && selector_config_ != nullptr) {
    delete selector_config_;
  }
  selector_config_ = nullptr;
}
inline const ::SelectorConfig& EAAlgorithmConfig::_internal_selector_config() const {
  const ::SelectorConfig* p = selector_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SelectorConfig*>(&::_SelectorConfig_default_instance_);
}
inline const ::SelectorConfig& EAAlgorithmConfig::selector_config() const {
  // @@protoc_insertion_point(field_get:EAAlgorithmConfig.selector_config)
  return _internal_selector_config();
}
inline void EAAlgorithmConfig::unsafe_arena_set_allocated_selector_config(
    ::SelectorConfig* selector_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selector_config_);
  }
  selector_config_ = selector_config;
  if (selector_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EAAlgorithmConfig.selector_config)
}
inline ::SelectorConfig* EAAlgorithmConfig::release_selector_config() {
  ::SelectorConfig* temp = selector_config_;
  selector_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SelectorConfig* EAAlgorithmConfig::unsafe_arena_release_selector_config() {
  // @@protoc_insertion_point(field_release:EAAlgorithmConfig.selector_config)

  ::SelectorConfig* temp = selector_config_;
  selector_config_ = nullptr;
  return temp;
}
inline ::SelectorConfig* EAAlgorithmConfig::_internal_mutable_selector_config() {
  if (selector_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SelectorConfig>(GetArena());
    selector_config_ = p;
  }
  return selector_config_;
}
inline ::SelectorConfig* EAAlgorithmConfig::mutable_selector_config() {
  // @@protoc_insertion_point(field_mutable:EAAlgorithmConfig.selector_config)
  return _internal_mutable_selector_config();
}
inline void EAAlgorithmConfig::set_allocated_selector_config(::SelectorConfig* selector_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selector_config_;
  }
  if (selector_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selector_config);
    if (message_arena != submessage_arena) {
      selector_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selector_config, submessage_arena);
    }

  } else {
  }
  selector_config_ = selector_config;
  // @@protoc_insertion_point(field_set_allocated:EAAlgorithmConfig.selector_config)
}

// .BaseAlgorithmConfig base_algorithm_config = 3;
inline bool EAAlgorithmConfig::_internal_has_base_algorithm_config() const {
  return this != internal_default_instance() && base_algorithm_config_ != nullptr;
}
inline bool EAAlgorithmConfig::has_base_algorithm_config() const {
  return _internal_has_base_algorithm_config();
}
inline void EAAlgorithmConfig::clear_base_algorithm_config() {
  if (GetArena() == nullptr && base_algorithm_config_ != nullptr) {
    delete base_algorithm_config_;
  }
  base_algorithm_config_ = nullptr;
}
inline const ::BaseAlgorithmConfig& EAAlgorithmConfig::_internal_base_algorithm_config() const {
  const ::BaseAlgorithmConfig* p = base_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::BaseAlgorithmConfig*>(
                            &::_BaseAlgorithmConfig_default_instance_);
}
inline const ::BaseAlgorithmConfig& EAAlgorithmConfig::base_algorithm_config() const {
  // @@protoc_insertion_point(field_get:EAAlgorithmConfig.base_algorithm_config)
  return _internal_base_algorithm_config();
}
inline void EAAlgorithmConfig::unsafe_arena_set_allocated_base_algorithm_config(
    ::BaseAlgorithmConfig* base_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_algorithm_config_);
  }
  base_algorithm_config_ = base_algorithm_config;
  if (base_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EAAlgorithmConfig.base_algorithm_config)
}
inline ::BaseAlgorithmConfig* EAAlgorithmConfig::release_base_algorithm_config() {
  ::BaseAlgorithmConfig* temp = base_algorithm_config_;
  base_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BaseAlgorithmConfig* EAAlgorithmConfig::unsafe_arena_release_base_algorithm_config() {
  // @@protoc_insertion_point(field_release:EAAlgorithmConfig.base_algorithm_config)

  ::BaseAlgorithmConfig* temp = base_algorithm_config_;
  base_algorithm_config_ = nullptr;
  return temp;
}
inline ::BaseAlgorithmConfig* EAAlgorithmConfig::_internal_mutable_base_algorithm_config() {
  if (base_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseAlgorithmConfig>(GetArena());
    base_algorithm_config_ = p;
  }
  return base_algorithm_config_;
}
inline ::BaseAlgorithmConfig* EAAlgorithmConfig::mutable_base_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:EAAlgorithmConfig.base_algorithm_config)
  return _internal_mutable_base_algorithm_config();
}
inline void EAAlgorithmConfig::set_allocated_base_algorithm_config(
    ::BaseAlgorithmConfig* base_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_algorithm_config_;
  }
  if (base_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_algorithm_config);
    if (message_arena != submessage_arena) {
      base_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_algorithm_config, submessage_arena);
    }

  } else {
  }
  base_algorithm_config_ = base_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:EAAlgorithmConfig.base_algorithm_config)
}

// -------------------------------------------------------------------

// GAAlgorithmConfig

// uint32 q = 4;
inline void GAAlgorithmConfig::clear_q() {
  q_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::_internal_q() const {
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::q() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.q)
  return _internal_q();
}
inline void GAAlgorithmConfig::_internal_set_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  q_ = value;
}
inline void GAAlgorithmConfig::set_q(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.q)
}

// uint32 h = 5;
inline void GAAlgorithmConfig::clear_h() {
  h_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GAAlgorithmConfig::h() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.h)
  return _internal_h();
}
inline void GAAlgorithmConfig::_internal_set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  h_ = value;
}
inline void GAAlgorithmConfig::set_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:GAAlgorithmConfig.h)
}

// .MutationConfig mutation_config = 1;
inline bool GAAlgorithmConfig::_internal_has_mutation_config() const {
  return this != internal_default_instance() && mutation_config_ != nullptr;
}
inline bool GAAlgorithmConfig::has_mutation_config() const {
  return _internal_has_mutation_config();
}
inline void GAAlgorithmConfig::clear_mutation_config() {
  if (GetArena() == nullptr && mutation_config_ != nullptr) {
    delete mutation_config_;
  }
  mutation_config_ = nullptr;
}
inline const ::MutationConfig& GAAlgorithmConfig::_internal_mutation_config() const {
  const ::MutationConfig* p = mutation_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::MutationConfig*>(&::_MutationConfig_default_instance_);
}
inline const ::MutationConfig& GAAlgorithmConfig::mutation_config() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.mutation_config)
  return _internal_mutation_config();
}
inline void GAAlgorithmConfig::unsafe_arena_set_allocated_mutation_config(
    ::MutationConfig* mutation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_config_);
  }
  mutation_config_ = mutation_config;
  if (mutation_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GAAlgorithmConfig.mutation_config)
}
inline ::MutationConfig* GAAlgorithmConfig::release_mutation_config() {
  ::MutationConfig* temp = mutation_config_;
  mutation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MutationConfig* GAAlgorithmConfig::unsafe_arena_release_mutation_config() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.mutation_config)

  ::MutationConfig* temp = mutation_config_;
  mutation_config_ = nullptr;
  return temp;
}
inline ::MutationConfig* GAAlgorithmConfig::_internal_mutable_mutation_config() {
  if (mutation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::MutationConfig>(GetArena());
    mutation_config_ = p;
  }
  return mutation_config_;
}
inline ::MutationConfig* GAAlgorithmConfig::mutable_mutation_config() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.mutation_config)
  return _internal_mutable_mutation_config();
}
inline void GAAlgorithmConfig::set_allocated_mutation_config(::MutationConfig* mutation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mutation_config_;
  }
  if (mutation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutation_config);
    if (message_arena != submessage_arena) {
      mutation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation_config, submessage_arena);
    }

  } else {
  }
  mutation_config_ = mutation_config;
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.mutation_config)
}

// .CrossoverConfig crossover_config = 2;
inline bool GAAlgorithmConfig::_internal_has_crossover_config() const {
  return this != internal_default_instance() && crossover_config_ != nullptr;
}
inline bool GAAlgorithmConfig::has_crossover_config() const {
  return _internal_has_crossover_config();
}
inline void GAAlgorithmConfig::clear_crossover_config() {
  if (GetArena() == nullptr && crossover_config_ != nullptr) {
    delete crossover_config_;
  }
  crossover_config_ = nullptr;
}
inline const ::CrossoverConfig& GAAlgorithmConfig::_internal_crossover_config() const {
  const ::CrossoverConfig* p = crossover_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::CrossoverConfig*>(&::_CrossoverConfig_default_instance_);
}
inline const ::CrossoverConfig& GAAlgorithmConfig::crossover_config() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.crossover_config)
  return _internal_crossover_config();
}
inline void GAAlgorithmConfig::unsafe_arena_set_allocated_crossover_config(
    ::CrossoverConfig* crossover_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crossover_config_);
  }
  crossover_config_ = crossover_config;
  if (crossover_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GAAlgorithmConfig.crossover_config)
}
inline ::CrossoverConfig* GAAlgorithmConfig::release_crossover_config() {
  ::CrossoverConfig* temp = crossover_config_;
  crossover_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CrossoverConfig* GAAlgorithmConfig::unsafe_arena_release_crossover_config() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.crossover_config)

  ::CrossoverConfig* temp = crossover_config_;
  crossover_config_ = nullptr;
  return temp;
}
inline ::CrossoverConfig* GAAlgorithmConfig::_internal_mutable_crossover_config() {
  if (crossover_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CrossoverConfig>(GetArena());
    crossover_config_ = p;
  }
  return crossover_config_;
}
inline ::CrossoverConfig* GAAlgorithmConfig::mutable_crossover_config() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.crossover_config)
  return _internal_mutable_crossover_config();
}
inline void GAAlgorithmConfig::set_allocated_crossover_config(::CrossoverConfig* crossover_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crossover_config_;
  }
  if (crossover_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crossover_config);
    if (message_arena != submessage_arena) {
      crossover_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crossover_config, submessage_arena);
    }

  } else {
  }
  crossover_config_ = crossover_config;
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.crossover_config)
}

// .SelectorConfig selector_config = 3;
inline bool GAAlgorithmConfig::_internal_has_selector_config() const {
  return this != internal_default_instance() && selector_config_ != nullptr;
}
inline bool GAAlgorithmConfig::has_selector_config() const {
  return _internal_has_selector_config();
}
inline void GAAlgorithmConfig::clear_selector_config() {
  if (GetArena() == nullptr && selector_config_ != nullptr) {
    delete selector_config_;
  }
  selector_config_ = nullptr;
}
inline const ::SelectorConfig& GAAlgorithmConfig::_internal_selector_config() const {
  const ::SelectorConfig* p = selector_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SelectorConfig*>(&::_SelectorConfig_default_instance_);
}
inline const ::SelectorConfig& GAAlgorithmConfig::selector_config() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.selector_config)
  return _internal_selector_config();
}
inline void GAAlgorithmConfig::unsafe_arena_set_allocated_selector_config(
    ::SelectorConfig* selector_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selector_config_);
  }
  selector_config_ = selector_config;
  if (selector_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GAAlgorithmConfig.selector_config)
}
inline ::SelectorConfig* GAAlgorithmConfig::release_selector_config() {
  ::SelectorConfig* temp = selector_config_;
  selector_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SelectorConfig* GAAlgorithmConfig::unsafe_arena_release_selector_config() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.selector_config)

  ::SelectorConfig* temp = selector_config_;
  selector_config_ = nullptr;
  return temp;
}
inline ::SelectorConfig* GAAlgorithmConfig::_internal_mutable_selector_config() {
  if (selector_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SelectorConfig>(GetArena());
    selector_config_ = p;
  }
  return selector_config_;
}
inline ::SelectorConfig* GAAlgorithmConfig::mutable_selector_config() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.selector_config)
  return _internal_mutable_selector_config();
}
inline void GAAlgorithmConfig::set_allocated_selector_config(::SelectorConfig* selector_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selector_config_;
  }
  if (selector_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selector_config);
    if (message_arena != submessage_arena) {
      selector_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selector_config, submessage_arena);
    }

  } else {
  }
  selector_config_ = selector_config;
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.selector_config)
}

// .BaseAlgorithmConfig base_algorithm_config = 6;
inline bool GAAlgorithmConfig::_internal_has_base_algorithm_config() const {
  return this != internal_default_instance() && base_algorithm_config_ != nullptr;
}
inline bool GAAlgorithmConfig::has_base_algorithm_config() const {
  return _internal_has_base_algorithm_config();
}
inline void GAAlgorithmConfig::clear_base_algorithm_config() {
  if (GetArena() == nullptr && base_algorithm_config_ != nullptr) {
    delete base_algorithm_config_;
  }
  base_algorithm_config_ = nullptr;
}
inline const ::BaseAlgorithmConfig& GAAlgorithmConfig::_internal_base_algorithm_config() const {
  const ::BaseAlgorithmConfig* p = base_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::BaseAlgorithmConfig*>(
                            &::_BaseAlgorithmConfig_default_instance_);
}
inline const ::BaseAlgorithmConfig& GAAlgorithmConfig::base_algorithm_config() const {
  // @@protoc_insertion_point(field_get:GAAlgorithmConfig.base_algorithm_config)
  return _internal_base_algorithm_config();
}
inline void GAAlgorithmConfig::unsafe_arena_set_allocated_base_algorithm_config(
    ::BaseAlgorithmConfig* base_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_algorithm_config_);
  }
  base_algorithm_config_ = base_algorithm_config;
  if (base_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GAAlgorithmConfig.base_algorithm_config)
}
inline ::BaseAlgorithmConfig* GAAlgorithmConfig::release_base_algorithm_config() {
  ::BaseAlgorithmConfig* temp = base_algorithm_config_;
  base_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BaseAlgorithmConfig* GAAlgorithmConfig::unsafe_arena_release_base_algorithm_config() {
  // @@protoc_insertion_point(field_release:GAAlgorithmConfig.base_algorithm_config)

  ::BaseAlgorithmConfig* temp = base_algorithm_config_;
  base_algorithm_config_ = nullptr;
  return temp;
}
inline ::BaseAlgorithmConfig* GAAlgorithmConfig::_internal_mutable_base_algorithm_config() {
  if (base_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseAlgorithmConfig>(GetArena());
    base_algorithm_config_ = p;
  }
  return base_algorithm_config_;
}
inline ::BaseAlgorithmConfig* GAAlgorithmConfig::mutable_base_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:GAAlgorithmConfig.base_algorithm_config)
  return _internal_mutable_base_algorithm_config();
}
inline void GAAlgorithmConfig::set_allocated_base_algorithm_config(
    ::BaseAlgorithmConfig* base_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete base_algorithm_config_;
  }
  if (base_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(base_algorithm_config);
    if (message_arena != submessage_arena) {
      base_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_algorithm_config, submessage_arena);
    }

  } else {
  }
  base_algorithm_config_ = base_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:GAAlgorithmConfig.base_algorithm_config)
}

// -------------------------------------------------------------------

// AlgorithmConfig

// string algorithm_type = 1;
inline void AlgorithmConfig::clear_algorithm_type() {
  algorithm_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AlgorithmConfig::algorithm_type() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.algorithm_type)
  return _internal_algorithm_type();
}
inline void AlgorithmConfig::set_algorithm_type(const std::string& value) {
  _internal_set_algorithm_type(value);
  // @@protoc_insertion_point(field_set:AlgorithmConfig.algorithm_type)
}
inline std::string* AlgorithmConfig::mutable_algorithm_type() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.algorithm_type)
  return _internal_mutable_algorithm_type();
}
inline const std::string& AlgorithmConfig::_internal_algorithm_type() const {
  return algorithm_type_.Get();
}
inline void AlgorithmConfig::_internal_set_algorithm_type(const std::string& value) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlgorithmConfig::set_algorithm_type(std::string&& value) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AlgorithmConfig.algorithm_type)
}
inline void AlgorithmConfig::set_algorithm_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:AlgorithmConfig.algorithm_type)
}
inline void AlgorithmConfig::set_algorithm_type(const char* value, size_t size) {
  algorithm_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AlgorithmConfig.algorithm_type)
}
inline std::string* AlgorithmConfig::_internal_mutable_algorithm_type() {
  return algorithm_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlgorithmConfig::release_algorithm_type() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.algorithm_type)
  return algorithm_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlgorithmConfig::set_allocated_algorithm_type(std::string* algorithm_type) {
  if (algorithm_type != nullptr) {
  } else {
  }
  algorithm_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.algorithm_type)
}

// .EAAlgorithmConfig ea_algorithm_config = 3;
inline bool AlgorithmConfig::_internal_has_ea_algorithm_config() const {
  return this != internal_default_instance() && ea_algorithm_config_ != nullptr;
}
inline bool AlgorithmConfig::has_ea_algorithm_config() const {
  return _internal_has_ea_algorithm_config();
}
inline void AlgorithmConfig::clear_ea_algorithm_config() {
  if (GetArena() == nullptr && ea_algorithm_config_ != nullptr) {
    delete ea_algorithm_config_;
  }
  ea_algorithm_config_ = nullptr;
}
inline const ::EAAlgorithmConfig& AlgorithmConfig::_internal_ea_algorithm_config() const {
  const ::EAAlgorithmConfig* p = ea_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::EAAlgorithmConfig*>(
                            &::_EAAlgorithmConfig_default_instance_);
}
inline const ::EAAlgorithmConfig& AlgorithmConfig::ea_algorithm_config() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.ea_algorithm_config)
  return _internal_ea_algorithm_config();
}
inline void AlgorithmConfig::unsafe_arena_set_allocated_ea_algorithm_config(
    ::EAAlgorithmConfig* ea_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ea_algorithm_config_);
  }
  ea_algorithm_config_ = ea_algorithm_config;
  if (ea_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AlgorithmConfig.ea_algorithm_config)
}
inline ::EAAlgorithmConfig* AlgorithmConfig::release_ea_algorithm_config() {
  ::EAAlgorithmConfig* temp = ea_algorithm_config_;
  ea_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EAAlgorithmConfig* AlgorithmConfig::unsafe_arena_release_ea_algorithm_config() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.ea_algorithm_config)

  ::EAAlgorithmConfig* temp = ea_algorithm_config_;
  ea_algorithm_config_ = nullptr;
  return temp;
}
inline ::EAAlgorithmConfig* AlgorithmConfig::_internal_mutable_ea_algorithm_config() {
  if (ea_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::EAAlgorithmConfig>(GetArena());
    ea_algorithm_config_ = p;
  }
  return ea_algorithm_config_;
}
inline ::EAAlgorithmConfig* AlgorithmConfig::mutable_ea_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.ea_algorithm_config)
  return _internal_mutable_ea_algorithm_config();
}
inline void AlgorithmConfig::set_allocated_ea_algorithm_config(
    ::EAAlgorithmConfig* ea_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ea_algorithm_config_;
  }
  if (ea_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ea_algorithm_config);
    if (message_arena != submessage_arena) {
      ea_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ea_algorithm_config, submessage_arena);
    }

  } else {
  }
  ea_algorithm_config_ = ea_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.ea_algorithm_config)
}

// .GAAlgorithmConfig ga_algorithm_config = 4;
inline bool AlgorithmConfig::_internal_has_ga_algorithm_config() const {
  return this != internal_default_instance() && ga_algorithm_config_ != nullptr;
}
inline bool AlgorithmConfig::has_ga_algorithm_config() const {
  return _internal_has_ga_algorithm_config();
}
inline void AlgorithmConfig::clear_ga_algorithm_config() {
  if (GetArena() == nullptr && ga_algorithm_config_ != nullptr) {
    delete ga_algorithm_config_;
  }
  ga_algorithm_config_ = nullptr;
}
inline const ::GAAlgorithmConfig& AlgorithmConfig::_internal_ga_algorithm_config() const {
  const ::GAAlgorithmConfig* p = ga_algorithm_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::GAAlgorithmConfig*>(
                            &::_GAAlgorithmConfig_default_instance_);
}
inline const ::GAAlgorithmConfig& AlgorithmConfig::ga_algorithm_config() const {
  // @@protoc_insertion_point(field_get:AlgorithmConfig.ga_algorithm_config)
  return _internal_ga_algorithm_config();
}
inline void AlgorithmConfig::unsafe_arena_set_allocated_ga_algorithm_config(
    ::GAAlgorithmConfig* ga_algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ga_algorithm_config_);
  }
  ga_algorithm_config_ = ga_algorithm_config;
  if (ga_algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AlgorithmConfig.ga_algorithm_config)
}
inline ::GAAlgorithmConfig* AlgorithmConfig::release_ga_algorithm_config() {
  ::GAAlgorithmConfig* temp = ga_algorithm_config_;
  ga_algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::GAAlgorithmConfig* AlgorithmConfig::unsafe_arena_release_ga_algorithm_config() {
  // @@protoc_insertion_point(field_release:AlgorithmConfig.ga_algorithm_config)

  ::GAAlgorithmConfig* temp = ga_algorithm_config_;
  ga_algorithm_config_ = nullptr;
  return temp;
}
inline ::GAAlgorithmConfig* AlgorithmConfig::_internal_mutable_ga_algorithm_config() {
  if (ga_algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::GAAlgorithmConfig>(GetArena());
    ga_algorithm_config_ = p;
  }
  return ga_algorithm_config_;
}
inline ::GAAlgorithmConfig* AlgorithmConfig::mutable_ga_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:AlgorithmConfig.ga_algorithm_config)
  return _internal_mutable_ga_algorithm_config();
}
inline void AlgorithmConfig::set_allocated_ga_algorithm_config(
    ::GAAlgorithmConfig* ga_algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ga_algorithm_config_;
  }
  if (ga_algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ga_algorithm_config);
    if (message_arena != submessage_arena) {
      ga_algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ga_algorithm_config, submessage_arena);
    }

  } else {
  }
  ga_algorithm_config_ = ga_algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:AlgorithmConfig.ga_algorithm_config)
}

// -------------------------------------------------------------------

// NaiveSolveConfig

// .SolverConfig solver_config = 1;
inline bool NaiveSolveConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool NaiveSolveConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void NaiveSolveConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& NaiveSolveConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& NaiveSolveConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:NaiveSolveConfig.solver_config)
  return _internal_solver_config();
}
inline void NaiveSolveConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NaiveSolveConfig.solver_config)
}
inline ::SolverConfig* NaiveSolveConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* NaiveSolveConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:NaiveSolveConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* NaiveSolveConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* NaiveSolveConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:NaiveSolveConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void NaiveSolveConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:NaiveSolveConfig.solver_config)
}

// -------------------------------------------------------------------

// RBSSolveConfig

// .AlgorithmConfig algorithm_config = 1;
inline bool RBSSolveConfig::_internal_has_algorithm_config() const {
  return this != internal_default_instance() && algorithm_config_ != nullptr;
}
inline bool RBSSolveConfig::has_algorithm_config() const {
  return _internal_has_algorithm_config();
}
inline void RBSSolveConfig::clear_algorithm_config() {
  if (GetArena() == nullptr && algorithm_config_ != nullptr) {
    delete algorithm_config_;
  }
  algorithm_config_ = nullptr;
}
inline const ::AlgorithmConfig& RBSSolveConfig::_internal_algorithm_config() const {
  const ::AlgorithmConfig* p = algorithm_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::AlgorithmConfig*>(&::_AlgorithmConfig_default_instance_);
}
inline const ::AlgorithmConfig& RBSSolveConfig::algorithm_config() const {
  // @@protoc_insertion_point(field_get:RBSSolveConfig.algorithm_config)
  return _internal_algorithm_config();
}
inline void RBSSolveConfig::unsafe_arena_set_allocated_algorithm_config(
    ::AlgorithmConfig* algorithm_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm_config_);
  }
  algorithm_config_ = algorithm_config;
  if (algorithm_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RBSSolveConfig.algorithm_config)
}
inline ::AlgorithmConfig* RBSSolveConfig::release_algorithm_config() {
  ::AlgorithmConfig* temp = algorithm_config_;
  algorithm_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::AlgorithmConfig* RBSSolveConfig::unsafe_arena_release_algorithm_config() {
  // @@protoc_insertion_point(field_release:RBSSolveConfig.algorithm_config)

  ::AlgorithmConfig* temp = algorithm_config_;
  algorithm_config_ = nullptr;
  return temp;
}
inline ::AlgorithmConfig* RBSSolveConfig::_internal_mutable_algorithm_config() {
  if (algorithm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::AlgorithmConfig>(GetArena());
    algorithm_config_ = p;
  }
  return algorithm_config_;
}
inline ::AlgorithmConfig* RBSSolveConfig::mutable_algorithm_config() {
  // @@protoc_insertion_point(field_mutable:RBSSolveConfig.algorithm_config)
  return _internal_mutable_algorithm_config();
}
inline void RBSSolveConfig::set_allocated_algorithm_config(::AlgorithmConfig* algorithm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithm_config_;
  }
  if (algorithm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithm_config);
    if (message_arena != submessage_arena) {
      algorithm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm_config, submessage_arena);
    }

  } else {
  }
  algorithm_config_ = algorithm_config;
  // @@protoc_insertion_point(field_set_allocated:RBSSolveConfig.algorithm_config)
}

// .SolverConfig solver_config = 2;
inline bool RBSSolveConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool RBSSolveConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void RBSSolveConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& RBSSolveConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& RBSSolveConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:RBSSolveConfig.solver_config)
  return _internal_solver_config();
}
inline void RBSSolveConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RBSSolveConfig.solver_config)
}
inline ::SolverConfig* RBSSolveConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* RBSSolveConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:RBSSolveConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* RBSSolveConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* RBSSolveConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:RBSSolveConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void RBSSolveConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:RBSSolveConfig.solver_config)
}

// -------------------------------------------------------------------

// ParRBSSolveConfig

// repeated .AlgorithmConfig algorithm_configs = 1;
inline int ParRBSSolveConfig::_internal_algorithm_configs_size() const {
  return algorithm_configs_.size();
}
inline int ParRBSSolveConfig::algorithm_configs_size() const {
  return _internal_algorithm_configs_size();
}
inline void ParRBSSolveConfig::clear_algorithm_configs() {
  algorithm_configs_.Clear();
}
inline ::AlgorithmConfig* ParRBSSolveConfig::mutable_algorithm_configs(int index) {
  // @@protoc_insertion_point(field_mutable:ParRBSSolveConfig.algorithm_configs)
  return algorithm_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::AlgorithmConfig>*
ParRBSSolveConfig::mutable_algorithm_configs() {
  // @@protoc_insertion_point(field_mutable_list:ParRBSSolveConfig.algorithm_configs)
  return &algorithm_configs_;
}
inline const ::AlgorithmConfig& ParRBSSolveConfig::_internal_algorithm_configs(int index) const {
  return algorithm_configs_.Get(index);
}
inline const ::AlgorithmConfig& ParRBSSolveConfig::algorithm_configs(int index) const {
  // @@protoc_insertion_point(field_get:ParRBSSolveConfig.algorithm_configs)
  return _internal_algorithm_configs(index);
}
inline ::AlgorithmConfig* ParRBSSolveConfig::_internal_add_algorithm_configs() {
  return algorithm_configs_.Add();
}
inline ::AlgorithmConfig* ParRBSSolveConfig::add_algorithm_configs() {
  // @@protoc_insertion_point(field_add:ParRBSSolveConfig.algorithm_configs)
  return _internal_add_algorithm_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::AlgorithmConfig>&
ParRBSSolveConfig::algorithm_configs() const {
  // @@protoc_insertion_point(field_list:ParRBSSolveConfig.algorithm_configs)
  return algorithm_configs_;
}

// .SolverConfig solver_config = 2;
inline bool ParRBSSolveConfig::_internal_has_solver_config() const {
  return this != internal_default_instance() && solver_config_ != nullptr;
}
inline bool ParRBSSolveConfig::has_solver_config() const {
  return _internal_has_solver_config();
}
inline void ParRBSSolveConfig::clear_solver_config() {
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
}
inline const ::SolverConfig& ParRBSSolveConfig::_internal_solver_config() const {
  const ::SolverConfig* p = solver_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::SolverConfig*>(&::_SolverConfig_default_instance_);
}
inline const ::SolverConfig& ParRBSSolveConfig::solver_config() const {
  // @@protoc_insertion_point(field_get:ParRBSSolveConfig.solver_config)
  return _internal_solver_config();
}
inline void ParRBSSolveConfig::unsafe_arena_set_allocated_solver_config(
    ::SolverConfig* solver_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(solver_config_);
  }
  solver_config_ = solver_config;
  if (solver_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ParRBSSolveConfig.solver_config)
}
inline ::SolverConfig* ParRBSSolveConfig::release_solver_config() {
  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolverConfig* ParRBSSolveConfig::unsafe_arena_release_solver_config() {
  // @@protoc_insertion_point(field_release:ParRBSSolveConfig.solver_config)

  ::SolverConfig* temp = solver_config_;
  solver_config_ = nullptr;
  return temp;
}
inline ::SolverConfig* ParRBSSolveConfig::_internal_mutable_solver_config() {
  if (solver_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolverConfig>(GetArena());
    solver_config_ = p;
  }
  return solver_config_;
}
inline ::SolverConfig* ParRBSSolveConfig::mutable_solver_config() {
  // @@protoc_insertion_point(field_mutable:ParRBSSolveConfig.solver_config)
  return _internal_mutable_solver_config();
}
inline void ParRBSSolveConfig::set_allocated_solver_config(::SolverConfig* solver_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete solver_config_;
  }
  if (solver_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(solver_config);
    if (message_arena != submessage_arena) {
      solver_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solver_config, submessage_arena);
    }

  } else {
  }
  solver_config_ = solver_config;
  // @@protoc_insertion_point(field_set_allocated:ParRBSSolveConfig.solver_config)
}

// uint32 num_algorithms = 4;
inline void ParRBSSolveConfig::clear_num_algorithms() {
  num_algorithms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::_internal_num_algorithms() const {
  return num_algorithms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::num_algorithms() const {
  // @@protoc_insertion_point(field_get:ParRBSSolveConfig.num_algorithms)
  return _internal_num_algorithms();
}
inline void ParRBSSolveConfig::_internal_set_num_algorithms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  num_algorithms_ = value;
}
inline void ParRBSSolveConfig::set_num_algorithms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_algorithms(value);
  // @@protoc_insertion_point(field_set:ParRBSSolveConfig.num_algorithms)
}

// uint32 max_unpropagated = 5;
inline void ParRBSSolveConfig::clear_max_unpropagated() {
  max_unpropagated_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::_internal_max_unpropagated() const {
  return max_unpropagated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::max_unpropagated() const {
  // @@protoc_insertion_point(field_get:ParRBSSolveConfig.max_unpropagated)
  return _internal_max_unpropagated();
}
inline void ParRBSSolveConfig::_internal_set_max_unpropagated(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_unpropagated_ = value;
}
inline void ParRBSSolveConfig::set_max_unpropagated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_unpropagated(value);
  // @@protoc_insertion_point(field_set:ParRBSSolveConfig.max_unpropagated)
}

// uint32 max_cartesian_size = 6;
inline void ParRBSSolveConfig::clear_max_cartesian_size() {
  max_cartesian_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::_internal_max_cartesian_size() const {
  return max_cartesian_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ParRBSSolveConfig::max_cartesian_size() const {
  // @@protoc_insertion_point(field_get:ParRBSSolveConfig.max_cartesian_size)
  return _internal_max_cartesian_size();
}
inline void ParRBSSolveConfig::_internal_set_max_cartesian_size(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  max_cartesian_size_ = value;
}
inline void ParRBSSolveConfig::set_max_cartesian_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cartesian_size(value);
  // @@protoc_insertion_point(field_set:ParRBSSolveConfig.max_cartesian_size)
}

// -------------------------------------------------------------------

// SolveConfig

// string solve_type = 1;
inline void SolveConfig::clear_solve_type() {
  solve_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SolveConfig::solve_type() const {
  // @@protoc_insertion_point(field_get:SolveConfig.solve_type)
  return _internal_solve_type();
}
inline void SolveConfig::set_solve_type(const std::string& value) {
  _internal_set_solve_type(value);
  // @@protoc_insertion_point(field_set:SolveConfig.solve_type)
}
inline std::string* SolveConfig::mutable_solve_type() {
  // @@protoc_insertion_point(field_mutable:SolveConfig.solve_type)
  return _internal_mutable_solve_type();
}
inline const std::string& SolveConfig::_internal_solve_type() const {
  return solve_type_.Get();
}
inline void SolveConfig::_internal_set_solve_type(const std::string& value) {
  solve_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SolveConfig::set_solve_type(std::string&& value) {
  solve_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value),
      GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolveConfig.solve_type)
}
inline void SolveConfig::set_solve_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  solve_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
      GetArena());
  // @@protoc_insertion_point(field_set_char:SolveConfig.solve_type)
}
inline void SolveConfig::set_solve_type(const char* value, size_t size) {
  solve_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolveConfig.solve_type)
}
inline std::string* SolveConfig::_internal_mutable_solve_type() {
  return solve_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SolveConfig::release_solve_type() {
  // @@protoc_insertion_point(field_release:SolveConfig.solve_type)
  return solve_type_.Release(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SolveConfig::set_allocated_solve_type(std::string* solve_type) {
  if (solve_type != nullptr) {
  } else {
  }
  solve_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solve_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolveConfig.solve_type)
}

// uint32 random_seed = 2;
inline void SolveConfig::clear_random_seed() {
  random_seed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SolveConfig::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SolveConfig::random_seed() const {
  // @@protoc_insertion_point(field_get:SolveConfig.random_seed)
  return _internal_random_seed();
}
inline void SolveConfig::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  random_seed_ = value;
}
inline void SolveConfig::set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:SolveConfig.random_seed)
}

// .NaiveSolveConfig naive_solve_config = 3;
inline bool SolveConfig::_internal_has_naive_solve_config() const {
  return this != internal_default_instance() && naive_solve_config_ != nullptr;
}
inline bool SolveConfig::has_naive_solve_config() const {
  return _internal_has_naive_solve_config();
}
inline void SolveConfig::clear_naive_solve_config() {
  if (GetArena() == nullptr && naive_solve_config_ != nullptr) {
    delete naive_solve_config_;
  }
  naive_solve_config_ = nullptr;
}
inline const ::NaiveSolveConfig& SolveConfig::_internal_naive_solve_config() const {
  const ::NaiveSolveConfig* p = naive_solve_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::NaiveSolveConfig*>(&::_NaiveSolveConfig_default_instance_);
}
inline const ::NaiveSolveConfig& SolveConfig::naive_solve_config() const {
  // @@protoc_insertion_point(field_get:SolveConfig.naive_solve_config)
  return _internal_naive_solve_config();
}
inline void SolveConfig::unsafe_arena_set_allocated_naive_solve_config(
    ::NaiveSolveConfig* naive_solve_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(naive_solve_config_);
  }
  naive_solve_config_ = naive_solve_config;
  if (naive_solve_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolveConfig.naive_solve_config)
}
inline ::NaiveSolveConfig* SolveConfig::release_naive_solve_config() {
  ::NaiveSolveConfig* temp = naive_solve_config_;
  naive_solve_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NaiveSolveConfig* SolveConfig::unsafe_arena_release_naive_solve_config() {
  // @@protoc_insertion_point(field_release:SolveConfig.naive_solve_config)

  ::NaiveSolveConfig* temp = naive_solve_config_;
  naive_solve_config_ = nullptr;
  return temp;
}
inline ::NaiveSolveConfig* SolveConfig::_internal_mutable_naive_solve_config() {
  if (naive_solve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::NaiveSolveConfig>(GetArena());
    naive_solve_config_ = p;
  }
  return naive_solve_config_;
}
inline ::NaiveSolveConfig* SolveConfig::mutable_naive_solve_config() {
  // @@protoc_insertion_point(field_mutable:SolveConfig.naive_solve_config)
  return _internal_mutable_naive_solve_config();
}
inline void SolveConfig::set_allocated_naive_solve_config(::NaiveSolveConfig* naive_solve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete naive_solve_config_;
  }
  if (naive_solve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(naive_solve_config);
    if (message_arena != submessage_arena) {
      naive_solve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, naive_solve_config, submessage_arena);
    }

  } else {
  }
  naive_solve_config_ = naive_solve_config;
  // @@protoc_insertion_point(field_set_allocated:SolveConfig.naive_solve_config)
}

// .RBSSolveConfig rbs_solve_config = 4;
inline bool SolveConfig::_internal_has_rbs_solve_config() const {
  return this != internal_default_instance() && rbs_solve_config_ != nullptr;
}
inline bool SolveConfig::has_rbs_solve_config() const {
  return _internal_has_rbs_solve_config();
}
inline void SolveConfig::clear_rbs_solve_config() {
  if (GetArena() == nullptr && rbs_solve_config_ != nullptr) {
    delete rbs_solve_config_;
  }
  rbs_solve_config_ = nullptr;
}
inline const ::RBSSolveConfig& SolveConfig::_internal_rbs_solve_config() const {
  const ::RBSSolveConfig* p = rbs_solve_config_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::RBSSolveConfig*>(&::_RBSSolveConfig_default_instance_);
}
inline const ::RBSSolveConfig& SolveConfig::rbs_solve_config() const {
  // @@protoc_insertion_point(field_get:SolveConfig.rbs_solve_config)
  return _internal_rbs_solve_config();
}
inline void SolveConfig::unsafe_arena_set_allocated_rbs_solve_config(
    ::RBSSolveConfig* rbs_solve_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rbs_solve_config_);
  }
  rbs_solve_config_ = rbs_solve_config;
  if (rbs_solve_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolveConfig.rbs_solve_config)
}
inline ::RBSSolveConfig* SolveConfig::release_rbs_solve_config() {
  ::RBSSolveConfig* temp = rbs_solve_config_;
  rbs_solve_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RBSSolveConfig* SolveConfig::unsafe_arena_release_rbs_solve_config() {
  // @@protoc_insertion_point(field_release:SolveConfig.rbs_solve_config)

  ::RBSSolveConfig* temp = rbs_solve_config_;
  rbs_solve_config_ = nullptr;
  return temp;
}
inline ::RBSSolveConfig* SolveConfig::_internal_mutable_rbs_solve_config() {
  if (rbs_solve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::RBSSolveConfig>(GetArena());
    rbs_solve_config_ = p;
  }
  return rbs_solve_config_;
}
inline ::RBSSolveConfig* SolveConfig::mutable_rbs_solve_config() {
  // @@protoc_insertion_point(field_mutable:SolveConfig.rbs_solve_config)
  return _internal_mutable_rbs_solve_config();
}
inline void SolveConfig::set_allocated_rbs_solve_config(::RBSSolveConfig* rbs_solve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rbs_solve_config_;
  }
  if (rbs_solve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rbs_solve_config);
    if (message_arena != submessage_arena) {
      rbs_solve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rbs_solve_config, submessage_arena);
    }

  } else {
  }
  rbs_solve_config_ = rbs_solve_config;
  // @@protoc_insertion_point(field_set_allocated:SolveConfig.rbs_solve_config)
}

// .ParRBSSolveConfig par_rbs_solve_config = 5;
inline bool SolveConfig::_internal_has_par_rbs_solve_config() const {
  return this != internal_default_instance() && par_rbs_solve_config_ != nullptr;
}
inline bool SolveConfig::has_par_rbs_solve_config() const {
  return _internal_has_par_rbs_solve_config();
}
inline void SolveConfig::clear_par_rbs_solve_config() {
  if (GetArena() == nullptr && par_rbs_solve_config_ != nullptr) {
    delete par_rbs_solve_config_;
  }
  par_rbs_solve_config_ = nullptr;
}
inline const ::ParRBSSolveConfig& SolveConfig::_internal_par_rbs_solve_config() const {
  const ::ParRBSSolveConfig* p = par_rbs_solve_config_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::ParRBSSolveConfig*>(
                            &::_ParRBSSolveConfig_default_instance_);
}
inline const ::ParRBSSolveConfig& SolveConfig::par_rbs_solve_config() const {
  // @@protoc_insertion_point(field_get:SolveConfig.par_rbs_solve_config)
  return _internal_par_rbs_solve_config();
}
inline void SolveConfig::unsafe_arena_set_allocated_par_rbs_solve_config(
    ::ParRBSSolveConfig* par_rbs_solve_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(par_rbs_solve_config_);
  }
  par_rbs_solve_config_ = par_rbs_solve_config;
  if (par_rbs_solve_config) {
  } else {
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolveConfig.par_rbs_solve_config)
}
inline ::ParRBSSolveConfig* SolveConfig::release_par_rbs_solve_config() {
  ::ParRBSSolveConfig* temp = par_rbs_solve_config_;
  par_rbs_solve_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ParRBSSolveConfig* SolveConfig::unsafe_arena_release_par_rbs_solve_config() {
  // @@protoc_insertion_point(field_release:SolveConfig.par_rbs_solve_config)

  ::ParRBSSolveConfig* temp = par_rbs_solve_config_;
  par_rbs_solve_config_ = nullptr;
  return temp;
}
inline ::ParRBSSolveConfig* SolveConfig::_internal_mutable_par_rbs_solve_config() {
  if (par_rbs_solve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ParRBSSolveConfig>(GetArena());
    par_rbs_solve_config_ = p;
  }
  return par_rbs_solve_config_;
}
inline ::ParRBSSolveConfig* SolveConfig::mutable_par_rbs_solve_config() {
  // @@protoc_insertion_point(field_mutable:SolveConfig.par_rbs_solve_config)
  return _internal_mutable_par_rbs_solve_config();
}
inline void SolveConfig::set_allocated_par_rbs_solve_config(
    ::ParRBSSolveConfig* par_rbs_solve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete par_rbs_solve_config_;
  }
  if (par_rbs_solve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(par_rbs_solve_config);
    if (message_arena != submessage_arena) {
      par_rbs_solve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, par_rbs_solve_config, submessage_arena);
    }

  } else {
  }
  par_rbs_solve_config_ = par_rbs_solve_config;
  // @@protoc_insertion_point(field_set_allocated:SolveConfig.par_rbs_solve_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fproto_2fsolve_5fconfig_2eproto
