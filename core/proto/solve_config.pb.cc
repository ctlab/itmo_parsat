// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/proto/solve_config.proto

#include "core/proto/solve_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<2>
        scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<3>
        scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<3>
        scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<3>
        scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<4>
        scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<1>
        scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<2>
        scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<1>
        scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<2>
        scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<1>
        scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<2>
        scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<2>
        scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fproto_2fsolve_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::
    internal::SCCInfo<0>
        scc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto;
class MinisatCliConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinisatCliConfig> _instance;
} _MinisatCliConfig_default_instance_;
class BaseSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseSolverConfig> _instance;
} _BaseSolverConfig_default_instance_;
class SimpSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpSolverConfig> _instance;
} _SimpSolverConfig_default_instance_;
class ParSolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParSolverConfig> _instance;
} _ParSolverConfig_default_instance_;
class SolverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolverConfig> _instance;
} _SolverConfig_default_instance_;
class ResourceLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceLimitConfig> _instance;
} _ResourceLimitConfig_default_instance_;
class FitnessLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FitnessLimitConfig> _instance;
} _FitnessLimitConfig_default_instance_;
class PointsLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointsLimitConfig> _instance;
} _PointsLimitConfig_default_instance_;
class ConjLimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConjLimitConfig> _instance;
} _ConjLimitConfig_default_instance_;
class LimitConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LimitConfig> _instance;
} _LimitConfig_default_instance_;
class UniformMutationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniformMutationConfig> _instance;
} _UniformMutationConfig_default_instance_;
class DoerrMutationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoerrMutationConfig> _instance;
} _DoerrMutationConfig_default_instance_;
class MutationConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationConfig> _instance;
} _MutationConfig_default_instance_;
class CrossoverConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CrossoverConfig> _instance;
} _CrossoverConfig_default_instance_;
class SelectorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectorConfig> _instance;
} _SelectorConfig_default_instance_;
class InstanceConfig_SamplingSizeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstanceConfig_SamplingSizeConfig>
      _instance;
} _InstanceConfig_SamplingSizeConfig_default_instance_;
class InstanceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstanceConfig> _instance;
} _InstanceConfig_default_instance_;
class BaseAlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseAlgorithmConfig> _instance;
} _BaseAlgorithmConfig_default_instance_;
class EAAlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EAAlgorithmConfig> _instance;
} _EAAlgorithmConfig_default_instance_;
class GAAlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GAAlgorithmConfig> _instance;
} _GAAlgorithmConfig_default_instance_;
class AlgorithmConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlgorithmConfig> _instance;
} _AlgorithmConfig_default_instance_;
class NaiveSolveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NaiveSolveConfig> _instance;
} _NaiveSolveConfig_default_instance_;
class RBSSolveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RBSSolveConfig> _instance;
} _RBSSolveConfig_default_instance_;
class ParRBSSolveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParRBSSolveConfig> _instance;
} _ParRBSSolveConfig_default_instance_;
class SolveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SolveConfig> _instance;
} _SolveConfig_default_instance_;
static void InitDefaultsscc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AlgorithmConfig_default_instance_;
    new (ptr)::AlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BaseAlgorithmConfig_default_instance_;
    new (ptr)::BaseAlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BaseAlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3>
    scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0,
         InitDefaultsscc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BaseSolverConfig_default_instance_;
    new (ptr)::BaseSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BaseSolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConjLimitConfig_default_instance_;
    new (ptr)::ConjLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_LimitConfig_default_instance_;
    new (ptr)::LimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConjLimitConfig::InitAsDefaultInstance();
  ::LimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3>
    scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0,
         InitDefaultsscc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CrossoverConfig_default_instance_;
    new (ptr)::CrossoverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CrossoverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DoerrMutationConfig_default_instance_;
    new (ptr)::DoerrMutationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DoerrMutationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EAAlgorithmConfig_default_instance_;
    new (ptr)::EAAlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EAAlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3>
    scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0,
         InitDefaultsscc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FitnessLimitConfig_default_instance_;
    new (ptr)::FitnessLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FitnessLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GAAlgorithmConfig_default_instance_;
    new (ptr)::GAAlgorithmConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GAAlgorithmConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4>
    scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0,
         InitDefaultsscc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InstanceConfig_default_instance_;
    new (ptr)::InstanceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InstanceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void
InitDefaultsscc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InstanceConfig_SamplingSizeConfig_default_instance_;
    new (ptr)::InstanceConfig_SamplingSizeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InstanceConfig_SamplingSizeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MinisatCliConfig_default_instance_;
    new (ptr)::MinisatCliConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MinisatCliConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MutationConfig_default_instance_;
    new (ptr)::MutationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MutationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NaiveSolveConfig_default_instance_;
    new (ptr)::NaiveSolveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NaiveSolveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ParRBSSolveConfig_default_instance_;
    new (ptr)::ParRBSSolveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ParRBSSolveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ParSolverConfig_default_instance_;
    new (ptr)::ParSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_SolverConfig_default_instance_;
    new (ptr)::SolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ParSolverConfig::InitAsDefaultInstance();
  ::SolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0,
         InitDefaultsscc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PointsLimitConfig_default_instance_;
    new (ptr)::PointsLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PointsLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RBSSolveConfig_default_instance_;
    new (ptr)::RBSSolveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RBSSolveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResourceLimitConfig_default_instance_;
    new (ptr)::ResourceLimitConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResourceLimitConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SelectorConfig_default_instance_;
    new (ptr)::SelectorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SelectorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static void InitDefaultsscc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimpSolverConfig_default_instance_;
    new (ptr)::SimpSolverConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimpSolverConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0,
         InitDefaultsscc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SolveConfig_default_instance_;
    new (ptr)::SolveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SolveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3>
    scc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0,
         InitDefaultsscc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {
            &scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
            &scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        }};

static void InitDefaultsscc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UniformMutationConfig_default_instance_;
    new (ptr)::UniformMutationConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UniformMutationConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto = {
        {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0,
         InitDefaultsscc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_core_2fproto_2fsolve_5fconfig_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_core_2fproto_2fsolve_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_core_2fproto_2fsolve_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_core_2fproto_2fsolve_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, verbosity_level_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, preprocessing_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, cpu_limit_),
        PROTOBUF_FIELD_OFFSET(::MinisatCliConfig, mem_limit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, var_decay_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, cla_decay_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, rnd_freq_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, ccmin_mode_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, phase_saving_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, rnd_init_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, luby_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, rfirst_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, rinc_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, gc_frac_),
        PROTOBUF_FIELD_OFFSET(::BaseSolverConfig, min_learnts_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_asymm_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_rcheck_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, use_elim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, grow_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, clause_lim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, subsumption_lim_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, simp_garbage_frac_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, minisat_cli_config_),
        PROTOBUF_FIELD_OFFSET(::SimpSolverConfig, base_solver_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, max_threads_),
        PROTOBUF_FIELD_OFFSET(::ParSolverConfig, solver_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SolverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SolverConfig, solver_type_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, simp_solver_config_),
        PROTOBUF_FIELD_OFFSET(::SolverConfig, par_solver_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, memory_limit_kb_),
        PROTOBUF_FIELD_OFFSET(::ResourceLimitConfig, time_limit_sec_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::FitnessLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::FitnessLimitConfig, lowest_fitness_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PointsLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::PointsLimitConfig, max_points_visited_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ConjLimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ConjLimitConfig, limit_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::LimitConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::LimitConfig, limit_type_),
        PROTOBUF_FIELD_OFFSET(::LimitConfig, resource_limit_config_),
        PROTOBUF_FIELD_OFFSET(::LimitConfig, fitness_limit_config_),
        PROTOBUF_FIELD_OFFSET(::LimitConfig, conj_limit_config_),
        PROTOBUF_FIELD_OFFSET(::LimitConfig, points_limit_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::UniformMutationConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::UniformMutationConfig, scale_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::DoerrMutationConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::DoerrMutationConfig, beta_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::MutationConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::MutationConfig, mutation_type_),
        PROTOBUF_FIELD_OFFSET(::MutationConfig, uniform_mutation_config_),
        PROTOBUF_FIELD_OFFSET(::MutationConfig, doerr_mutation_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CrossoverConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::CrossoverConfig, crossover_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SelectorConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SelectorConfig, selector_type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::InstanceConfig_SamplingSizeConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::InstanceConfig_SamplingSizeConfig, base_count_),
        PROTOBUF_FIELD_OFFSET(::InstanceConfig_SamplingSizeConfig, max_steps_),
        PROTOBUF_FIELD_OFFSET(::InstanceConfig_SamplingSizeConfig, scale_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::InstanceConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::InstanceConfig, omega_x_),
        PROTOBUF_FIELD_OFFSET(::InstanceConfig, heuristic_size_),
        PROTOBUF_FIELD_OFFSET(::InstanceConfig, max_cache_size_),
        PROTOBUF_FIELD_OFFSET(::InstanceConfig, sampling_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::BaseAlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::BaseAlgorithmConfig, solver_config_),
        PROTOBUF_FIELD_OFFSET(::BaseAlgorithmConfig, limit_config_),
        PROTOBUF_FIELD_OFFSET(::BaseAlgorithmConfig, instance_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, mutation_config_),
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, selector_config_),
        PROTOBUF_FIELD_OFFSET(::EAAlgorithmConfig, base_algorithm_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, q_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, h_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, mutation_config_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, crossover_config_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, selector_config_),
        PROTOBUF_FIELD_OFFSET(::GAAlgorithmConfig, base_algorithm_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, algorithm_type_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, ea_algorithm_config_),
        PROTOBUF_FIELD_OFFSET(::AlgorithmConfig, ga_algorithm_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::NaiveSolveConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::NaiveSolveConfig, solver_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::RBSSolveConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::RBSSolveConfig, algorithm_config_),
        PROTOBUF_FIELD_OFFSET(::RBSSolveConfig, solver_config_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ParRBSSolveConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::ParRBSSolveConfig, algorithm_configs_),
        PROTOBUF_FIELD_OFFSET(::ParRBSSolveConfig, solver_config_),
        PROTOBUF_FIELD_OFFSET(::ParRBSSolveConfig, num_algorithms_),
        PROTOBUF_FIELD_OFFSET(::ParRBSSolveConfig, max_unpropagated_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SolveConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::SolveConfig, solve_type_),
        PROTOBUF_FIELD_OFFSET(::SolveConfig, random_seed_),
        PROTOBUF_FIELD_OFFSET(::SolveConfig, naive_solve_config_),
        PROTOBUF_FIELD_OFFSET(::SolveConfig, rbs_solve_config_),
        PROTOBUF_FIELD_OFFSET(::SolveConfig, par_rbs_solve_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, sizeof(::MinisatCliConfig)},
    {9, -1, sizeof(::BaseSolverConfig)},
    {25, -1, sizeof(::SimpSolverConfig)},
    {39, -1, sizeof(::ParSolverConfig)},
    {46, -1, sizeof(::SolverConfig)},
    {54, -1, sizeof(::ResourceLimitConfig)},
    {61, -1, sizeof(::FitnessLimitConfig)},
    {67, -1, sizeof(::PointsLimitConfig)},
    {73, -1, sizeof(::ConjLimitConfig)},
    {79, -1, sizeof(::LimitConfig)},
    {89, -1, sizeof(::UniformMutationConfig)},
    {95, -1, sizeof(::DoerrMutationConfig)},
    {101, -1, sizeof(::MutationConfig)},
    {109, -1, sizeof(::CrossoverConfig)},
    {115, -1, sizeof(::SelectorConfig)},
    {121, -1, sizeof(::InstanceConfig_SamplingSizeConfig)},
    {129, -1, sizeof(::InstanceConfig)},
    {138, -1, sizeof(::BaseAlgorithmConfig)},
    {146, -1, sizeof(::EAAlgorithmConfig)},
    {154, -1, sizeof(::GAAlgorithmConfig)},
    {165, -1, sizeof(::AlgorithmConfig)},
    {173, -1, sizeof(::NaiveSolveConfig)},
    {179, -1, sizeof(::RBSSolveConfig)},
    {186, -1, sizeof(::ParRBSSolveConfig)},
    {195, -1, sizeof(::SolveConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_MinisatCliConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_BaseSolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_SimpSolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ParSolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SolverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ResourceLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_FitnessLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_PointsLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ConjLimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LimitConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_UniformMutationConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_DoerrMutationConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MutationConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_CrossoverConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SelectorConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_InstanceConfig_SamplingSizeConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstanceConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_BaseAlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_EAAlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_GAAlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_AlgorithmConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_NaiveSolveConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RBSSolveConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
        &::_ParRBSSolveConfig_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SolveConfig_default_instance_),
};

const char
    descriptor_table_protodef_core_2fproto_2fsolve_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) =
        "\n\035core/proto/solve_config.proto\"h\n\020Minis"
        "atCliConfig\022\027\n\017verbosity_level\030\001 \001(\005\022\025\n\r"
        "preprocessing\030\002 \001(\010\022\021\n\tcpu_limit\030\004 \001(\005\022\021"
        "\n\tmem_limit\030\005 \001(\005\"\330\001\n\020BaseSolverConfig\022\021"
        "\n\tvar_decay\030\001 \001(\001\022\021\n\tcla_decay\030\002 \001(\001\022\020\n\010"
        "rnd_freq\030\003 \001(\001\022\022\n\nccmin_mode\030\005 \001(\005\022\024\n\014ph"
        "ase_saving\030\006 \001(\005\022\020\n\010rnd_init\030\007 \001(\010\022\014\n\004lu"
        "by\030\010 \001(\010\022\016\n\006rfirst\030\t \001(\005\022\014\n\004rinc\030\n "
        "\001(\001\022\017"
        "\n\007gc_frac\030\013 \001(\001\022\023\n\013min_learnts\030\014 \001(\005\"\377\001\n"
        "\020SimpSolverConfig\022\021\n\tuse_asymm\030\001 \001(\010\022\022\n\n"
        "use_rcheck\030\002 \001(\010\022\020\n\010use_elim\030\003 \001(\010\022\014\n\004gr"
        "ow\030\004 \001(\005\022\022\n\nclause_lim\030\005 \001(\005\022\027\n\017subsumpt"
        "ion_lim\030\006 \001(\005\022\031\n\021simp_garbage_frac\030\007 \001(\001"
        "\022-\n\022minisat_cli_config\030\010 \001(\0132\021.MinisatCl"
        "iConfig\022-\n\022base_solver_config\030\t \001(\0132\021.Ba"
        "seSolverConfig\"L\n\017ParSolverConfig\022\023\n\013max"
        "_threads\030\001 \001(\r\022$\n\rsolver_config\030\003 \001(\0132\r."
        "SolverConfig\"\177\n\014SolverConfig\022\023\n\013solver_t"
        "ype\030\001 \001(\t\022-\n\022simp_solver_config\030\004 \001(\0132\021."
        "SimpSolverConfig\022+\n\021par_solver_config\030\005 "
        "\001(\0132\020.ParSolverConfig\"F\n\023ResourceLimitCo"
        "nfig\022\027\n\017memory_limit_kb\030\001 \001(\r\022\026\n\016time_li"
        "mit_sec\030\002 \001(\r\",\n\022FitnessLimitConfig\022\026\n\016l"
        "owest_fitness\030\001 \001(\001\"/\n\021PointsLimitConfig"
        "\022\032\n\022max_points_visited\030\001 \001(\r\"5\n\017ConjLimi"
        "tConfig\022\"\n\014limit_config\030\001 \003(\0132\014.LimitCon"
        "fig\"\347\001\n\013LimitConfig\022\022\n\nlimit_type\030\001 \001(\t\022"
        "3\n\025resource_limit_config\030\002 \001(\0132\024.Resourc"
        "eLimitConfig\0221\n\024fitness_limit_config\030\003 \001"
        "(\0132\023.FitnessLimitConfig\022+\n\021conj_limit_co"
        "nfig\030\004 \001(\0132\020.ConjLimitConfig\022/\n\023points_l"
        "imit_config\030\005 \001(\0132\022.PointsLimitConfig\"&\n"
        "\025UniformMutationConfig\022\r\n\005scale\030\001 \001(\001\"#\n"
        "\023DoerrMutationConfig\022\014\n\004beta\030\001 \001(\001\"\225\001\n\016M"
        "utationConfig\022\025\n\rmutation_type\030\001 \001(\t\0227\n\027"
        "uniform_mutation_config\030\002 \001(\0132\026.UniformM"
        "utationConfig\0223\n\025doerr_mutation_config\030\003"
        " \001(\0132\024.DoerrMutationConfig\")\n\017CrossoverC"
        "onfig\022\026\n\016crossover_type\030\001 \001(\t\"\'\n\016Selecto"
        "rConfig\022\025\n\rselector_type\030\001 \001(\t\"\332\001\n\016Insta"
        "nceConfig\022\017\n\007omega_x\030\001 \001(\r\022\026\n\016heuristic_"
        "size\030\002 \001(\r\022\026\n\016max_cache_size\030\003 \001(\r\022;\n\017sa"
        "mpling_config\030\004 \001(\0132\".InstanceConfig.Sam"
        "plingSizeConfig\032J\n\022SamplingSizeConfig\022\022\n"
        "\nbase_count\030\001 \001(\004\022\021\n\tmax_steps\030\002 \001(\r\022\r\n\005"
        "scale\030\003 \001(\001\"\211\001\n\023BaseAlgorithmConfig\022$\n\rs"
        "olver_config\030\001 \001(\0132\r.SolverConfig\022\"\n\014lim"
        "it_config\030\002 \001(\0132\014.LimitConfig\022(\n\017instanc"
        "e_config\030\003 \001(\0132\017.InstanceConfig\"\234\001\n\021EAAl"
        "gorithmConfig\022(\n\017mutation_config\030\001 \001(\0132\017"
        ".MutationConfig\022(\n\017selector_config\030\002 \001(\013"
        "2\017.SelectorConfig\0223\n\025base_algorithm_conf"
        "ig\030\003 \001(\0132\024.BaseAlgorithmConfig\"\336\001\n\021GAAlg"
        "orithmConfig\022\t\n\001q\030\004 \001(\r\022\t\n\001h\030\005 \001(\r\022(\n\017mu"
        "tation_config\030\001 \001(\0132\017.MutationConfig\022*\n\020"
        "crossover_config\030\002 \001(\0132\020.CrossoverConfig"
        "\022(\n\017selector_config\030\003 \001(\0132\017.SelectorConf"
        "ig\0223\n\025base_algorithm_config\030\006 \001(\0132\024.Base"
        "AlgorithmConfig\"\213\001\n\017AlgorithmConfig\022\026\n\016a"
        "lgorithm_type\030\001 \001(\t\022/\n\023ea_algorithm_conf"
        "ig\030\003 \001(\0132\022.EAAlgorithmConfig\022/\n\023ga_algor"
        "ithm_config\030\004 \001(\0132\022.GAAlgorithmConfig\"8\n"
        "\020NaiveSolveConfig\022$\n\rsolver_config\030\001 \001(\013"
        "2\r.SolverConfig\"b\n\016RBSSolveConfig\022*\n\020alg"
        "orithm_config\030\001 \001(\0132\020.AlgorithmConfig\022$\n"
        "\rsolver_config\030\002 \001(\0132\r.SolverConfig\"\230\001\n\021"
        "ParRBSSolveConfig\022+\n\021algorithm_configs\030\001"
        " \003(\0132\020.AlgorithmConfig\022$\n\rsolver_config\030"
        "\002 \001(\0132\r.SolverConfig\022\026\n\016num_algorithms\030\004"
        " \001(\r\022\030\n\020max_unpropagated\030\005 \001(\r\"\302\001\n\013Solve"
        "Config\022\022\n\nsolve_type\030\001 \001(\t\022\023\n\013random_see"
        "d\030\002 \001(\r\022-\n\022naive_solve_config\030\003 \001(\0132\021.Na"
        "iveSolveConfig\022)\n\020rbs_solve_config\030\004 \001(\013"
        "2\017.RBSSolveConfig\0220\n\024par_rbs_solve_confi"
        "g\030\005 \001(\0132\022.ParRBSSolveConfigb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_sccs[23] = {
        &scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
        &scc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto = {
        false,
        false,
        descriptor_table_protodef_core_2fproto_2fsolve_5fconfig_2eproto,
        "core/proto/solve_config.proto",
        2995,
        &descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_once,
        descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_sccs,
        descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto_deps,
        23,
        0,
        schemas,
        file_default_instances,
        TableStruct_core_2fproto_2fsolve_5fconfig_2eproto::offsets,
        file_level_metadata_core_2fproto_2fsolve_5fconfig_2eproto,
        25,
        file_level_enum_descriptors_core_2fproto_2fsolve_5fconfig_2eproto,
        file_level_service_descriptors_core_2fproto_2fsolve_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fproto_2fsolve_5fconfig_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_core_2fproto_2fsolve_5fconfig_2eproto)),
     true);

// ===================================================================

void MinisatCliConfig::InitAsDefaultInstance() {}
class MinisatCliConfig::_Internal {
 public:
};

MinisatCliConfig::MinisatCliConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MinisatCliConfig)
}
MinisatCliConfig::MinisatCliConfig(const MinisatCliConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &verbosity_level_, &from.verbosity_level_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
  // @@protoc_insertion_point(copy_constructor:MinisatCliConfig)
}

void MinisatCliConfig::SharedCtor() {
  ::memset(
      &verbosity_level_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
}

MinisatCliConfig::~MinisatCliConfig() {
  // @@protoc_insertion_point(destructor:MinisatCliConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinisatCliConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MinisatCliConfig::ArenaDtor(void* object) {
  MinisatCliConfig* _this = reinterpret_cast<MinisatCliConfig*>(object);
  (void) _this;
}
void MinisatCliConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void MinisatCliConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinisatCliConfig& MinisatCliConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MinisatCliConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void MinisatCliConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:MinisatCliConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &verbosity_level_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&mem_limit_) - reinterpret_cast<char*>(&verbosity_level_)) +
          sizeof(mem_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinisatCliConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 verbosity_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          verbosity_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool preprocessing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          preprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cpu_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cpu_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mem_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinisatCliConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MinisatCliConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 verbosity_level = 1;
  if (this->verbosity_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_verbosity_level(), target);
  }

  // bool preprocessing = 2;
  if (this->preprocessing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        2, this->_internal_preprocessing(), target);
  }

  // int32 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_cpu_limit(), target);
  }

  // int32 mem_limit = 5;
  if (this->mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_mem_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MinisatCliConfig)
  return target;
}

size_t MinisatCliConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:MinisatCliConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 verbosity_level = 1;
  if (this->verbosity_level() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_verbosity_level());
  }

  // bool preprocessing = 2;
  if (this->preprocessing() != 0) {
    total_size += 1 + 1;
  }

  // int32 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_cpu_limit());
  }

  // int32 mem_limit = 5;
  if (this->mem_limit() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_mem_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinisatCliConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:MinisatCliConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MinisatCliConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinisatCliConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:MinisatCliConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:MinisatCliConfig)
    MergeFrom(*source);
  }
}

void MinisatCliConfig::MergeFrom(const MinisatCliConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:MinisatCliConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.verbosity_level() != 0) {
    _internal_set_verbosity_level(from._internal_verbosity_level());
  }
  if (from.preprocessing() != 0) {
    _internal_set_preprocessing(from._internal_preprocessing());
  }
  if (from.cpu_limit() != 0) {
    _internal_set_cpu_limit(from._internal_cpu_limit());
  }
  if (from.mem_limit() != 0) {
    _internal_set_mem_limit(from._internal_mem_limit());
  }
}

void MinisatCliConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:MinisatCliConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MinisatCliConfig::CopyFrom(const MinisatCliConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:MinisatCliConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MinisatCliConfig::IsInitialized() const {
  return true;
}

void MinisatCliConfig::InternalSwap(MinisatCliConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinisatCliConfig, mem_limit_) + sizeof(MinisatCliConfig::mem_limit_) -
      PROTOBUF_FIELD_OFFSET(MinisatCliConfig, verbosity_level_)>(
      reinterpret_cast<char*>(&verbosity_level_),
      reinterpret_cast<char*>(&other->verbosity_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinisatCliConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void BaseSolverConfig::InitAsDefaultInstance() {}
class BaseSolverConfig::_Internal {
 public:
};

BaseSolverConfig::BaseSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BaseSolverConfig)
}
BaseSolverConfig::BaseSolverConfig(const BaseSolverConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &var_decay_, &from.var_decay_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
  // @@protoc_insertion_point(copy_constructor:BaseSolverConfig)
}

void BaseSolverConfig::SharedCtor() {
  ::memset(
      &var_decay_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
}

BaseSolverConfig::~BaseSolverConfig() {
  // @@protoc_insertion_point(destructor:BaseSolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BaseSolverConfig::ArenaDtor(void* object) {
  BaseSolverConfig* _this = reinterpret_cast<BaseSolverConfig*>(object);
  (void) _this;
}
void BaseSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void BaseSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseSolverConfig& BaseSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_BaseSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void BaseSolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:BaseSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &var_decay_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&min_learnts_) - reinterpret_cast<char*>(&var_decay_)) +
          sizeof(min_learnts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseSolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double var_decay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          var_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cla_decay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cla_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rnd_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rnd_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ccmin_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ccmin_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 phase_saving = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          phase_saving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rnd_init = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rnd_init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool luby = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          luby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rfirst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rinc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          rinc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gc_frac = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          gc_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 min_learnts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          min_learnts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double var_decay = 1;
  if (!(this->var_decay() <= 0 && this->var_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_var_decay(), target);
  }

  // double cla_decay = 2;
  if (!(this->cla_decay() <= 0 && this->cla_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cla_decay(), target);
  }

  // double rnd_freq = 3;
  if (!(this->rnd_freq() <= 0 && this->rnd_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_rnd_freq(), target);
  }

  // int32 ccmin_mode = 5;
  if (this->ccmin_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_ccmin_mode(), target);
  }

  // int32 phase_saving = 6;
  if (this->phase_saving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_phase_saving(), target);
  }

  // bool rnd_init = 7;
  if (this->rnd_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        7, this->_internal_rnd_init(), target);
  }

  // bool luby = 8;
  if (this->luby() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        8, this->_internal_luby(), target);
  }

  // int32 rfirst = 9;
  if (this->rfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_rfirst(), target);
  }

  // double rinc = 10;
  if (!(this->rinc() <= 0 && this->rinc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_rinc(), target);
  }

  // double gc_frac = 11;
  if (!(this->gc_frac() <= 0 && this->gc_frac() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_gc_frac(), target);
  }

  // int32 min_learnts = 12;
  if (this->min_learnts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_min_learnts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseSolverConfig)
  return target;
}

size_t BaseSolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:BaseSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double var_decay = 1;
  if (!(this->var_decay() <= 0 && this->var_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double cla_decay = 2;
  if (!(this->cla_decay() <= 0 && this->cla_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double rnd_freq = 3;
  if (!(this->rnd_freq() <= 0 && this->rnd_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ccmin_mode = 5;
  if (this->ccmin_mode() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_ccmin_mode());
  }

  // int32 phase_saving = 6;
  if (this->phase_saving() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_phase_saving());
  }

  // bool rnd_init = 7;
  if (this->rnd_init() != 0) {
    total_size += 1 + 1;
  }

  // bool luby = 8;
  if (this->luby() != 0) {
    total_size += 1 + 1;
  }

  // int32 rfirst = 9;
  if (this->rfirst() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_rfirst());
  }

  // double rinc = 10;
  if (!(this->rinc() <= 0 && this->rinc() >= 0)) {
    total_size += 1 + 8;
  }

  // double gc_frac = 11;
  if (!(this->gc_frac() <= 0 && this->gc_frac() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 min_learnts = 12;
  if (this->min_learnts() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_min_learnts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:BaseSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseSolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseSolverConfig)
    MergeFrom(*source);
  }
}

void BaseSolverConfig::MergeFrom(const BaseSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:BaseSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.var_decay() <= 0 && from.var_decay() >= 0)) {
    _internal_set_var_decay(from._internal_var_decay());
  }
  if (!(from.cla_decay() <= 0 && from.cla_decay() >= 0)) {
    _internal_set_cla_decay(from._internal_cla_decay());
  }
  if (!(from.rnd_freq() <= 0 && from.rnd_freq() >= 0)) {
    _internal_set_rnd_freq(from._internal_rnd_freq());
  }
  if (from.ccmin_mode() != 0) {
    _internal_set_ccmin_mode(from._internal_ccmin_mode());
  }
  if (from.phase_saving() != 0) {
    _internal_set_phase_saving(from._internal_phase_saving());
  }
  if (from.rnd_init() != 0) {
    _internal_set_rnd_init(from._internal_rnd_init());
  }
  if (from.luby() != 0) {
    _internal_set_luby(from._internal_luby());
  }
  if (from.rfirst() != 0) {
    _internal_set_rfirst(from._internal_rfirst());
  }
  if (!(from.rinc() <= 0 && from.rinc() >= 0)) {
    _internal_set_rinc(from._internal_rinc());
  }
  if (!(from.gc_frac() <= 0 && from.gc_frac() >= 0)) {
    _internal_set_gc_frac(from._internal_gc_frac());
  }
  if (from.min_learnts() != 0) {
    _internal_set_min_learnts(from._internal_min_learnts());
  }
}

void BaseSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:BaseSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void BaseSolverConfig::CopyFrom(const BaseSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:BaseSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool BaseSolverConfig::IsInitialized() const {
  return true;
}

void BaseSolverConfig::InternalSwap(BaseSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseSolverConfig, min_learnts_) +
      sizeof(BaseSolverConfig::min_learnts_) - PROTOBUF_FIELD_OFFSET(BaseSolverConfig, var_decay_)>(
      reinterpret_cast<char*>(&var_decay_), reinterpret_cast<char*>(&other->var_decay_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SimpSolverConfig::InitAsDefaultInstance() {
  ::_SimpSolverConfig_default_instance_._instance.get_mutable()->minisat_cli_config_ =
      const_cast<::MinisatCliConfig*>(::MinisatCliConfig::internal_default_instance());
  ::_SimpSolverConfig_default_instance_._instance.get_mutable()->base_solver_config_ =
      const_cast<::BaseSolverConfig*>(::BaseSolverConfig::internal_default_instance());
}
class SimpSolverConfig::_Internal {
 public:
  static const ::MinisatCliConfig& minisat_cli_config(const SimpSolverConfig* msg);
  static const ::BaseSolverConfig& base_solver_config(const SimpSolverConfig* msg);
};

const ::MinisatCliConfig& SimpSolverConfig::_Internal::minisat_cli_config(
    const SimpSolverConfig* msg) {
  return *msg->minisat_cli_config_;
}
const ::BaseSolverConfig& SimpSolverConfig::_Internal::base_solver_config(
    const SimpSolverConfig* msg) {
  return *msg->base_solver_config_;
}
SimpSolverConfig::SimpSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SimpSolverConfig)
}
SimpSolverConfig::SimpSolverConfig(const SimpSolverConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_minisat_cli_config()) {
    minisat_cli_config_ = new ::MinisatCliConfig(*from.minisat_cli_config_);
  } else {
    minisat_cli_config_ = nullptr;
  }
  if (from._internal_has_base_solver_config()) {
    base_solver_config_ = new ::BaseSolverConfig(*from.base_solver_config_);
  } else {
    base_solver_config_ = nullptr;
  }
  ::memcpy(
      &use_asymm_, &from.use_asymm_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) - reinterpret_cast<char*>(&use_asymm_)) +
          sizeof(simp_garbage_frac_));
  // @@protoc_insertion_point(copy_constructor:SimpSolverConfig)
}

void SimpSolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &minisat_cli_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) -
          reinterpret_cast<char*>(&minisat_cli_config_)) +
          sizeof(simp_garbage_frac_));
}

SimpSolverConfig::~SimpSolverConfig() {
  // @@protoc_insertion_point(destructor:SimpSolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete minisat_cli_config_;
  if (this != internal_default_instance())
    delete base_solver_config_;
}

void SimpSolverConfig::ArenaDtor(void* object) {
  SimpSolverConfig* _this = reinterpret_cast<SimpSolverConfig*>(object);
  (void) _this;
}
void SimpSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SimpSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpSolverConfig& SimpSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SimpSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void SimpSolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SimpSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && minisat_cli_config_ != nullptr) {
    delete minisat_cli_config_;
  }
  minisat_cli_config_ = nullptr;
  if (GetArena() == nullptr && base_solver_config_ != nullptr) {
    delete base_solver_config_;
  }
  base_solver_config_ = nullptr;
  ::memset(
      &use_asymm_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&simp_garbage_frac_) - reinterpret_cast<char*>(&use_asymm_)) +
          sizeof(simp_garbage_frac_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpSolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_asymm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_asymm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_rcheck = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_rcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_elim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_elim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 clause_lim = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clause_lim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subsumption_lim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          subsumption_lim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double simp_garbage_frac = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          simp_garbage_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .MinisatCliConfig minisat_cli_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_minisat_cli_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BaseSolverConfig base_solver_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimpSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_asymm = 1;
  if (this->use_asymm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        1, this->_internal_use_asymm(), target);
  }

  // bool use_rcheck = 2;
  if (this->use_rcheck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        2, this->_internal_use_rcheck(), target);
  }

  // bool use_elim = 3;
  if (this->use_elim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(
        3, this->_internal_use_elim(), target);
  }

  // int32 grow = 4;
  if (this->grow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_grow(), target);
  }

  // int32 clause_lim = 5;
  if (this->clause_lim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_clause_lim(), target);
  }

  // int32 subsumption_lim = 6;
  if (this->subsumption_lim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_subsumption_lim(), target);
  }

  // double simp_garbage_frac = 7;
  if (!(this->simp_garbage_frac() <= 0 && this->simp_garbage_frac() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_simp_garbage_frac(), target);
  }

  // .MinisatCliConfig minisat_cli_config = 8;
  if (this->has_minisat_cli_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::minisat_cli_config(this), target, stream);
  }

  // .BaseSolverConfig base_solver_config = 9;
  if (this->has_base_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::base_solver_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimpSolverConfig)
  return target;
}

size_t SimpSolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SimpSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MinisatCliConfig minisat_cli_config = 8;
  if (this->has_minisat_cli_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*minisat_cli_config_);
  }

  // .BaseSolverConfig base_solver_config = 9;
  if (this->has_base_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*base_solver_config_);
  }

  // bool use_asymm = 1;
  if (this->use_asymm() != 0) {
    total_size += 1 + 1;
  }

  // bool use_rcheck = 2;
  if (this->use_rcheck() != 0) {
    total_size += 1 + 1;
  }

  // bool use_elim = 3;
  if (this->use_elim() != 0) {
    total_size += 1 + 1;
  }

  // int32 grow = 4;
  if (this->grow() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(this->_internal_grow());
  }

  // int32 clause_lim = 5;
  if (this->clause_lim() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_clause_lim());
  }

  // int32 subsumption_lim = 6;
  if (this->subsumption_lim() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                          this->_internal_subsumption_lim());
  }

  // double simp_garbage_frac = 7;
  if (!(this->simp_garbage_frac() <= 0 && this->simp_garbage_frac() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SimpSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpSolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimpSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SimpSolverConfig)
    MergeFrom(*source);
  }
}

void SimpSolverConfig::MergeFrom(const SimpSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SimpSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_minisat_cli_config()) {
    _internal_mutable_minisat_cli_config()->::MinisatCliConfig::MergeFrom(
        from._internal_minisat_cli_config());
  }
  if (from.has_base_solver_config()) {
    _internal_mutable_base_solver_config()->::BaseSolverConfig::MergeFrom(
        from._internal_base_solver_config());
  }
  if (from.use_asymm() != 0) {
    _internal_set_use_asymm(from._internal_use_asymm());
  }
  if (from.use_rcheck() != 0) {
    _internal_set_use_rcheck(from._internal_use_rcheck());
  }
  if (from.use_elim() != 0) {
    _internal_set_use_elim(from._internal_use_elim());
  }
  if (from.grow() != 0) {
    _internal_set_grow(from._internal_grow());
  }
  if (from.clause_lim() != 0) {
    _internal_set_clause_lim(from._internal_clause_lim());
  }
  if (from.subsumption_lim() != 0) {
    _internal_set_subsumption_lim(from._internal_subsumption_lim());
  }
  if (!(from.simp_garbage_frac() <= 0 && from.simp_garbage_frac() >= 0)) {
    _internal_set_simp_garbage_frac(from._internal_simp_garbage_frac());
  }
}

void SimpSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SimpSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SimpSolverConfig::CopyFrom(const SimpSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SimpSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SimpSolverConfig::IsInitialized() const {
  return true;
}

void SimpSolverConfig::InternalSwap(SimpSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpSolverConfig, simp_garbage_frac_) +
      sizeof(SimpSolverConfig::simp_garbage_frac_) -
      PROTOBUF_FIELD_OFFSET(SimpSolverConfig, minisat_cli_config_)>(
      reinterpret_cast<char*>(&minisat_cli_config_),
      reinterpret_cast<char*>(&other->minisat_cli_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ParSolverConfig::InitAsDefaultInstance() {
  ::_ParSolverConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
}
class ParSolverConfig::_Internal {
 public:
  static const ::SolverConfig& solver_config(const ParSolverConfig* msg);
};

const ::SolverConfig& ParSolverConfig::_Internal::solver_config(const ParSolverConfig* msg) {
  return *msg->solver_config_;
}
ParSolverConfig::ParSolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParSolverConfig)
}
ParSolverConfig::ParSolverConfig(const ParSolverConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  max_threads_ = from.max_threads_;
  // @@protoc_insertion_point(copy_constructor:ParSolverConfig)
}

void ParSolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &solver_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_threads_) - reinterpret_cast<char*>(&solver_config_)) +
          sizeof(max_threads_));
}

ParSolverConfig::~ParSolverConfig() {
  // @@protoc_insertion_point(destructor:ParSolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParSolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete solver_config_;
}

void ParSolverConfig::ArenaDtor(void* object) {
  ParSolverConfig* _this = reinterpret_cast<ParSolverConfig*>(object);
  (void) _this;
}
void ParSolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ParSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParSolverConfig& ParSolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void ParSolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ParSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  max_threads_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParSolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_threads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SolverConfig solver_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParSolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParSolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_threads = 1;
  if (this->max_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_max_threads(), target);
  }

  // .SolverConfig solver_config = 3;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::solver_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParSolverConfig)
  return target;
}

size_t ParSolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ParSolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SolverConfig solver_config = 3;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  // uint32 max_threads = 1;
  if (this->max_threads() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_threads());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParSolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ParSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParSolverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParSolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParSolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ParSolverConfig)
    MergeFrom(*source);
  }
}

void ParSolverConfig::MergeFrom(const ParSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ParSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
  if (from.max_threads() != 0) {
    _internal_set_max_threads(from._internal_max_threads());
  }
}

void ParSolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ParSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ParSolverConfig::CopyFrom(const ParSolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ParSolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ParSolverConfig::IsInitialized() const {
  return true;
}

void ParSolverConfig::InternalSwap(ParSolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParSolverConfig, max_threads_) + sizeof(ParSolverConfig::max_threads_) -
      PROTOBUF_FIELD_OFFSET(ParSolverConfig, solver_config_)>(
      reinterpret_cast<char*>(&solver_config_), reinterpret_cast<char*>(&other->solver_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParSolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SolverConfig::InitAsDefaultInstance() {
  ::_SolverConfig_default_instance_._instance.get_mutable()->simp_solver_config_ =
      const_cast<::SimpSolverConfig*>(::SimpSolverConfig::internal_default_instance());
  ::_SolverConfig_default_instance_._instance.get_mutable()->par_solver_config_ =
      const_cast<::ParSolverConfig*>(::ParSolverConfig::internal_default_instance());
}
class SolverConfig::_Internal {
 public:
  static const ::SimpSolverConfig& simp_solver_config(const SolverConfig* msg);
  static const ::ParSolverConfig& par_solver_config(const SolverConfig* msg);
};

const ::SimpSolverConfig& SolverConfig::_Internal::simp_solver_config(const SolverConfig* msg) {
  return *msg->simp_solver_config_;
}
const ::ParSolverConfig& SolverConfig::_Internal::par_solver_config(const SolverConfig* msg) {
  return *msg->par_solver_config_;
}
SolverConfig::SolverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SolverConfig)
}
SolverConfig::SolverConfig(const SolverConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solver_type().empty()) {
    solver_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_solver_type(), GetArena());
  }
  if (from._internal_has_simp_solver_config()) {
    simp_solver_config_ = new ::SimpSolverConfig(*from.simp_solver_config_);
  } else {
    simp_solver_config_ = nullptr;
  }
  if (from._internal_has_par_solver_config()) {
    par_solver_config_ = new ::ParSolverConfig(*from.par_solver_config_);
  } else {
    par_solver_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SolverConfig)
}

void SolverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  solver_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &simp_solver_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&par_solver_config_) -
          reinterpret_cast<char*>(&simp_solver_config_)) +
          sizeof(par_solver_config_));
}

SolverConfig::~SolverConfig() {
  // @@protoc_insertion_point(destructor:SolverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  solver_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete simp_solver_config_;
  if (this != internal_default_instance())
    delete par_solver_config_;
}

void SolverConfig::ArenaDtor(void* object) {
  SolverConfig* _this = reinterpret_cast<SolverConfig*>(object);
  (void) _this;
}
void SolverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolverConfig& SolverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ParSolverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void SolverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solver_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && simp_solver_config_ != nullptr) {
    delete simp_solver_config_;
  }
  simp_solver_config_ = nullptr;
  if (GetArena() == nullptr && par_solver_config_ != nullptr) {
    delete par_solver_config_;
  }
  par_solver_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string solver_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_solver_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SolverConfig.solver_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SimpSolverConfig simp_solver_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simp_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ParSolverConfig par_solver_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_par_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string solver_type = 1;
  if (this->solver_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_solver_type().data(),
        static_cast<int>(this->_internal_solver_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SolverConfig.solver_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_solver_type(), target);
  }

  // .SimpSolverConfig simp_solver_config = 4;
  if (this->has_simp_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::simp_solver_config(this), target, stream);
  }

  // .ParSolverConfig par_solver_config = 5;
  if (this->has_par_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::par_solver_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolverConfig)
  return target;
}

size_t SolverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SolverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string solver_type = 1;
  if (this->solver_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_solver_type());
  }

  // .SimpSolverConfig simp_solver_config = 4;
  if (this->has_simp_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*simp_solver_config_);
  }

  // .ParSolverConfig par_solver_config = 5;
  if (this->has_par_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*par_solver_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SolverConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SolverConfig)
    MergeFrom(*source);
  }
}

void SolverConfig::MergeFrom(const SolverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.solver_type().size() > 0) {
    _internal_set_solver_type(from._internal_solver_type());
  }
  if (from.has_simp_solver_config()) {
    _internal_mutable_simp_solver_config()->::SimpSolverConfig::MergeFrom(
        from._internal_simp_solver_config());
  }
  if (from.has_par_solver_config()) {
    _internal_mutable_par_solver_config()->::ParSolverConfig::MergeFrom(
        from._internal_par_solver_config());
  }
}

void SolverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SolverConfig::CopyFrom(const SolverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SolverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SolverConfig::IsInitialized() const {
  return true;
}

void SolverConfig::InternalSwap(SolverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  solver_type_.Swap(
      &other->solver_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolverConfig, par_solver_config_) +
      sizeof(SolverConfig::par_solver_config_) -
      PROTOBUF_FIELD_OFFSET(SolverConfig, simp_solver_config_)>(
      reinterpret_cast<char*>(&simp_solver_config_),
      reinterpret_cast<char*>(&other->simp_solver_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ResourceLimitConfig::InitAsDefaultInstance() {}
class ResourceLimitConfig::_Internal {
 public:
};

ResourceLimitConfig::ResourceLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ResourceLimitConfig)
}
ResourceLimitConfig::ResourceLimitConfig(const ResourceLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &memory_limit_kb_, &from.memory_limit_kb_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
  // @@protoc_insertion_point(copy_constructor:ResourceLimitConfig)
}

void ResourceLimitConfig::SharedCtor() {
  ::memset(
      &memory_limit_kb_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
}

ResourceLimitConfig::~ResourceLimitConfig() {
  // @@protoc_insertion_point(destructor:ResourceLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceLimitConfig::ArenaDtor(void* object) {
  ResourceLimitConfig* _this = reinterpret_cast<ResourceLimitConfig*>(object);
  (void) _this;
}
void ResourceLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ResourceLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLimitConfig& ResourceLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ResourceLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void ResourceLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ResourceLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &memory_limit_kb_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&time_limit_sec_) - reinterpret_cast<char*>(&memory_limit_kb_)) +
          sizeof(time_limit_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 memory_limit_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memory_limit_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 time_limit_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_limit_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 memory_limit_kb = 1;
  if (this->memory_limit_kb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_memory_limit_kb(), target);
  }

  // uint32 time_limit_sec = 2;
  if (this->time_limit_sec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_time_limit_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceLimitConfig)
  return target;
}

size_t ResourceLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ResourceLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 memory_limit_kb = 1;
  if (this->memory_limit_kb() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_memory_limit_kb());
  }

  // uint32 time_limit_sec = 2;
  if (this->time_limit_sec() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_time_limit_sec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ResourceLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResourceLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ResourceLimitConfig)
    MergeFrom(*source);
  }
}

void ResourceLimitConfig::MergeFrom(const ResourceLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ResourceLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memory_limit_kb() != 0) {
    _internal_set_memory_limit_kb(from._internal_memory_limit_kb());
  }
  if (from.time_limit_sec() != 0) {
    _internal_set_time_limit_sec(from._internal_time_limit_sec());
  }
}

void ResourceLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ResourceLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ResourceLimitConfig::CopyFrom(const ResourceLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ResourceLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimitConfig::IsInitialized() const {
  return true;
}

void ResourceLimitConfig::InternalSwap(ResourceLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceLimitConfig, time_limit_sec_) +
      sizeof(ResourceLimitConfig::time_limit_sec_) -
      PROTOBUF_FIELD_OFFSET(ResourceLimitConfig, memory_limit_kb_)>(
      reinterpret_cast<char*>(&memory_limit_kb_),
      reinterpret_cast<char*>(&other->memory_limit_kb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void FitnessLimitConfig::InitAsDefaultInstance() {}
class FitnessLimitConfig::_Internal {
 public:
};

FitnessLimitConfig::FitnessLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:FitnessLimitConfig)
}
FitnessLimitConfig::FitnessLimitConfig(const FitnessLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lowest_fitness_ = from.lowest_fitness_;
  // @@protoc_insertion_point(copy_constructor:FitnessLimitConfig)
}

void FitnessLimitConfig::SharedCtor() {
  lowest_fitness_ = 0;
}

FitnessLimitConfig::~FitnessLimitConfig() {
  // @@protoc_insertion_point(destructor:FitnessLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FitnessLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FitnessLimitConfig::ArenaDtor(void* object) {
  FitnessLimitConfig* _this = reinterpret_cast<FitnessLimitConfig*>(object);
  (void) _this;
}
void FitnessLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void FitnessLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FitnessLimitConfig& FitnessLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_FitnessLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void FitnessLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:FitnessLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lowest_fitness_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FitnessLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lowest_fitness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lowest_fitness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FitnessLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FitnessLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lowest_fitness = 1;
  if (!(this->lowest_fitness() <= 0 && this->lowest_fitness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_lowest_fitness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FitnessLimitConfig)
  return target;
}

size_t FitnessLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:FitnessLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lowest_fitness = 1;
  if (!(this->lowest_fitness() <= 0 && this->lowest_fitness() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FitnessLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:FitnessLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FitnessLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FitnessLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:FitnessLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:FitnessLimitConfig)
    MergeFrom(*source);
  }
}

void FitnessLimitConfig::MergeFrom(const FitnessLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:FitnessLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lowest_fitness() <= 0 && from.lowest_fitness() >= 0)) {
    _internal_set_lowest_fitness(from._internal_lowest_fitness());
  }
}

void FitnessLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:FitnessLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FitnessLimitConfig::CopyFrom(const FitnessLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:FitnessLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FitnessLimitConfig::IsInitialized() const {
  return true;
}

void FitnessLimitConfig::InternalSwap(FitnessLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(lowest_fitness_, other->lowest_fitness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FitnessLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void PointsLimitConfig::InitAsDefaultInstance() {}
class PointsLimitConfig::_Internal {
 public:
};

PointsLimitConfig::PointsLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PointsLimitConfig)
}
PointsLimitConfig::PointsLimitConfig(const PointsLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_points_visited_ = from.max_points_visited_;
  // @@protoc_insertion_point(copy_constructor:PointsLimitConfig)
}

void PointsLimitConfig::SharedCtor() {
  max_points_visited_ = 0u;
}

PointsLimitConfig::~PointsLimitConfig() {
  // @@protoc_insertion_point(destructor:PointsLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PointsLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PointsLimitConfig::ArenaDtor(void* object) {
  PointsLimitConfig* _this = reinterpret_cast<PointsLimitConfig*>(object);
  (void) _this;
}
void PointsLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void PointsLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointsLimitConfig& PointsLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_PointsLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void PointsLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:PointsLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_points_visited_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointsLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_points_visited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_points_visited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointsLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PointsLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_points_visited = 1;
  if (this->max_points_visited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_max_points_visited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PointsLimitConfig)
  return target;
}

size_t PointsLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:PointsLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 max_points_visited = 1;
  if (this->max_points_visited() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_points_visited());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointsLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:PointsLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PointsLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointsLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:PointsLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:PointsLimitConfig)
    MergeFrom(*source);
  }
}

void PointsLimitConfig::MergeFrom(const PointsLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:PointsLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_points_visited() != 0) {
    _internal_set_max_points_visited(from._internal_max_points_visited());
  }
}

void PointsLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:PointsLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PointsLimitConfig::CopyFrom(const PointsLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:PointsLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PointsLimitConfig::IsInitialized() const {
  return true;
}

void PointsLimitConfig::InternalSwap(PointsLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(max_points_visited_, other->max_points_visited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointsLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ConjLimitConfig::InitAsDefaultInstance() {}
class ConjLimitConfig::_Internal {
 public:
};

ConjLimitConfig::ConjLimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), limit_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConjLimitConfig)
}
ConjLimitConfig::ConjLimitConfig(const ConjLimitConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), limit_config_(from.limit_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ConjLimitConfig)
}

void ConjLimitConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
}

ConjLimitConfig::~ConjLimitConfig() {
  // @@protoc_insertion_point(destructor:ConjLimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConjLimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConjLimitConfig::ArenaDtor(void* object) {
  ConjLimitConfig* _this = reinterpret_cast<ConjLimitConfig*>(object);
  (void) _this;
}
void ConjLimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ConjLimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConjLimitConfig& ConjLimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void ConjLimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ConjLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConjLimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LimitConfig limit_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limit_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConjLimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConjLimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LimitConfig limit_config = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_limit_config_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, this->_internal_limit_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConjLimitConfig)
  return target;
}

size_t ConjLimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ConjLimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LimitConfig limit_config = 1;
  total_size += 1UL * this->_internal_limit_config_size();
  for (const auto& msg : this->limit_config_) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConjLimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ConjLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ConjLimitConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConjLimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConjLimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ConjLimitConfig)
    MergeFrom(*source);
  }
}

void ConjLimitConfig::MergeFrom(const ConjLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ConjLimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limit_config_.MergeFrom(from.limit_config_);
}

void ConjLimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ConjLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ConjLimitConfig::CopyFrom(const ConjLimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ConjLimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ConjLimitConfig::IsInitialized() const {
  return true;
}

void ConjLimitConfig::InternalSwap(ConjLimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  limit_config_.InternalSwap(&other->limit_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConjLimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void LimitConfig::InitAsDefaultInstance() {
  ::_LimitConfig_default_instance_._instance.get_mutable()->resource_limit_config_ =
      const_cast<::ResourceLimitConfig*>(::ResourceLimitConfig::internal_default_instance());
  ::_LimitConfig_default_instance_._instance.get_mutable()->fitness_limit_config_ =
      const_cast<::FitnessLimitConfig*>(::FitnessLimitConfig::internal_default_instance());
  ::_LimitConfig_default_instance_._instance.get_mutable()->conj_limit_config_ =
      const_cast<::ConjLimitConfig*>(::ConjLimitConfig::internal_default_instance());
  ::_LimitConfig_default_instance_._instance.get_mutable()->points_limit_config_ =
      const_cast<::PointsLimitConfig*>(::PointsLimitConfig::internal_default_instance());
}
class LimitConfig::_Internal {
 public:
  static const ::ResourceLimitConfig& resource_limit_config(const LimitConfig* msg);
  static const ::FitnessLimitConfig& fitness_limit_config(const LimitConfig* msg);
  static const ::ConjLimitConfig& conj_limit_config(const LimitConfig* msg);
  static const ::PointsLimitConfig& points_limit_config(const LimitConfig* msg);
};

const ::ResourceLimitConfig& LimitConfig::_Internal::resource_limit_config(const LimitConfig* msg) {
  return *msg->resource_limit_config_;
}
const ::FitnessLimitConfig& LimitConfig::_Internal::fitness_limit_config(const LimitConfig* msg) {
  return *msg->fitness_limit_config_;
}
const ::ConjLimitConfig& LimitConfig::_Internal::conj_limit_config(const LimitConfig* msg) {
  return *msg->conj_limit_config_;
}
const ::PointsLimitConfig& LimitConfig::_Internal::points_limit_config(const LimitConfig* msg) {
  return *msg->points_limit_config_;
}
LimitConfig::LimitConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LimitConfig)
}
LimitConfig::LimitConfig(const LimitConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_limit_type().empty()) {
    limit_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_limit_type(), GetArena());
  }
  if (from._internal_has_resource_limit_config()) {
    resource_limit_config_ = new ::ResourceLimitConfig(*from.resource_limit_config_);
  } else {
    resource_limit_config_ = nullptr;
  }
  if (from._internal_has_fitness_limit_config()) {
    fitness_limit_config_ = new ::FitnessLimitConfig(*from.fitness_limit_config_);
  } else {
    fitness_limit_config_ = nullptr;
  }
  if (from._internal_has_conj_limit_config()) {
    conj_limit_config_ = new ::ConjLimitConfig(*from.conj_limit_config_);
  } else {
    conj_limit_config_ = nullptr;
  }
  if (from._internal_has_points_limit_config()) {
    points_limit_config_ = new ::PointsLimitConfig(*from.points_limit_config_);
  } else {
    points_limit_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LimitConfig)
}

void LimitConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  limit_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &resource_limit_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&points_limit_config_) -
          reinterpret_cast<char*>(&resource_limit_config_)) +
          sizeof(points_limit_config_));
}

LimitConfig::~LimitConfig() {
  // @@protoc_insertion_point(destructor:LimitConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LimitConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  limit_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete resource_limit_config_;
  if (this != internal_default_instance())
    delete fitness_limit_config_;
  if (this != internal_default_instance())
    delete conj_limit_config_;
  if (this != internal_default_instance())
    delete points_limit_config_;
}

void LimitConfig::ArenaDtor(void* object) {
  LimitConfig* _this = reinterpret_cast<LimitConfig*>(object);
  (void) _this;
}
void LimitConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void LimitConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitConfig& LimitConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ConjLimitConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void LimitConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:LimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && resource_limit_config_ != nullptr) {
    delete resource_limit_config_;
  }
  resource_limit_config_ = nullptr;
  if (GetArena() == nullptr && fitness_limit_config_ != nullptr) {
    delete fitness_limit_config_;
  }
  fitness_limit_config_ = nullptr;
  if (GetArena() == nullptr && conj_limit_config_ != nullptr) {
    delete conj_limit_config_;
  }
  conj_limit_config_ = nullptr;
  if (GetArena() == nullptr && points_limit_config_ != nullptr) {
    delete points_limit_config_;
  }
  points_limit_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string limit_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_limit_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LimitConfig.limit_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ResourceLimitConfig resource_limit_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FitnessLimitConfig fitness_limit_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fitness_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ConjLimitConfig conj_limit_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conj_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PointsLimitConfig points_limit_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_points_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LimitConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string limit_type = 1;
  if (this->limit_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_limit_type().data(),
        static_cast<int>(this->_internal_limit_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "LimitConfig.limit_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_limit_type(), target);
  }

  // .ResourceLimitConfig resource_limit_config = 2;
  if (this->has_resource_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::resource_limit_config(this), target, stream);
  }

  // .FitnessLimitConfig fitness_limit_config = 3;
  if (this->has_fitness_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::fitness_limit_config(this), target, stream);
  }

  // .ConjLimitConfig conj_limit_config = 4;
  if (this->has_conj_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::conj_limit_config(this), target, stream);
  }

  // .PointsLimitConfig points_limit_config = 5;
  if (this->has_points_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::points_limit_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LimitConfig)
  return target;
}

size_t LimitConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:LimitConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string limit_type = 1;
  if (this->limit_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_limit_type());
  }

  // .ResourceLimitConfig resource_limit_config = 2;
  if (this->has_resource_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*resource_limit_config_);
  }

  // .FitnessLimitConfig fitness_limit_config = 3;
  if (this->has_fitness_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*fitness_limit_config_);
  }

  // .ConjLimitConfig conj_limit_config = 4;
  if (this->has_conj_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*conj_limit_config_);
  }

  // .PointsLimitConfig points_limit_config = 5;
  if (this->has_points_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*points_limit_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:LimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LimitConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:LimitConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:LimitConfig)
    MergeFrom(*source);
  }
}

void LimitConfig::MergeFrom(const LimitConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:LimitConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit_type().size() > 0) {
    _internal_set_limit_type(from._internal_limit_type());
  }
  if (from.has_resource_limit_config()) {
    _internal_mutable_resource_limit_config()->::ResourceLimitConfig::MergeFrom(
        from._internal_resource_limit_config());
  }
  if (from.has_fitness_limit_config()) {
    _internal_mutable_fitness_limit_config()->::FitnessLimitConfig::MergeFrom(
        from._internal_fitness_limit_config());
  }
  if (from.has_conj_limit_config()) {
    _internal_mutable_conj_limit_config()->::ConjLimitConfig::MergeFrom(
        from._internal_conj_limit_config());
  }
  if (from.has_points_limit_config()) {
    _internal_mutable_points_limit_config()->::PointsLimitConfig::MergeFrom(
        from._internal_points_limit_config());
  }
}

void LimitConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:LimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LimitConfig::CopyFrom(const LimitConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:LimitConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LimitConfig::IsInitialized() const {
  return true;
}

void LimitConfig::InternalSwap(LimitConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  limit_type_.Swap(
      &other->limit_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitConfig, points_limit_config_) +
      sizeof(LimitConfig::points_limit_config_) -
      PROTOBUF_FIELD_OFFSET(LimitConfig, resource_limit_config_)>(
      reinterpret_cast<char*>(&resource_limit_config_),
      reinterpret_cast<char*>(&other->resource_limit_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void UniformMutationConfig::InitAsDefaultInstance() {}
class UniformMutationConfig::_Internal {
 public:
};

UniformMutationConfig::UniformMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UniformMutationConfig)
}
UniformMutationConfig::UniformMutationConfig(const UniformMutationConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:UniformMutationConfig)
}

void UniformMutationConfig::SharedCtor() {
  scale_ = 0;
}

UniformMutationConfig::~UniformMutationConfig() {
  // @@protoc_insertion_point(destructor:UniformMutationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniformMutationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniformMutationConfig::ArenaDtor(void* object) {
  UniformMutationConfig* _this = reinterpret_cast<UniformMutationConfig*>(object);
  (void) _this;
}
void UniformMutationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void UniformMutationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniformMutationConfig& UniformMutationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_UniformMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void UniformMutationConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:UniformMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniformMutationConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniformMutationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UniformMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UniformMutationConfig)
  return target;
}

size_t UniformMutationConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:UniformMutationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double scale = 1;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniformMutationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:UniformMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UniformMutationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniformMutationConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:UniformMutationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:UniformMutationConfig)
    MergeFrom(*source);
  }
}

void UniformMutationConfig::MergeFrom(const UniformMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:UniformMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void UniformMutationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:UniformMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void UniformMutationConfig::CopyFrom(const UniformMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:UniformMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool UniformMutationConfig::IsInitialized() const {
  return true;
}

void UniformMutationConfig::InternalSwap(UniformMutationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(scale_, other->scale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniformMutationConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void DoerrMutationConfig::InitAsDefaultInstance() {}
class DoerrMutationConfig::_Internal {
 public:
};

DoerrMutationConfig::DoerrMutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DoerrMutationConfig)
}
DoerrMutationConfig::DoerrMutationConfig(const DoerrMutationConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  beta_ = from.beta_;
  // @@protoc_insertion_point(copy_constructor:DoerrMutationConfig)
}

void DoerrMutationConfig::SharedCtor() {
  beta_ = 0;
}

DoerrMutationConfig::~DoerrMutationConfig() {
  // @@protoc_insertion_point(destructor:DoerrMutationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoerrMutationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoerrMutationConfig::ArenaDtor(void* object) {
  DoerrMutationConfig* _this = reinterpret_cast<DoerrMutationConfig*>(object);
  (void) _this;
}
void DoerrMutationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void DoerrMutationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoerrMutationConfig& DoerrMutationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_DoerrMutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void DoerrMutationConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:DoerrMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beta_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoerrMutationConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double beta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoerrMutationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DoerrMutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_beta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DoerrMutationConfig)
  return target;
}

size_t DoerrMutationConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:DoerrMutationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double beta = 1;
  if (!(this->beta() <= 0 && this->beta() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoerrMutationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:DoerrMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DoerrMutationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoerrMutationConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:DoerrMutationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:DoerrMutationConfig)
    MergeFrom(*source);
  }
}

void DoerrMutationConfig::MergeFrom(const DoerrMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:DoerrMutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.beta() <= 0 && from.beta() >= 0)) {
    _internal_set_beta(from._internal_beta());
  }
}

void DoerrMutationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:DoerrMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DoerrMutationConfig::CopyFrom(const DoerrMutationConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:DoerrMutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DoerrMutationConfig::IsInitialized() const {
  return true;
}

void DoerrMutationConfig::InternalSwap(DoerrMutationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(beta_, other->beta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoerrMutationConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void MutationConfig::InitAsDefaultInstance() {
  ::_MutationConfig_default_instance_._instance.get_mutable()->uniform_mutation_config_ =
      const_cast<::UniformMutationConfig*>(::UniformMutationConfig::internal_default_instance());
  ::_MutationConfig_default_instance_._instance.get_mutable()->doerr_mutation_config_ =
      const_cast<::DoerrMutationConfig*>(::DoerrMutationConfig::internal_default_instance());
}
class MutationConfig::_Internal {
 public:
  static const ::UniformMutationConfig& uniform_mutation_config(const MutationConfig* msg);
  static const ::DoerrMutationConfig& doerr_mutation_config(const MutationConfig* msg);
};

const ::UniformMutationConfig& MutationConfig::_Internal::uniform_mutation_config(
    const MutationConfig* msg) {
  return *msg->uniform_mutation_config_;
}
const ::DoerrMutationConfig& MutationConfig::_Internal::doerr_mutation_config(
    const MutationConfig* msg) {
  return *msg->doerr_mutation_config_;
}
MutationConfig::MutationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MutationConfig)
}
MutationConfig::MutationConfig(const MutationConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mutation_type().empty()) {
    mutation_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_mutation_type(), GetArena());
  }
  if (from._internal_has_uniform_mutation_config()) {
    uniform_mutation_config_ = new ::UniformMutationConfig(*from.uniform_mutation_config_);
  } else {
    uniform_mutation_config_ = nullptr;
  }
  if (from._internal_has_doerr_mutation_config()) {
    doerr_mutation_config_ = new ::DoerrMutationConfig(*from.doerr_mutation_config_);
  } else {
    doerr_mutation_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MutationConfig)
}

void MutationConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  mutation_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &uniform_mutation_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&doerr_mutation_config_) -
          reinterpret_cast<char*>(&uniform_mutation_config_)) +
          sizeof(doerr_mutation_config_));
}

MutationConfig::~MutationConfig() {
  // @@protoc_insertion_point(destructor:MutationConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mutation_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete uniform_mutation_config_;
  if (this != internal_default_instance())
    delete doerr_mutation_config_;
}

void MutationConfig::ArenaDtor(void* object) {
  MutationConfig* _this = reinterpret_cast<MutationConfig*>(object);
  (void) _this;
}
void MutationConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void MutationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationConfig& MutationConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_MutationConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void MutationConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:MutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutation_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && uniform_mutation_config_ != nullptr) {
    delete uniform_mutation_config_;
  }
  uniform_mutation_config_ = nullptr;
  if (GetArena() == nullptr && doerr_mutation_config_ != nullptr) {
    delete doerr_mutation_config_;
  }
  doerr_mutation_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string mutation_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mutation_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MutationConfig.mutation_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UniformMutationConfig uniform_mutation_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniform_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DoerrMutationConfig doerr_mutation_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_doerr_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MutationConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_mutation_type().data(),
        static_cast<int>(this->_internal_mutation_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "MutationConfig.mutation_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_mutation_type(), target);
  }

  // .UniformMutationConfig uniform_mutation_config = 2;
  if (this->has_uniform_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::uniform_mutation_config(this), target, stream);
  }

  // .DoerrMutationConfig doerr_mutation_config = 3;
  if (this->has_doerr_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::doerr_mutation_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MutationConfig)
  return target;
}

size_t MutationConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:MutationConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mutation_type = 1;
  if (this->mutation_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_mutation_type());
  }

  // .UniformMutationConfig uniform_mutation_config = 2;
  if (this->has_uniform_mutation_config()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                          *uniform_mutation_config_);
  }

  // .DoerrMutationConfig doerr_mutation_config = 3;
  if (this->has_doerr_mutation_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*doerr_mutation_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:MutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:MutationConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:MutationConfig)
    MergeFrom(*source);
  }
}

void MutationConfig::MergeFrom(const MutationConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:MutationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mutation_type().size() > 0) {
    _internal_set_mutation_type(from._internal_mutation_type());
  }
  if (from.has_uniform_mutation_config()) {
    _internal_mutable_uniform_mutation_config()->::UniformMutationConfig::MergeFrom(
        from._internal_uniform_mutation_config());
  }
  if (from.has_doerr_mutation_config()) {
    _internal_mutable_doerr_mutation_config()->::DoerrMutationConfig::MergeFrom(
        from._internal_doerr_mutation_config());
  }
}

void MutationConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:MutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MutationConfig::CopyFrom(const MutationConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:MutationConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MutationConfig::IsInitialized() const {
  return true;
}

void MutationConfig::InternalSwap(MutationConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mutation_type_.Swap(
      &other->mutation_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutationConfig, doerr_mutation_config_) +
      sizeof(MutationConfig::doerr_mutation_config_) -
      PROTOBUF_FIELD_OFFSET(MutationConfig, uniform_mutation_config_)>(
      reinterpret_cast<char*>(&uniform_mutation_config_),
      reinterpret_cast<char*>(&other->uniform_mutation_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CrossoverConfig::InitAsDefaultInstance() {}
class CrossoverConfig::_Internal {
 public:
};

CrossoverConfig::CrossoverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CrossoverConfig)
}
CrossoverConfig::CrossoverConfig(const CrossoverConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crossover_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_crossover_type().empty()) {
    crossover_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_crossover_type(), GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CrossoverConfig)
}

void CrossoverConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  crossover_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CrossoverConfig::~CrossoverConfig() {
  // @@protoc_insertion_point(destructor:CrossoverConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrossoverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  crossover_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrossoverConfig::ArenaDtor(void* object) {
  CrossoverConfig* _this = reinterpret_cast<CrossoverConfig*>(object);
  (void) _this;
}
void CrossoverConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void CrossoverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CrossoverConfig& CrossoverConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CrossoverConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void CrossoverConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:CrossoverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crossover_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossoverConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string crossover_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_crossover_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(
              ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CrossoverConfig.crossover_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrossoverConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrossoverConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string crossover_type = 1;
  if (this->crossover_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_crossover_type().data(),
        static_cast<int>(this->_internal_crossover_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "CrossoverConfig.crossover_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_crossover_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrossoverConfig)
  return target;
}

size_t CrossoverConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:CrossoverConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string crossover_type = 1;
  if (this->crossover_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_crossover_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrossoverConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:CrossoverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CrossoverConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrossoverConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:CrossoverConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:CrossoverConfig)
    MergeFrom(*source);
  }
}

void CrossoverConfig::MergeFrom(const CrossoverConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:CrossoverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.crossover_type().size() > 0) {
    _internal_set_crossover_type(from._internal_crossover_type());
  }
}

void CrossoverConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:CrossoverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CrossoverConfig::CopyFrom(const CrossoverConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:CrossoverConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CrossoverConfig::IsInitialized() const {
  return true;
}

void CrossoverConfig::InternalSwap(CrossoverConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crossover_type_.Swap(
      &other->crossover_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossoverConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SelectorConfig::InitAsDefaultInstance() {}
class SelectorConfig::_Internal {
 public:
};

SelectorConfig::SelectorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SelectorConfig)
}
SelectorConfig::SelectorConfig(const SelectorConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selector_type().empty()) {
    selector_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_selector_type(), GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:SelectorConfig)
}

void SelectorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  selector_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SelectorConfig::~SelectorConfig() {
  // @@protoc_insertion_point(destructor:SelectorConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SelectorConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  selector_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectorConfig::ArenaDtor(void* object) {
  SelectorConfig* _this = reinterpret_cast<SelectorConfig*>(object);
  (void) _this;
}
void SelectorConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SelectorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectorConfig& SelectorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SelectorConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void SelectorConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SelectorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selector_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectorConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string selector_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_selector_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SelectorConfig.selector_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SelectorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string selector_type = 1;
  if (this->selector_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_selector_type().data(),
        static_cast<int>(this->_internal_selector_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "SelectorConfig.selector_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_selector_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SelectorConfig)
  return target;
}

size_t SelectorConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SelectorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string selector_type = 1;
  if (this->selector_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_selector_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SelectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectorConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SelectorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SelectorConfig)
    MergeFrom(*source);
  }
}

void SelectorConfig::MergeFrom(const SelectorConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SelectorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.selector_type().size() > 0) {
    _internal_set_selector_type(from._internal_selector_type());
  }
}

void SelectorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SelectorConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SelectorConfig::CopyFrom(const SelectorConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SelectorConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SelectorConfig::IsInitialized() const {
  return true;
}

void SelectorConfig::InternalSwap(SelectorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  selector_type_.Swap(
      &other->selector_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectorConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void InstanceConfig_SamplingSizeConfig::InitAsDefaultInstance() {}
class InstanceConfig_SamplingSizeConfig::_Internal {
 public:
};

InstanceConfig_SamplingSizeConfig::InstanceConfig_SamplingSizeConfig(
    ::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InstanceConfig.SamplingSizeConfig)
}
InstanceConfig_SamplingSizeConfig::InstanceConfig_SamplingSizeConfig(
    const InstanceConfig_SamplingSizeConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(
      &base_count_, &from.base_count_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
  // @@protoc_insertion_point(copy_constructor:InstanceConfig.SamplingSizeConfig)
}

void InstanceConfig_SamplingSizeConfig::SharedCtor() {
  ::memset(
      &base_count_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
}

InstanceConfig_SamplingSizeConfig::~InstanceConfig_SamplingSizeConfig() {
  // @@protoc_insertion_point(destructor:InstanceConfig.SamplingSizeConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstanceConfig_SamplingSizeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InstanceConfig_SamplingSizeConfig::ArenaDtor(void* object) {
  InstanceConfig_SamplingSizeConfig* _this =
      reinterpret_cast<InstanceConfig_SamplingSizeConfig*>(object);
  (void) _this;
}
void InstanceConfig_SamplingSizeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void InstanceConfig_SamplingSizeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstanceConfig_SamplingSizeConfig& InstanceConfig_SamplingSizeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_InstanceConfig_SamplingSizeConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void InstanceConfig_SamplingSizeConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:InstanceConfig.SamplingSizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(
      &base_count_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_steps_) - reinterpret_cast<char*>(&base_count_)) +
          sizeof(max_steps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceConfig_SamplingSizeConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 base_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          base_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceConfig_SamplingSizeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceConfig.SamplingSizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 base_count = 1;
  if (this->base_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_base_count(), target);
  }

  // uint32 max_steps = 2;
  if (this->max_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_steps(), target);
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceConfig.SamplingSizeConfig)
  return target;
}

size_t InstanceConfig_SamplingSizeConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:InstanceConfig.SamplingSizeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 base_count = 1;
  if (this->base_count() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                          this->_internal_base_count());
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_steps = 2;
  if (this->max_steps() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_steps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceConfig_SamplingSizeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:InstanceConfig.SamplingSizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceConfig_SamplingSizeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstanceConfig_SamplingSizeConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:InstanceConfig.SamplingSizeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:InstanceConfig.SamplingSizeConfig)
    MergeFrom(*source);
  }
}

void InstanceConfig_SamplingSizeConfig::MergeFrom(const InstanceConfig_SamplingSizeConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:InstanceConfig.SamplingSizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_count() != 0) {
    _internal_set_base_count(from._internal_base_count());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.max_steps() != 0) {
    _internal_set_max_steps(from._internal_max_steps());
  }
}

void InstanceConfig_SamplingSizeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:InstanceConfig.SamplingSizeConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void InstanceConfig_SamplingSizeConfig::CopyFrom(const InstanceConfig_SamplingSizeConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:InstanceConfig.SamplingSizeConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool InstanceConfig_SamplingSizeConfig::IsInitialized() const {
  return true;
}

void InstanceConfig_SamplingSizeConfig::InternalSwap(InstanceConfig_SamplingSizeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceConfig_SamplingSizeConfig, max_steps_) +
      sizeof(InstanceConfig_SamplingSizeConfig::max_steps_) -
      PROTOBUF_FIELD_OFFSET(InstanceConfig_SamplingSizeConfig, base_count_)>(
      reinterpret_cast<char*>(&base_count_), reinterpret_cast<char*>(&other->base_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceConfig_SamplingSizeConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void InstanceConfig::InitAsDefaultInstance() {
  ::_InstanceConfig_default_instance_._instance.get_mutable()->sampling_config_ =
      const_cast<::InstanceConfig_SamplingSizeConfig*>(
          ::InstanceConfig_SamplingSizeConfig::internal_default_instance());
}
class InstanceConfig::_Internal {
 public:
  static const ::InstanceConfig_SamplingSizeConfig& sampling_config(const InstanceConfig* msg);
};

const ::InstanceConfig_SamplingSizeConfig& InstanceConfig::_Internal::sampling_config(
    const InstanceConfig* msg) {
  return *msg->sampling_config_;
}
InstanceConfig::InstanceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InstanceConfig)
}
InstanceConfig::InstanceConfig(const InstanceConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sampling_config()) {
    sampling_config_ = new ::InstanceConfig_SamplingSizeConfig(*from.sampling_config_);
  } else {
    sampling_config_ = nullptr;
  }
  ::memcpy(
      &omega_x_, &from.omega_x_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&omega_x_)) +
          sizeof(max_cache_size_));
  // @@protoc_insertion_point(copy_constructor:InstanceConfig)
}

void InstanceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &sampling_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&sampling_config_)) +
          sizeof(max_cache_size_));
}

InstanceConfig::~InstanceConfig() {
  // @@protoc_insertion_point(destructor:InstanceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstanceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete sampling_config_;
}

void InstanceConfig::ArenaDtor(void* object) {
  InstanceConfig* _this = reinterpret_cast<InstanceConfig*>(object);
  (void) _this;
}
void InstanceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void InstanceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstanceConfig& InstanceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_InstanceConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void InstanceConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:InstanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sampling_config_ != nullptr) {
    delete sampling_config_;
  }
  sampling_config_ = nullptr;
  ::memset(
      &omega_x_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_cache_size_) - reinterpret_cast<char*>(&omega_x_)) +
          sizeof(max_cache_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 omega_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          omega_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 heuristic_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          heuristic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_cache_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InstanceConfig.SamplingSizeConfig sampling_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstanceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 omega_x = 1;
  if (this->omega_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_omega_x(), target);
  }

  // uint32 heuristic_size = 2;
  if (this->heuristic_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_heuristic_size(), target);
  }

  // uint32 max_cache_size = 3;
  if (this->max_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_max_cache_size(), target);
  }

  // .InstanceConfig.SamplingSizeConfig sampling_config = 4;
  if (this->has_sampling_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::sampling_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceConfig)
  return target;
}

size_t InstanceConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:InstanceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InstanceConfig.SamplingSizeConfig sampling_config = 4;
  if (this->has_sampling_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*sampling_config_);
  }

  // uint32 omega_x = 1;
  if (this->omega_x() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_omega_x());
  }

  // uint32 heuristic_size = 2;
  if (this->heuristic_size() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_heuristic_size());
  }

  // uint32 max_cache_size = 3;
  if (this->max_cache_size() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_cache_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstanceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:InstanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const InstanceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstanceConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:InstanceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:InstanceConfig)
    MergeFrom(*source);
  }
}

void InstanceConfig::MergeFrom(const InstanceConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:InstanceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sampling_config()) {
    _internal_mutable_sampling_config()->::InstanceConfig_SamplingSizeConfig::MergeFrom(
        from._internal_sampling_config());
  }
  if (from.omega_x() != 0) {
    _internal_set_omega_x(from._internal_omega_x());
  }
  if (from.heuristic_size() != 0) {
    _internal_set_heuristic_size(from._internal_heuristic_size());
  }
  if (from.max_cache_size() != 0) {
    _internal_set_max_cache_size(from._internal_max_cache_size());
  }
}

void InstanceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:InstanceConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void InstanceConfig::CopyFrom(const InstanceConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:InstanceConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool InstanceConfig::IsInitialized() const {
  return true;
}

void InstanceConfig::InternalSwap(InstanceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceConfig, max_cache_size_) +
      sizeof(InstanceConfig::max_cache_size_) -
      PROTOBUF_FIELD_OFFSET(InstanceConfig, sampling_config_)>(
      reinterpret_cast<char*>(&sampling_config_),
      reinterpret_cast<char*>(&other->sampling_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void BaseAlgorithmConfig::InitAsDefaultInstance() {
  ::_BaseAlgorithmConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
  ::_BaseAlgorithmConfig_default_instance_._instance.get_mutable()->limit_config_ =
      const_cast<::LimitConfig*>(::LimitConfig::internal_default_instance());
  ::_BaseAlgorithmConfig_default_instance_._instance.get_mutable()->instance_config_ =
      const_cast<::InstanceConfig*>(::InstanceConfig::internal_default_instance());
}
class BaseAlgorithmConfig::_Internal {
 public:
  static const ::SolverConfig& solver_config(const BaseAlgorithmConfig* msg);
  static const ::LimitConfig& limit_config(const BaseAlgorithmConfig* msg);
  static const ::InstanceConfig& instance_config(const BaseAlgorithmConfig* msg);
};

const ::SolverConfig& BaseAlgorithmConfig::_Internal::solver_config(
    const BaseAlgorithmConfig* msg) {
  return *msg->solver_config_;
}
const ::LimitConfig& BaseAlgorithmConfig::_Internal::limit_config(const BaseAlgorithmConfig* msg) {
  return *msg->limit_config_;
}
const ::InstanceConfig& BaseAlgorithmConfig::_Internal::instance_config(
    const BaseAlgorithmConfig* msg) {
  return *msg->instance_config_;
}
BaseAlgorithmConfig::BaseAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BaseAlgorithmConfig)
}
BaseAlgorithmConfig::BaseAlgorithmConfig(const BaseAlgorithmConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  if (from._internal_has_limit_config()) {
    limit_config_ = new ::LimitConfig(*from.limit_config_);
  } else {
    limit_config_ = nullptr;
  }
  if (from._internal_has_instance_config()) {
    instance_config_ = new ::InstanceConfig(*from.instance_config_);
  } else {
    instance_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BaseAlgorithmConfig)
}

void BaseAlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &solver_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&instance_config_) - reinterpret_cast<char*>(&solver_config_)) +
          sizeof(instance_config_));
}

BaseAlgorithmConfig::~BaseAlgorithmConfig() {
  // @@protoc_insertion_point(destructor:BaseAlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseAlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete solver_config_;
  if (this != internal_default_instance())
    delete limit_config_;
  if (this != internal_default_instance())
    delete instance_config_;
}

void BaseAlgorithmConfig::ArenaDtor(void* object) {
  BaseAlgorithmConfig* _this = reinterpret_cast<BaseAlgorithmConfig*>(object);
  (void) _this;
}
void BaseAlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void BaseAlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseAlgorithmConfig& BaseAlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_BaseAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void BaseAlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:BaseAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  if (GetArena() == nullptr && limit_config_ != nullptr) {
    delete limit_config_;
  }
  limit_config_ = nullptr;
  if (GetArena() == nullptr && instance_config_ != nullptr) {
    delete instance_config_;
  }
  instance_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseAlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SolverConfig solver_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LimitConfig limit_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .InstanceConfig instance_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseAlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SolverConfig solver_config = 1;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::solver_config(this), target, stream);
  }

  // .LimitConfig limit_config = 2;
  if (this->has_limit_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::limit_config(this), target, stream);
  }

  // .InstanceConfig instance_config = 3;
  if (this->has_instance_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::instance_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseAlgorithmConfig)
  return target;
}

size_t BaseAlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:BaseAlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SolverConfig solver_config = 1;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  // .LimitConfig limit_config = 2;
  if (this->has_limit_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*limit_config_);
  }

  // .InstanceConfig instance_config = 3;
  if (this->has_instance_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*instance_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseAlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:BaseAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseAlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseAlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseAlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseAlgorithmConfig)
    MergeFrom(*source);
  }
}

void BaseAlgorithmConfig::MergeFrom(const BaseAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:BaseAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
  if (from.has_limit_config()) {
    _internal_mutable_limit_config()->::LimitConfig::MergeFrom(from._internal_limit_config());
  }
  if (from.has_instance_config()) {
    _internal_mutable_instance_config()->::InstanceConfig::MergeFrom(
        from._internal_instance_config());
  }
}

void BaseAlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:BaseAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void BaseAlgorithmConfig::CopyFrom(const BaseAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:BaseAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool BaseAlgorithmConfig::IsInitialized() const {
  return true;
}

void BaseAlgorithmConfig::InternalSwap(BaseAlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseAlgorithmConfig, instance_config_) +
      sizeof(BaseAlgorithmConfig::instance_config_) -
      PROTOBUF_FIELD_OFFSET(BaseAlgorithmConfig, solver_config_)>(
      reinterpret_cast<char*>(&solver_config_), reinterpret_cast<char*>(&other->solver_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseAlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void EAAlgorithmConfig::InitAsDefaultInstance() {
  ::_EAAlgorithmConfig_default_instance_._instance.get_mutable()->mutation_config_ =
      const_cast<::MutationConfig*>(::MutationConfig::internal_default_instance());
  ::_EAAlgorithmConfig_default_instance_._instance.get_mutable()->selector_config_ =
      const_cast<::SelectorConfig*>(::SelectorConfig::internal_default_instance());
  ::_EAAlgorithmConfig_default_instance_._instance.get_mutable()->base_algorithm_config_ =
      const_cast<::BaseAlgorithmConfig*>(::BaseAlgorithmConfig::internal_default_instance());
}
class EAAlgorithmConfig::_Internal {
 public:
  static const ::MutationConfig& mutation_config(const EAAlgorithmConfig* msg);
  static const ::SelectorConfig& selector_config(const EAAlgorithmConfig* msg);
  static const ::BaseAlgorithmConfig& base_algorithm_config(const EAAlgorithmConfig* msg);
};

const ::MutationConfig& EAAlgorithmConfig::_Internal::mutation_config(
    const EAAlgorithmConfig* msg) {
  return *msg->mutation_config_;
}
const ::SelectorConfig& EAAlgorithmConfig::_Internal::selector_config(
    const EAAlgorithmConfig* msg) {
  return *msg->selector_config_;
}
const ::BaseAlgorithmConfig& EAAlgorithmConfig::_Internal::base_algorithm_config(
    const EAAlgorithmConfig* msg) {
  return *msg->base_algorithm_config_;
}
EAAlgorithmConfig::EAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EAAlgorithmConfig)
}
EAAlgorithmConfig::EAAlgorithmConfig(const EAAlgorithmConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mutation_config()) {
    mutation_config_ = new ::MutationConfig(*from.mutation_config_);
  } else {
    mutation_config_ = nullptr;
  }
  if (from._internal_has_selector_config()) {
    selector_config_ = new ::SelectorConfig(*from.selector_config_);
  } else {
    selector_config_ = nullptr;
  }
  if (from._internal_has_base_algorithm_config()) {
    base_algorithm_config_ = new ::BaseAlgorithmConfig(*from.base_algorithm_config_);
  } else {
    base_algorithm_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EAAlgorithmConfig)
}

void EAAlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &mutation_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&base_algorithm_config_) -
          reinterpret_cast<char*>(&mutation_config_)) +
          sizeof(base_algorithm_config_));
}

EAAlgorithmConfig::~EAAlgorithmConfig() {
  // @@protoc_insertion_point(destructor:EAAlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EAAlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete mutation_config_;
  if (this != internal_default_instance())
    delete selector_config_;
  if (this != internal_default_instance())
    delete base_algorithm_config_;
}

void EAAlgorithmConfig::ArenaDtor(void* object) {
  EAAlgorithmConfig* _this = reinterpret_cast<EAAlgorithmConfig*>(object);
  (void) _this;
}
void EAAlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void EAAlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EAAlgorithmConfig& EAAlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_EAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void EAAlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:EAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mutation_config_ != nullptr) {
    delete mutation_config_;
  }
  mutation_config_ = nullptr;
  if (GetArena() == nullptr && selector_config_ != nullptr) {
    delete selector_config_;
  }
  selector_config_ = nullptr;
  if (GetArena() == nullptr && base_algorithm_config_ != nullptr) {
    delete base_algorithm_config_;
  }
  base_algorithm_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EAAlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MutationConfig mutation_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SelectorConfig selector_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selector_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BaseAlgorithmConfig base_algorithm_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EAAlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MutationConfig mutation_config = 1;
  if (this->has_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::mutation_config(this), target, stream);
  }

  // .SelectorConfig selector_config = 2;
  if (this->has_selector_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::selector_config(this), target, stream);
  }

  // .BaseAlgorithmConfig base_algorithm_config = 3;
  if (this->has_base_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::base_algorithm_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EAAlgorithmConfig)
  return target;
}

size_t EAAlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:EAAlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MutationConfig mutation_config = 1;
  if (this->has_mutation_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*mutation_config_);
  }

  // .SelectorConfig selector_config = 2;
  if (this->has_selector_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*selector_config_);
  }

  // .BaseAlgorithmConfig base_algorithm_config = 3;
  if (this->has_base_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*base_algorithm_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EAAlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:EAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EAAlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EAAlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:EAAlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:EAAlgorithmConfig)
    MergeFrom(*source);
  }
}

void EAAlgorithmConfig::MergeFrom(const EAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:EAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mutation_config()) {
    _internal_mutable_mutation_config()->::MutationConfig::MergeFrom(
        from._internal_mutation_config());
  }
  if (from.has_selector_config()) {
    _internal_mutable_selector_config()->::SelectorConfig::MergeFrom(
        from._internal_selector_config());
  }
  if (from.has_base_algorithm_config()) {
    _internal_mutable_base_algorithm_config()->::BaseAlgorithmConfig::MergeFrom(
        from._internal_base_algorithm_config());
  }
}

void EAAlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:EAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void EAAlgorithmConfig::CopyFrom(const EAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:EAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool EAAlgorithmConfig::IsInitialized() const {
  return true;
}

void EAAlgorithmConfig::InternalSwap(EAAlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EAAlgorithmConfig, base_algorithm_config_) +
      sizeof(EAAlgorithmConfig::base_algorithm_config_) -
      PROTOBUF_FIELD_OFFSET(EAAlgorithmConfig, mutation_config_)>(
      reinterpret_cast<char*>(&mutation_config_),
      reinterpret_cast<char*>(&other->mutation_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EAAlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void GAAlgorithmConfig::InitAsDefaultInstance() {
  ::_GAAlgorithmConfig_default_instance_._instance.get_mutable()->mutation_config_ =
      const_cast<::MutationConfig*>(::MutationConfig::internal_default_instance());
  ::_GAAlgorithmConfig_default_instance_._instance.get_mutable()->crossover_config_ =
      const_cast<::CrossoverConfig*>(::CrossoverConfig::internal_default_instance());
  ::_GAAlgorithmConfig_default_instance_._instance.get_mutable()->selector_config_ =
      const_cast<::SelectorConfig*>(::SelectorConfig::internal_default_instance());
  ::_GAAlgorithmConfig_default_instance_._instance.get_mutable()->base_algorithm_config_ =
      const_cast<::BaseAlgorithmConfig*>(::BaseAlgorithmConfig::internal_default_instance());
}
class GAAlgorithmConfig::_Internal {
 public:
  static const ::MutationConfig& mutation_config(const GAAlgorithmConfig* msg);
  static const ::CrossoverConfig& crossover_config(const GAAlgorithmConfig* msg);
  static const ::SelectorConfig& selector_config(const GAAlgorithmConfig* msg);
  static const ::BaseAlgorithmConfig& base_algorithm_config(const GAAlgorithmConfig* msg);
};

const ::MutationConfig& GAAlgorithmConfig::_Internal::mutation_config(
    const GAAlgorithmConfig* msg) {
  return *msg->mutation_config_;
}
const ::CrossoverConfig& GAAlgorithmConfig::_Internal::crossover_config(
    const GAAlgorithmConfig* msg) {
  return *msg->crossover_config_;
}
const ::SelectorConfig& GAAlgorithmConfig::_Internal::selector_config(
    const GAAlgorithmConfig* msg) {
  return *msg->selector_config_;
}
const ::BaseAlgorithmConfig& GAAlgorithmConfig::_Internal::base_algorithm_config(
    const GAAlgorithmConfig* msg) {
  return *msg->base_algorithm_config_;
}
GAAlgorithmConfig::GAAlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GAAlgorithmConfig)
}
GAAlgorithmConfig::GAAlgorithmConfig(const GAAlgorithmConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mutation_config()) {
    mutation_config_ = new ::MutationConfig(*from.mutation_config_);
  } else {
    mutation_config_ = nullptr;
  }
  if (from._internal_has_crossover_config()) {
    crossover_config_ = new ::CrossoverConfig(*from.crossover_config_);
  } else {
    crossover_config_ = nullptr;
  }
  if (from._internal_has_selector_config()) {
    selector_config_ = new ::SelectorConfig(*from.selector_config_);
  } else {
    selector_config_ = nullptr;
  }
  if (from._internal_has_base_algorithm_config()) {
    base_algorithm_config_ = new ::BaseAlgorithmConfig(*from.base_algorithm_config_);
  } else {
    base_algorithm_config_ = nullptr;
  }
  ::memcpy(
      &q_, &from.q_,
      static_cast<size_t>(reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&q_)) +
          sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:GAAlgorithmConfig)
}

void GAAlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &mutation_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&mutation_config_)) +
          sizeof(h_));
}

GAAlgorithmConfig::~GAAlgorithmConfig() {
  // @@protoc_insertion_point(destructor:GAAlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GAAlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete mutation_config_;
  if (this != internal_default_instance())
    delete crossover_config_;
  if (this != internal_default_instance())
    delete selector_config_;
  if (this != internal_default_instance())
    delete base_algorithm_config_;
}

void GAAlgorithmConfig::ArenaDtor(void* object) {
  GAAlgorithmConfig* _this = reinterpret_cast<GAAlgorithmConfig*>(object);
  (void) _this;
}
void GAAlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void GAAlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GAAlgorithmConfig& GAAlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_GAAlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void GAAlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:GAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mutation_config_ != nullptr) {
    delete mutation_config_;
  }
  mutation_config_ = nullptr;
  if (GetArena() == nullptr && crossover_config_ != nullptr) {
    delete crossover_config_;
  }
  crossover_config_ = nullptr;
  if (GetArena() == nullptr && selector_config_ != nullptr) {
    delete selector_config_;
  }
  selector_config_ = nullptr;
  if (GetArena() == nullptr && base_algorithm_config_ != nullptr) {
    delete base_algorithm_config_;
  }
  base_algorithm_config_ = nullptr;
  ::memset(
      &q_, 0,
      static_cast<size_t>(reinterpret_cast<char*>(&h_) - reinterpret_cast<char*>(&q_)) +
          sizeof(h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GAAlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MutationConfig mutation_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CrossoverConfig crossover_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_crossover_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SelectorConfig selector_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selector_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 q = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          q_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .BaseAlgorithmConfig base_algorithm_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GAAlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAAlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MutationConfig mutation_config = 1;
  if (this->has_mutation_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::mutation_config(this), target, stream);
  }

  // .CrossoverConfig crossover_config = 2;
  if (this->has_crossover_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::crossover_config(this), target, stream);
  }

  // .SelectorConfig selector_config = 3;
  if (this->has_selector_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::selector_config(this), target, stream);
  }

  // uint32 q = 4;
  if (this->q() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_q(), target);
  }

  // uint32 h = 5;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_h(), target);
  }

  // .BaseAlgorithmConfig base_algorithm_config = 6;
  if (this->has_base_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::base_algorithm_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GAAlgorithmConfig)
  return target;
}

size_t GAAlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:GAAlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MutationConfig mutation_config = 1;
  if (this->has_mutation_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*mutation_config_);
  }

  // .CrossoverConfig crossover_config = 2;
  if (this->has_crossover_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*crossover_config_);
  }

  // .SelectorConfig selector_config = 3;
  if (this->has_selector_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*selector_config_);
  }

  // .BaseAlgorithmConfig base_algorithm_config = 6;
  if (this->has_base_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*base_algorithm_config_);
  }

  // uint32 q = 4;
  if (this->q() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->_internal_q());
  }

  // uint32 h = 5;
  if (this->h() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(this->_internal_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GAAlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:GAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GAAlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GAAlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAAlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:GAAlgorithmConfig)
    MergeFrom(*source);
  }
}

void GAAlgorithmConfig::MergeFrom(const GAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:GAAlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mutation_config()) {
    _internal_mutable_mutation_config()->::MutationConfig::MergeFrom(
        from._internal_mutation_config());
  }
  if (from.has_crossover_config()) {
    _internal_mutable_crossover_config()->::CrossoverConfig::MergeFrom(
        from._internal_crossover_config());
  }
  if (from.has_selector_config()) {
    _internal_mutable_selector_config()->::SelectorConfig::MergeFrom(
        from._internal_selector_config());
  }
  if (from.has_base_algorithm_config()) {
    _internal_mutable_base_algorithm_config()->::BaseAlgorithmConfig::MergeFrom(
        from._internal_base_algorithm_config());
  }
  if (from.q() != 0) {
    _internal_set_q(from._internal_q());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
}

void GAAlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:GAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void GAAlgorithmConfig::CopyFrom(const GAAlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:GAAlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool GAAlgorithmConfig::IsInitialized() const {
  return true;
}

void GAAlgorithmConfig::InternalSwap(GAAlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GAAlgorithmConfig, h_) + sizeof(GAAlgorithmConfig::h_) -
      PROTOBUF_FIELD_OFFSET(GAAlgorithmConfig, mutation_config_)>(
      reinterpret_cast<char*>(&mutation_config_),
      reinterpret_cast<char*>(&other->mutation_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GAAlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void AlgorithmConfig::InitAsDefaultInstance() {
  ::_AlgorithmConfig_default_instance_._instance.get_mutable()->ea_algorithm_config_ =
      const_cast<::EAAlgorithmConfig*>(::EAAlgorithmConfig::internal_default_instance());
  ::_AlgorithmConfig_default_instance_._instance.get_mutable()->ga_algorithm_config_ =
      const_cast<::GAAlgorithmConfig*>(::GAAlgorithmConfig::internal_default_instance());
}
class AlgorithmConfig::_Internal {
 public:
  static const ::EAAlgorithmConfig& ea_algorithm_config(const AlgorithmConfig* msg);
  static const ::GAAlgorithmConfig& ga_algorithm_config(const AlgorithmConfig* msg);
};

const ::EAAlgorithmConfig& AlgorithmConfig::_Internal::ea_algorithm_config(
    const AlgorithmConfig* msg) {
  return *msg->ea_algorithm_config_;
}
const ::GAAlgorithmConfig& AlgorithmConfig::_Internal::ga_algorithm_config(
    const AlgorithmConfig* msg) {
  return *msg->ga_algorithm_config_;
}
AlgorithmConfig::AlgorithmConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:AlgorithmConfig)
}
AlgorithmConfig::AlgorithmConfig(const AlgorithmConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_algorithm_type().empty()) {
    algorithm_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_algorithm_type(), GetArena());
  }
  if (from._internal_has_ea_algorithm_config()) {
    ea_algorithm_config_ = new ::EAAlgorithmConfig(*from.ea_algorithm_config_);
  } else {
    ea_algorithm_config_ = nullptr;
  }
  if (from._internal_has_ga_algorithm_config()) {
    ga_algorithm_config_ = new ::GAAlgorithmConfig(*from.ga_algorithm_config_);
  } else {
    ga_algorithm_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AlgorithmConfig)
}

void AlgorithmConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  algorithm_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &ea_algorithm_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&ga_algorithm_config_) -
          reinterpret_cast<char*>(&ea_algorithm_config_)) +
          sizeof(ga_algorithm_config_));
}

AlgorithmConfig::~AlgorithmConfig() {
  // @@protoc_insertion_point(destructor:AlgorithmConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlgorithmConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  algorithm_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete ea_algorithm_config_;
  if (this != internal_default_instance())
    delete ga_algorithm_config_;
}

void AlgorithmConfig::ArenaDtor(void* object) {
  AlgorithmConfig* _this = reinterpret_cast<AlgorithmConfig*>(object);
  (void) _this;
}
void AlgorithmConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void AlgorithmConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgorithmConfig& AlgorithmConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_AlgorithmConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void AlgorithmConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:AlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && ea_algorithm_config_ != nullptr) {
    delete ea_algorithm_config_;
  }
  ea_algorithm_config_ = nullptr;
  if (GetArena() == nullptr && ga_algorithm_config_ != nullptr) {
    delete ga_algorithm_config_;
  }
  ga_algorithm_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string algorithm_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_algorithm_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(
              ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AlgorithmConfig.algorithm_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EAAlgorithmConfig ea_algorithm_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ea_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GAAlgorithmConfig ga_algorithm_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ga_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlgorithmConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm_type = 1;
  if (this->algorithm_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_algorithm_type().data(),
        static_cast<int>(this->_internal_algorithm_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "AlgorithmConfig.algorithm_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_algorithm_type(), target);
  }

  // .EAAlgorithmConfig ea_algorithm_config = 3;
  if (this->has_ea_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::ea_algorithm_config(this), target, stream);
  }

  // .GAAlgorithmConfig ga_algorithm_config = 4;
  if (this->has_ga_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::ga_algorithm_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmConfig)
  return target;
}

size_t AlgorithmConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:AlgorithmConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algorithm_type = 1;
  if (this->algorithm_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_algorithm_type());
  }

  // .EAAlgorithmConfig ea_algorithm_config = 3;
  if (this->has_ea_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ea_algorithm_config_);
  }

  // .GAAlgorithmConfig ga_algorithm_config = 4;
  if (this->has_ga_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*ga_algorithm_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgorithmConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AlgorithmConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlgorithmConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:AlgorithmConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:AlgorithmConfig)
    MergeFrom(*source);
  }
}

void AlgorithmConfig::MergeFrom(const AlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:AlgorithmConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.algorithm_type().size() > 0) {
    _internal_set_algorithm_type(from._internal_algorithm_type());
  }
  if (from.has_ea_algorithm_config()) {
    _internal_mutable_ea_algorithm_config()->::EAAlgorithmConfig::MergeFrom(
        from._internal_ea_algorithm_config());
  }
  if (from.has_ga_algorithm_config()) {
    _internal_mutable_ga_algorithm_config()->::GAAlgorithmConfig::MergeFrom(
        from._internal_ga_algorithm_config());
  }
}

void AlgorithmConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:AlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void AlgorithmConfig::CopyFrom(const AlgorithmConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:AlgorithmConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfig::IsInitialized() const {
  return true;
}

void AlgorithmConfig::InternalSwap(AlgorithmConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  algorithm_type_.Swap(
      &other->algorithm_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig, ga_algorithm_config_) +
      sizeof(AlgorithmConfig::ga_algorithm_config_) -
      PROTOBUF_FIELD_OFFSET(AlgorithmConfig, ea_algorithm_config_)>(
      reinterpret_cast<char*>(&ea_algorithm_config_),
      reinterpret_cast<char*>(&other->ea_algorithm_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void NaiveSolveConfig::InitAsDefaultInstance() {
  ::_NaiveSolveConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
}
class NaiveSolveConfig::_Internal {
 public:
  static const ::SolverConfig& solver_config(const NaiveSolveConfig* msg);
};

const ::SolverConfig& NaiveSolveConfig::_Internal::solver_config(const NaiveSolveConfig* msg) {
  return *msg->solver_config_;
}
NaiveSolveConfig::NaiveSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NaiveSolveConfig)
}
NaiveSolveConfig::NaiveSolveConfig(const NaiveSolveConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NaiveSolveConfig)
}

void NaiveSolveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  solver_config_ = nullptr;
}

NaiveSolveConfig::~NaiveSolveConfig() {
  // @@protoc_insertion_point(destructor:NaiveSolveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NaiveSolveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete solver_config_;
}

void NaiveSolveConfig::ArenaDtor(void* object) {
  NaiveSolveConfig* _this = reinterpret_cast<NaiveSolveConfig*>(object);
  (void) _this;
}
void NaiveSolveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void NaiveSolveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NaiveSolveConfig& NaiveSolveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_NaiveSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void NaiveSolveConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:NaiveSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaiveSolveConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SolverConfig solver_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NaiveSolveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NaiveSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SolverConfig solver_config = 1;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::solver_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NaiveSolveConfig)
  return target;
}

size_t NaiveSolveConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:NaiveSolveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SolverConfig solver_config = 1;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NaiveSolveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:NaiveSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NaiveSolveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NaiveSolveConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:NaiveSolveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:NaiveSolveConfig)
    MergeFrom(*source);
  }
}

void NaiveSolveConfig::MergeFrom(const NaiveSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:NaiveSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
}

void NaiveSolveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:NaiveSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void NaiveSolveConfig::CopyFrom(const NaiveSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:NaiveSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool NaiveSolveConfig::IsInitialized() const {
  return true;
}

void NaiveSolveConfig::InternalSwap(NaiveSolveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(solver_config_, other->solver_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaiveSolveConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RBSSolveConfig::InitAsDefaultInstance() {
  ::_RBSSolveConfig_default_instance_._instance.get_mutable()->algorithm_config_ =
      const_cast<::AlgorithmConfig*>(::AlgorithmConfig::internal_default_instance());
  ::_RBSSolveConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
}
class RBSSolveConfig::_Internal {
 public:
  static const ::AlgorithmConfig& algorithm_config(const RBSSolveConfig* msg);
  static const ::SolverConfig& solver_config(const RBSSolveConfig* msg);
};

const ::AlgorithmConfig& RBSSolveConfig::_Internal::algorithm_config(const RBSSolveConfig* msg) {
  return *msg->algorithm_config_;
}
const ::SolverConfig& RBSSolveConfig::_Internal::solver_config(const RBSSolveConfig* msg) {
  return *msg->solver_config_;
}
RBSSolveConfig::RBSSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RBSSolveConfig)
}
RBSSolveConfig::RBSSolveConfig(const RBSSolveConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_algorithm_config()) {
    algorithm_config_ = new ::AlgorithmConfig(*from.algorithm_config_);
  } else {
    algorithm_config_ = nullptr;
  }
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RBSSolveConfig)
}

void RBSSolveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &algorithm_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&solver_config_) - reinterpret_cast<char*>(&algorithm_config_)) +
          sizeof(solver_config_));
}

RBSSolveConfig::~RBSSolveConfig() {
  // @@protoc_insertion_point(destructor:RBSSolveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RBSSolveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete algorithm_config_;
  if (this != internal_default_instance())
    delete solver_config_;
}

void RBSSolveConfig::ArenaDtor(void* object) {
  RBSSolveConfig* _this = reinterpret_cast<RBSSolveConfig*>(object);
  (void) _this;
}
void RBSSolveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void RBSSolveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RBSSolveConfig& RBSSolveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void RBSSolveConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:RBSSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && algorithm_config_ != nullptr) {
    delete algorithm_config_;
  }
  algorithm_config_ = nullptr;
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RBSSolveConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AlgorithmConfig algorithm_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SolverConfig solver_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RBSSolveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RBSSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AlgorithmConfig algorithm_config = 1;
  if (this->has_algorithm_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::algorithm_config(this), target, stream);
  }

  // .SolverConfig solver_config = 2;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::solver_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RBSSolveConfig)
  return target;
}

size_t RBSSolveConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:RBSSolveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AlgorithmConfig algorithm_config = 1;
  if (this->has_algorithm_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*algorithm_config_);
  }

  // .SolverConfig solver_config = 2;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RBSSolveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:RBSSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RBSSolveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RBSSolveConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:RBSSolveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:RBSSolveConfig)
    MergeFrom(*source);
  }
}

void RBSSolveConfig::MergeFrom(const RBSSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:RBSSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_algorithm_config()) {
    _internal_mutable_algorithm_config()->::AlgorithmConfig::MergeFrom(
        from._internal_algorithm_config());
  }
  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
}

void RBSSolveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:RBSSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RBSSolveConfig::CopyFrom(const RBSSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:RBSSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RBSSolveConfig::IsInitialized() const {
  return true;
}

void RBSSolveConfig::InternalSwap(RBSSolveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RBSSolveConfig, solver_config_) +
      sizeof(RBSSolveConfig::solver_config_) -
      PROTOBUF_FIELD_OFFSET(RBSSolveConfig, algorithm_config_)>(
      reinterpret_cast<char*>(&algorithm_config_),
      reinterpret_cast<char*>(&other->algorithm_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RBSSolveConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ParRBSSolveConfig::InitAsDefaultInstance() {
  ::_ParRBSSolveConfig_default_instance_._instance.get_mutable()->solver_config_ =
      const_cast<::SolverConfig*>(::SolverConfig::internal_default_instance());
}
class ParRBSSolveConfig::_Internal {
 public:
  static const ::SolverConfig& solver_config(const ParRBSSolveConfig* msg);
};

const ::SolverConfig& ParRBSSolveConfig::_Internal::solver_config(const ParRBSSolveConfig* msg) {
  return *msg->solver_config_;
}
ParRBSSolveConfig::ParRBSSolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), algorithm_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ParRBSSolveConfig)
}
ParRBSSolveConfig::ParRBSSolveConfig(const ParRBSSolveConfig& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), algorithm_configs_(from.algorithm_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_config()) {
    solver_config_ = new ::SolverConfig(*from.solver_config_);
  } else {
    solver_config_ = nullptr;
  }
  ::memcpy(
      &num_algorithms_, &from.num_algorithms_,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_unpropagated_) - reinterpret_cast<char*>(&num_algorithms_)) +
          sizeof(max_unpropagated_));
  // @@protoc_insertion_point(copy_constructor:ParRBSSolveConfig)
}

void ParRBSSolveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  ::memset(
      &solver_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_unpropagated_) - reinterpret_cast<char*>(&solver_config_)) +
          sizeof(max_unpropagated_));
}

ParRBSSolveConfig::~ParRBSSolveConfig() {
  // @@protoc_insertion_point(destructor:ParRBSSolveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParRBSSolveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance())
    delete solver_config_;
}

void ParRBSSolveConfig::ArenaDtor(void* object) {
  ParRBSSolveConfig* _this = reinterpret_cast<ParRBSSolveConfig*>(object);
  (void) _this;
}
void ParRBSSolveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void ParRBSSolveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParRBSSolveConfig& ParRBSSolveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ParRBSSolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void ParRBSSolveConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:ParRBSSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  algorithm_configs_.Clear();
  if (GetArena() == nullptr && solver_config_ != nullptr) {
    delete solver_config_;
  }
  solver_config_ = nullptr;
  ::memset(
      &num_algorithms_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&max_unpropagated_) - reinterpret_cast<char*>(&num_algorithms_)) +
          sizeof(max_unpropagated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParRBSSolveConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AlgorithmConfig algorithm_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_algorithm_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .SolverConfig solver_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_algorithms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_algorithms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_unpropagated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_unpropagated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParRBSSolveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ParRBSSolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AlgorithmConfig algorithm_configs = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->_internal_algorithm_configs_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        1, this->_internal_algorithm_configs(i), target, stream);
  }

  // .SolverConfig solver_config = 2;
  if (this->has_solver_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::solver_config(this), target, stream);
  }

  // uint32 num_algorithms = 4;
  if (this->num_algorithms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_num_algorithms(), target);
  }

  // uint32 max_unpropagated = 5;
  if (this->max_unpropagated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_max_unpropagated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ParRBSSolveConfig)
  return target;
}

size_t ParRBSSolveConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:ParRBSSolveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AlgorithmConfig algorithm_configs = 1;
  total_size += 1UL * this->_internal_algorithm_configs_size();
  for (const auto& msg : this->algorithm_configs_) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SolverConfig solver_config = 2;
  if (this->has_solver_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*solver_config_);
  }

  // uint32 num_algorithms = 4;
  if (this->num_algorithms() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_num_algorithms());
  }

  // uint32 max_unpropagated = 5;
  if (this->max_unpropagated() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_max_unpropagated());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParRBSSolveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:ParRBSSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParRBSSolveConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParRBSSolveConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:ParRBSSolveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:ParRBSSolveConfig)
    MergeFrom(*source);
  }
}

void ParRBSSolveConfig::MergeFrom(const ParRBSSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:ParRBSSolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  algorithm_configs_.MergeFrom(from.algorithm_configs_);
  if (from.has_solver_config()) {
    _internal_mutable_solver_config()->::SolverConfig::MergeFrom(from._internal_solver_config());
  }
  if (from.num_algorithms() != 0) {
    _internal_set_num_algorithms(from._internal_num_algorithms());
  }
  if (from.max_unpropagated() != 0) {
    _internal_set_max_unpropagated(from._internal_max_unpropagated());
  }
}

void ParRBSSolveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:ParRBSSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ParRBSSolveConfig::CopyFrom(const ParRBSSolveConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:ParRBSSolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ParRBSSolveConfig::IsInitialized() const {
  return true;
}

void ParRBSSolveConfig::InternalSwap(ParRBSSolveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  algorithm_configs_.InternalSwap(&other->algorithm_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParRBSSolveConfig, max_unpropagated_) +
      sizeof(ParRBSSolveConfig::max_unpropagated_) -
      PROTOBUF_FIELD_OFFSET(ParRBSSolveConfig, solver_config_)>(
      reinterpret_cast<char*>(&solver_config_), reinterpret_cast<char*>(&other->solver_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParRBSSolveConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SolveConfig::InitAsDefaultInstance() {
  ::_SolveConfig_default_instance_._instance.get_mutable()->naive_solve_config_ =
      const_cast<::NaiveSolveConfig*>(::NaiveSolveConfig::internal_default_instance());
  ::_SolveConfig_default_instance_._instance.get_mutable()->rbs_solve_config_ =
      const_cast<::RBSSolveConfig*>(::RBSSolveConfig::internal_default_instance());
  ::_SolveConfig_default_instance_._instance.get_mutable()->par_rbs_solve_config_ =
      const_cast<::ParRBSSolveConfig*>(::ParRBSSolveConfig::internal_default_instance());
}
class SolveConfig::_Internal {
 public:
  static const ::NaiveSolveConfig& naive_solve_config(const SolveConfig* msg);
  static const ::RBSSolveConfig& rbs_solve_config(const SolveConfig* msg);
  static const ::ParRBSSolveConfig& par_rbs_solve_config(const SolveConfig* msg);
};

const ::NaiveSolveConfig& SolveConfig::_Internal::naive_solve_config(const SolveConfig* msg) {
  return *msg->naive_solve_config_;
}
const ::RBSSolveConfig& SolveConfig::_Internal::rbs_solve_config(const SolveConfig* msg) {
  return *msg->rbs_solve_config_;
}
const ::ParRBSSolveConfig& SolveConfig::_Internal::par_rbs_solve_config(const SolveConfig* msg) {
  return *msg->par_rbs_solve_config_;
}
SolveConfig::SolveConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SolveConfig)
}
SolveConfig::SolveConfig(const SolveConfig& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solve_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solve_type().empty()) {
    solve_type_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_solve_type(), GetArena());
  }
  if (from._internal_has_naive_solve_config()) {
    naive_solve_config_ = new ::NaiveSolveConfig(*from.naive_solve_config_);
  } else {
    naive_solve_config_ = nullptr;
  }
  if (from._internal_has_rbs_solve_config()) {
    rbs_solve_config_ = new ::RBSSolveConfig(*from.rbs_solve_config_);
  } else {
    rbs_solve_config_ = nullptr;
  }
  if (from._internal_has_par_rbs_solve_config()) {
    par_rbs_solve_config_ = new ::ParRBSSolveConfig(*from.par_rbs_solve_config_);
  } else {
    par_rbs_solve_config_ = nullptr;
  }
  random_seed_ = from.random_seed_;
  // @@protoc_insertion_point(copy_constructor:SolveConfig)
}

void SolveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  solve_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(
      &naive_solve_config_, 0,
      static_cast<size_t>(
          reinterpret_cast<char*>(&random_seed_) - reinterpret_cast<char*>(&naive_solve_config_)) +
          sizeof(random_seed_));
}

SolveConfig::~SolveConfig() {
  // @@protoc_insertion_point(destructor:SolveConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SolveConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  solve_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete naive_solve_config_;
  if (this != internal_default_instance())
    delete rbs_solve_config_;
  if (this != internal_default_instance())
    delete par_rbs_solve_config_;
}

void SolveConfig::ArenaDtor(void* object) {
  SolveConfig* _this = reinterpret_cast<SolveConfig*>(object);
  (void) _this;
}
void SolveConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void SolveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SolveConfig& SolveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SolveConfig_core_2fproto_2fsolve_5fconfig_2eproto.base);
  return *internal_default_instance();
}

void SolveConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:SolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solve_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && naive_solve_config_ != nullptr) {
    delete naive_solve_config_;
  }
  naive_solve_config_ = nullptr;
  if (GetArena() == nullptr && rbs_solve_config_ != nullptr) {
    delete rbs_solve_config_;
  }
  rbs_solve_config_ = nullptr;
  if (GetArena() == nullptr && par_rbs_solve_config_ != nullptr) {
    delete par_rbs_solve_config_;
  }
  par_rbs_solve_config_ = nullptr;
  random_seed_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SolveConfig::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void) arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string solve_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_solve_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SolveConfig.solve_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 random_seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .NaiveSolveConfig naive_solve_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_naive_solve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .RBSSolveConfig rbs_solve_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rbs_solve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ParRBSSolveConfig par_rbs_solve_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_par_rbs_solve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(
            tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SolveConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string solve_type = 1;
  if (this->solve_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_solve_type().data(),
        static_cast<int>(this->_internal_solve_type().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SolveConfig.solve_type");
    target = stream->WriteStringMaybeAliased(1, this->_internal_solve_type(), target);
  }

  // uint32 random_seed = 2;
  if (this->random_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_random_seed(), target);
  }

  // .NaiveSolveConfig naive_solve_config = 3;
  if (this->has_naive_solve_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::naive_solve_config(this), target, stream);
  }

  // .RBSSolveConfig rbs_solve_config = 4;
  if (this->has_rbs_solve_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::rbs_solve_config(this), target, stream);
  }

  // .ParRBSSolveConfig par_rbs_solve_config = 5;
  if (this->has_par_rbs_solve_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::par_rbs_solve_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolveConfig)
  return target;
}

size_t SolveConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:SolveConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string solve_type = 1;
  if (this->solve_type().size() > 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                          this->_internal_solve_type());
  }

  // .NaiveSolveConfig naive_solve_config = 3;
  if (this->has_naive_solve_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*naive_solve_config_);
  }

  // .RBSSolveConfig rbs_solve_config = 4;
  if (this->has_rbs_solve_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*rbs_solve_config_);
  }

  // .ParRBSSolveConfig par_rbs_solve_config = 5;
  if (this->has_par_rbs_solve_config()) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(*par_rbs_solve_config_);
  }

  // uint32 random_seed = 2;
  if (this->random_seed() != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                          this->_internal_random_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SolveConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:SolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SolveConfig* source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SolveConfig>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolveConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:SolveConfig)
    MergeFrom(*source);
  }
}

void SolveConfig::MergeFrom(const SolveConfig& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:SolveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.solve_type().size() > 0) {
    _internal_set_solve_type(from._internal_solve_type());
  }
  if (from.has_naive_solve_config()) {
    _internal_mutable_naive_solve_config()->::NaiveSolveConfig::MergeFrom(
        from._internal_naive_solve_config());
  }
  if (from.has_rbs_solve_config()) {
    _internal_mutable_rbs_solve_config()->::RBSSolveConfig::MergeFrom(
        from._internal_rbs_solve_config());
  }
  if (from.has_par_rbs_solve_config()) {
    _internal_mutable_par_rbs_solve_config()->::ParRBSSolveConfig::MergeFrom(
        from._internal_par_rbs_solve_config());
  }
  if (from.random_seed() != 0) {
    _internal_set_random_seed(from._internal_random_seed());
  }
}

void SolveConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:SolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SolveConfig::CopyFrom(const SolveConfig& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:SolveConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SolveConfig::IsInitialized() const {
  return true;
}

void SolveConfig::InternalSwap(SolveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  solve_type_.Swap(
      &other->solve_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SolveConfig, random_seed_) + sizeof(SolveConfig::random_seed_) -
      PROTOBUF_FIELD_OFFSET(SolveConfig, naive_solve_config_)>(
      reinterpret_cast<char*>(&naive_solve_config_),
      reinterpret_cast<char*>(&other->naive_solve_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SolveConfig::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::MinisatCliConfig* Arena::CreateMaybeMessage<::MinisatCliConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::MinisatCliConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::BaseSolverConfig* Arena::CreateMaybeMessage<::BaseSolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::BaseSolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SimpSolverConfig* Arena::CreateMaybeMessage<::SimpSolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SimpSolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ParSolverConfig* Arena::CreateMaybeMessage<::ParSolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::ParSolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SolverConfig* Arena::CreateMaybeMessage<::SolverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SolverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ResourceLimitConfig* Arena::CreateMaybeMessage<::ResourceLimitConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::ResourceLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::FitnessLimitConfig* Arena::CreateMaybeMessage<::FitnessLimitConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::FitnessLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::PointsLimitConfig* Arena::CreateMaybeMessage<::PointsLimitConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::PointsLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ConjLimitConfig* Arena::CreateMaybeMessage<::ConjLimitConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::ConjLimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::LimitConfig* Arena::CreateMaybeMessage<::LimitConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::LimitConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::UniformMutationConfig* Arena::CreateMaybeMessage<::UniformMutationConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::UniformMutationConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::DoerrMutationConfig* Arena::CreateMaybeMessage<::DoerrMutationConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::DoerrMutationConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::MutationConfig* Arena::CreateMaybeMessage<::MutationConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::MutationConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::CrossoverConfig* Arena::CreateMaybeMessage<::CrossoverConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::CrossoverConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SelectorConfig* Arena::CreateMaybeMessage<::SelectorConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SelectorConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::InstanceConfig_SamplingSizeConfig*
Arena::CreateMaybeMessage<::InstanceConfig_SamplingSizeConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::InstanceConfig_SamplingSizeConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::InstanceConfig* Arena::CreateMaybeMessage<::InstanceConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::InstanceConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::BaseAlgorithmConfig* Arena::CreateMaybeMessage<::BaseAlgorithmConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::BaseAlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::EAAlgorithmConfig* Arena::CreateMaybeMessage<::EAAlgorithmConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::EAAlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::GAAlgorithmConfig* Arena::CreateMaybeMessage<::GAAlgorithmConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::GAAlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::AlgorithmConfig* Arena::CreateMaybeMessage<::AlgorithmConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::AlgorithmConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::NaiveSolveConfig* Arena::CreateMaybeMessage<::NaiveSolveConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::NaiveSolveConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::RBSSolveConfig* Arena::CreateMaybeMessage<::RBSSolveConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::RBSSolveConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::ParRBSSolveConfig* Arena::CreateMaybeMessage<::ParRBSSolveConfig>(
    Arena* arena) {
  return Arena::CreateMessageInternal<::ParRBSSolveConfig>(arena);
}
template <>
PROTOBUF_NOINLINE ::SolveConfig* Arena::CreateMaybeMessage<::SolveConfig>(Arena* arena) {
  return Arena::CreateMessageInternal<::SolveConfig>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
